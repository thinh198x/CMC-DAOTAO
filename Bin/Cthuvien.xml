<?xml version="1.0"?>
<doc>
    <assembly>
        <name>Cthuvien</name>
    </assembly>
    <members>
        <member name="T:Cthuvien.bang">
            <summary>Xử lý Table</summary>
        </member>
        <member name="M:Cthuvien.bang.Fi_TIM_COL(System.Data.DataTable,System.String)">
            <summary>
            Tìm thứ tự cột trong Table theo điều kiện tên cột=b_ten
            </summary>
            <param name="b_dt">Bảng cần tìm</param>
            <param name="b_ten">Tên cột cần tìm</param>
            <returns></returns>
        </member>
        <member name="M:Cthuvien.bang.Fi_TIM_LIKE(System.Data.DataTable,System.String,System.String)">
            <summary>
            Tìm thứ tự hàng trong Table theo điều kiện tên cột=b_ten, giá trị like b_gtri
            </summary>
            <param name="b_dt">Bảng cần tìm</param>
            <param name="b_ten">Tên cột cần tìm</param>
            <param name="b_gtri">Giá trị cột cần tìm</param>
            <returns></returns>
        </member>
        <member name="M:Cthuvien.bang.Fi_TIM_LIKE(System.Data.DataTable,System.String,System.String,System.Int32)">
            <summary>
            Tìm thứ tự hàng từ hàng b_hang trở đi trong Table theo điều kiện tên cột=b_ten, giá trị like b_gtri
            </summary>
            <param name="b_dt">Bảng cần tìm</param>
            <param name="b_ten">Tên cột cần tìm</param>
            <param name="b_gtri">Giá trị cột cần tìm</param>
            <param name="b_hang">Tìm từ hàng b_hàng trở đi</param>
            <returns></returns>
        </member>
        <member name="M:Cthuvien.bang.Fi_TIM_LIKE(System.Data.DataTable,System.String[],System.Object[])">
            <summary>
            Tìm thứ tự hàng trong Table theo điều kiện mảng tên cột=a_ten, mảng giá trị=a_gtri
            </summary>
            <param name="b_dt">Bảng cần tìm</param>
            <param name="a_ten">Mảng tên cột</param>
            <param name="a_gtri">Mảng giá trị</param>
            <returns></returns>
        </member>
        <member name="M:Cthuvien.bang.Fi_TIM_LIKED(System.Data.DataTable,System.String,System.String)">
            <summary>
            Tìm thứ tự hàng trong Table theo điều kiện tên cột=b_ten, giá trị like b_gtri
            </summary>
            <param name="b_dt">Bảng cần tìm</param>
            <param name="b_ten">Tên cột cần tìm</param>
            <param name="b_gtri">Giá trị cột cần tìm</param>
            <returns></returns>
        </member>
        <member name="M:Cthuvien.bang.Fi_TIM_LIKED(System.Data.DataTable,System.String,System.String,System.Int32)">
            <summary>
            Tìm thứ tự hàng từ hàng b_hang trở đi trong Table theo điều kiện tên cột=b_ten, giá trị like b_gtri
            </summary>
            <param name="b_dt">Bảng cần tìm</param>
            <param name="b_ten">Tên cột cần tìm</param>
            <param name="b_gtri">Giá trị cột cần tìm</param>
            <param name="b_hang">Tìm từ hàng b_hàng trở đi</param>
            <returns></returns>
        </member>
        <member name="M:Cthuvien.bang.Fi_TIM_LIKED(System.Data.DataTable,System.String[],System.Object[])">
            <summary>
            Tìm thứ tự hàng trong Table theo điều kiện mảng tên cột=a_ten, mảng giá trị=a_gtri
            </summary>
            <param name="b_dt">Bảng cần tìm</param>
            <param name="a_ten">Mảng tên cột</param>
            <param name="a_gtri">Mảng giá trị</param>
            <returns></returns>
        </member>
        <member name="M:Cthuvien.bang.Fi_TIM_ROWH(System.Data.DataTable,System.String,System.Object)">
            <summary>
            Tìm thứ tự hàng trong Table theo điều kiện tên cột=b_ten, giá trị=b_gtri
            </summary>
            <param name="b_dt">Bảng cần tìm</param>
            <param name="b_ten">Tên cột cần tìm</param>
            <param name="b_gtri">Giá trị cột cần tìm</param>
            <returns></returns>
        </member>
        <member name="M:Cthuvien.bang.Fi_TIM_ROW(System.Data.DataTable,System.String,System.Object)">
            <summary>
            Tìm thứ tự hàng trong Table theo điều kiện tên cột=b_ten, giá trị=b_gtri
            </summary>
            <param name="b_dt">Bảng cần tìm</param>
            <param name="b_ten">Tên cột cần tìm</param>
            <param name="b_gtri">Giá trị cột cần tìm</param>
            <returns></returns>
        </member>
        <member name="M:Cthuvien.bang.Fi_TIM_ROW(System.Data.DataTable,System.String[],System.Object[])">
            <summary>
            Tìm thứ tự hàng trong Table theo điều kiện mảng tên cột=a_ten, mảng giá trị=a_gtri
            </summary>
            <param name="b_dt">Bảng cần tìm</param>
            <param name="a_ten">Mảng tên cột</param>
            <param name="a_gtri">Mảng giá trị</param>
            <returns></returns>
        </member>
        <member name="M:Cthuvien.bang.Fi_TIM_ROW(System.Data.DataTable,System.String,System.Object,System.String)">
            <summary>
            Tìm thứ tự hàng trong Table theo điều kiện tên cột=b_ten, giá trị=b_gtri. Điều kiện động
            </summary>
            <param name="b_dt">Bảng cần tìm</param>
            <param name="b_ten">Tên cột cần tìm</param>
            <param name="b_gtri">Giá trị cột cần tìm</param>
            <param name="b_dk">Điều kiện tìm</param>
            <returns></returns>
        </member>
        <member name="M:Cthuvien.bang.Fi_TIM_ROW(System.Data.DataTable,System.String[],System.Object[],System.String[])">
            <summary>
            Tìm thứ tự hàng trong Table theo điều kiện mảng tên cột=a_ten, mảng giá trị=a_gtri. Điều kiện động
            </summary>
            <param name="b_dt">Bảng cần tìm</param>
            <param name="a_ten">Mảng tên cột cần tìm</param>
            <param name="a_gtri">Mảng giá trị cột cần tìm</param>
            <param name="a_dk">Mảng điều kiện động</param>
            <returns></returns>
        </member>
        <member name="M:Cthuvien.bang.Fi_TIM_ROW(System.Data.DataTable,System.String)">
            <summary>
            Tìm hàng có giá trị Max của tên cột đưa vào
            </summary>
            <param name="b_dt">Bảng cần tìm</param>
            <param name="b_ten">Tên cột</param>
            <returns></returns>
        </member>
        <member name="M:Cthuvien.bang.Fi_TIM_ROWC(System.Data.DataTable,System.String,System.Object)">
            TIM ROW CUOI
            <summary>
            Tìm thứ tự hàng trong Table theo điều kiện tên cột=b_ten, giá trị=b_gtri
            </summary>
            <param name="b_dt">Bảng cần tìm</param>
            <param name="b_ten">Tên cột cần tìm</param>
            <param name="b_gtri">Giá trị cột cần tìm</param>
            <returns></returns>
        </member>
        <member name="M:Cthuvien.bang.Fi_TIM_ROWC(System.Data.DataTable,System.String[],System.Object[])">
            <summary>
            Tìm thứ tự hàng trong Table theo điều kiện mảng tên cột=a_ten, mảng giá trị=a_gtri
            </summary>
            <param name="b_dt">Bảng cần tìm</param>
            <param name="a_ten">Mảng tên cột</param>
            <param name="a_gtri">Mảng giá trị</param>
            <returns></returns>
        </member>
        <member name="M:Cthuvien.bang.Fi_TIM_ROWC(System.Data.DataTable,System.String,System.Object,System.String)">
            <summary>
            Tìm thứ tự hàng trong Table theo điều kiện tên cột=b_ten, giá trị=b_gtri. Điều kiện động
            </summary>
            <param name="b_dt">Bảng cần tìm</param>
            <param name="b_ten">Tên cột cần tìm</param>
            <param name="b_gtri">Giá trị cột cần tìm</param>
            <param name="b_dk">Điều kiện tìm</param>
            <returns></returns>
        </member>
        <member name="M:Cthuvien.bang.Fi_TIM_ROWC(System.Data.DataTable,System.String[],System.Object[],System.String[])">
            <summary>
            Tìm thứ tự hàng trong Table theo điều kiện mảng tên cột=a_ten, mảng giá trị=a_gtri. Điều kiện động
            </summary>
            <param name="b_dt">Bảng cần tìm</param>
            <param name="a_ten">Mảng tên cột cần tìm</param>
            <param name="a_gtri">Mảng giá trị cột cần tìm</param>
            <param name="a_dk">Mảng điều kiện động</param>
            <returns></returns>
        </member>
        <member name="M:Cthuvien.bang.Fi_TIM_SO_TT(System.Data.DataTable,System.String)">
            <summary>
            Tìm số thứ tự tiếp
            </summary>
            <param name="b_dt">Bảng cần tìm</param>
            <param name="b_ten">Tên cột thứ tự</param>
            <returns></returns>
        </member>
        <member name="M:Cthuvien.bang.Fn_TIM_TONG(System.Data.DataTable,System.String)">
            <summary>
            Tìm tổng 1 trường
            </summary>
            <param name="b_dt">Bảng cần tìm</param>
            <param name="b_ten">Tên trường cần tính tổng</param>
            <returns></returns>
        </member>
        <member name="M:Cthuvien.bang.Fn_TIM_TONG(System.Data.DataTable,System.String[])">
            <summary>
            Tìm tổng nhiều trường
            </summary>
            <param name="b_dt">Bảng cần tìm</param>
            <param name="a_ten">Mảng tên trường cần tính tổng</param>
            <returns></returns>
        </member>
        <member name="M:Cthuvien.bang.Fn_TIM_TONG(System.Data.DataTable,System.String,System.String,System.Object)">
            <summary>
            Tìm tổng 1 trường theo điều kiện bằng, điều kiện đơn
            </summary>
            <param name="b_dt">Bảng cần tìm</param>
            <param name="b_ten">Tên trường cần tính tổng</param>
            <param name="b_truong">Tên trường điều kiện</param>
            <param name="b_gtri">Giá trị điều kiện</param>
            <returns></returns>
        </member>
        <member name="M:Cthuvien.bang.Fn_TIM_TONG(System.Data.DataTable,System.String,System.String[],System.Object[])">
            <summary>
            Tìm tổng 1 trường theo điều kiện bằng, điều kiện mảng
            </summary>
            <param name="b_dt">Bảng cần tìm</param>
            <param name="b_ten">Tên trường cần tính tổng</param>
            <param name="a_truong">Mảng tên trường điều kiện</param>
            <param name="a_gtri">Mảng giá trị điều kiện</param>
            <returns></returns>
        </member>
        <member name="M:Cthuvien.bang.Fn_TIM_TONG(System.Data.DataTable,System.String[],System.String,System.Object)">
            <summary>
            Tìm tổng nhiều trường theo điều kiện bằng, điều kiện đơn
            </summary>
            <param name="b_dt">Bảng cần tìm</param>
            <param name="a_ten">Mảng tên trường cần tính tổng</param>
            <param name="b_truong">Tên trường điều kiện</param>
            <param name="b_gtri">Giá trị điều kiện</param>
            <returns></returns>
        </member>
        <member name="M:Cthuvien.bang.Fn_TIM_TONG(System.Data.DataTable,System.String[],System.String[],System.Object[])">
            <summary>
            Tìm tổng nhiều trường theo điều kiện bằng, điều kiện mảng
            </summary>
            <param name="b_dt">Bảng cần tìm</param>
            <param name="a_ten">Mảng tên trường cần tính tổng</param>
            <param name="a_truong">Mảng tên trường điều kiện</param>
            <param name="a_gtri">Mảng giá trị điều kiện</param>
            <returns></returns>
        </member>
        <member name="M:Cthuvien.bang.Fs_TIM_TONG(System.Data.DataTable,System.String)">
            <summary>
            Tìm tổng 1 trường
            </summary>
            <param name="b_dt">Bảng cần tìm</param>
            <param name="b_ten">Tên cột cần tính tổng</param>
            <returns></returns>
        </member>
        <member name="M:Cthuvien.bang.Fs_TIM_TONG(System.Data.DataTable,System.String,System.String,System.Object)">
            <summary>
            Tìm chuỗi gộp các giá trị chuỗi của 1 trường theo điều kiện đơn
            </summary>
            <param name="b_dt">Bảng cần tìm</param>
            <param name="b_ten">Tên cột cần gộp</param>
            <param name="b_truong">Tên cột điều kiện</param>
            <param name="b_gtri">Giá trị điều kiện</param>
            <returns></returns>
        </member>
        <member name="M:Cthuvien.bang.Fs_TIM_TONG(System.Data.DataTable,System.String,System.String[],System.Object[])">
            <summary>
            Tìm chuỗi gộp các giá trị chuỗi của 1 trường theo điều kiện mảng
            </summary>
            <param name="b_dt">Bảng cần tìm</param>
            <param name="b_ten">Tên cột cần gộp</param>
            <param name="a_truong">Mảng tên cột điều kiện</param>
            <param name="a_gtri">Mảng giá trị điều kiện</param>
            <returns></returns>
        </member>
        <member name="M:Cthuvien.bang.Fs_TIM_TRUONG(System.Data.DataTable,System.String,System.String,System.String)">
            <summary> Lay truong tu bang </summary>
            <param name="b_dt">Bảng cần tim</param>
            <param name="b_tim">Cot tim</param>
            <param name="b_gtri">Gia tri tim</param>
            <param name="b_tra">Cot tra</param>
        </member>
        <member name="M:Cthuvien.bang.P_TIM_THEM(System.Data.DataTable@,System.Data.DataTable,System.String,System.String,System.String)">
            <summary>
            Thêm các giá trị ten tu bang vào cột
            </summary>
            <param name="b_dt">Bảng cần thêm</param>
            <param name="b_dtT">Bảng cần tim</param>
            <param name="b_cot">Tên cột cần thêm</param>
            <param name="b_tim">Tên cột tìm trong bảng lưu. Default b_tim=ma</param>
            <param name="b_lay">Cột lấy giá trị trong bảng lưu. Default b_lay=ten</param>
        </member>
        <member name="M:Cthuvien.bang.P_TIM_THEM(System.Data.DataTable@,System.String,System.String,System.String,System.String,System.String)">
            <summary>
            Thêm các giá trị ten tu SE vào cột
            </summary>
            <param name="b_dt">Bảng cần thêm</param>
            <param name="b_form">Tên form</param>
            <param name="b_bang">Tên bảng lưu trong SE</param>
            <param name="b_cot">Tên cột cần thêm</param>
            <param name="b_tim">Tên cột tìm trong bảng lưu. Default b_tim=ma</param>
            <param name="b_lay">Cột lấy giá trị trong bảng lưu. Default b_lay=ten</param>
        </member>
        <member name="M:Cthuvien.bang.Fs_COL_MANG(System.Data.DataTable,System.String)">
            <summary>
            Trả mảng chuỗi của 1 cột trong bảng
            </summary>
            <param name="b_dt">Bảng cần tìm</param>
            <param name="b_cot">Tên cột cần tìm</param>
            <returns></returns>
        </member>
        <member name="M:Cthuvien.bang.Fn_COL_MANG(System.Data.DataTable,System.String)">
            <summary>
            Trả mảng Double của 1 cột trong bảng
            </summary>
            <param name="b_dt">Bảng cần tìm</param>
            <param name="b_cot">Tên cột cần tìm</param>
            <returns></returns>
        </member>
        <member name="M:Cthuvien.bang.Fi_COL_MANG(System.Data.DataTable,System.String)">
            <summary>
            Trả mảng Integer của 1 cột trong bảng
            </summary>
            <param name="b_dt">Bảng cần tìm</param>
            <param name="b_cot">Tên cột cần tìm</param>
            <returns></returns>
        </member>
        <member name="M:Cthuvien.bang.Fd_COL_MANG(System.Data.DataTable,System.String)">
            <summary>
            Trả mảng Datetime của 1 cột trong bảng
            </summary>
            <param name="b_dt">Bảng cần tìm</param>
            <param name="b_cot">Tên cột cần tìm</param>
            <returns></returns>
        </member>
        <member name="M:Cthuvien.bang.Fobj_COL_MANG(System.Data.DataTable,System.String)">
            <summary>
            Trả mảng object của 1 cột trong bảng
            </summary>
            <param name="b_dt">Bảng cần tìm</param>
            <param name="b_cot">Tên cột cần tìm</param>
            <returns></returns>
        </member>
        <member name="M:Cthuvien.bang.Fi_COL_NGAY(System.Data.DataTable,System.String)">
            <summary>
            Trả mảng Integer của 1 cột ký tự dạng ngày (dd/mm/yyyy) trong bảng
            </summary>
            <param name="b_dt">Bảng cần tìm</param>
            <param name="b_cot">Tên cột cần tìm</param>
            <returns></returns>
        </member>
        <member name="M:Cthuvien.bang.Fd_COL_NGAY(System.Data.DataTable,System.String)">
            <summary>
            Trả mảng Date của 1 cột ký tự dạng ngày (dd/mm/yyyy) trong bảng
            </summary>
            <param name="b_dt">Bảng cần tìm</param>
            <param name="b_cot">Tên cột cần tìm</param>
            <returns></returns>
        </member>
        <member name="M:Cthuvien.bang.Fobj_COL_NGAY(System.Data.DataTable,System.String)">
            <summary>
            Trả mảng Object dạng Integer của 1 cột ký tự dạng ngày (dd/mm/yyyy) trong bảng
            </summary>
            <param name="b_dt">Bảng cần tìm</param>
            <param name="b_cot">Tên cột cần tìm</param>
            <returns></returns>
        </member>
        <member name="M:Cthuvien.bang.Fobj_COL_NGAYD(System.Data.DataTable,System.String)">
            <summary>
            Trả mảng Object dạng Date của 1 cột ký tự dạng ngày (dd/mm/yyyy) trong bảng
            </summary>
            <param name="b_dt">Bảng cần tìm</param>
            <param name="b_cot">Tên cột cần tìm</param>
            <returns></returns>
        </member>
        <member name="M:Cthuvien.bang.Fdt_COL_BANG(System.Data.DataTable,System.String,System.Object,System.String)">
            <summary>
            Trả một bảng chứa các hàng trong bảng gốc theo điều kiện đơn
            </summary>
            <param name="b_dt">Bảng gốc</param>
            <param name="b_cot">Tên cột điều kiện</param>
            <param name="b_gtri">Giá trị điều kiện</param>
            <returns></returns>
        </member>
        <member name="M:Cthuvien.bang.Fdt_COL_BANG(System.Data.DataTable,System.String[],System.String[],System.String)">
            <summary>
            Trả một bảng chứa các hàng trong bảng gốc theo điều kiện đơn
            </summary>
            <param name="b_dt">Bảng gốc</param>
            <param name="b_cot">Tên cột điều kiện</param>
            <param name="b_gtri">Giá trị điều kiện</param>
            <returns></returns>
        </member>
        <member name="M:Cthuvien.bang.Fdt_COL_BANG(System.Data.DataTable,System.String[],System.Object[])">
            <summary>
            Trả một bảng chứa các hàng trong bảng gốc theo điều kiện mảng
            </summary>
            <param name="b_dt">Bảng cần tìm</param>
            <param name="a_cot">Mảng tên cột điều kiện</param>
            <param name="a_gtri">Mảng giá trị điều kiện</param>
            <returns></returns>
        </member>
        <member name="M:Cthuvien.bang.P_CH_COL(System.Data.DataTable,System.Data.DataTable@)">
            <summary>
            Chuyển các hàng từ bảng cũ sang bảng mới, cùng tên cột
            </summary>
            <param name="b_dt_o">Bảng cũ</param>
            <param name="b_dt_i">Bảng mới</param>
        </member>
        <member name="M:Cthuvien.bang.P_CH_COL(System.Data.DataTable,System.Int32,System.Data.DataTable@,System.Int32)">
            <summary>
            Chuyển 1 hàng từ bảng cũ sang bảng mới, cùng tên cột
            </summary>
            <param name="b_dt_o">Bảng cũ</param>
            <param name="b_row_o">Vị trí hàng cũ</param>
            <param name="b_dt_i">Bảng mới</param>
            <param name="b_row_i">Vị trí hàng mới</param>
        </member>
        <member name="M:Cthuvien.bang.P_CH_COL(System.Data.DataTable,System.Int32,System.Data.DataTable@,System.Int32,System.String,System.Object)">
            <summary>
            Chuyển 1 hàng từ bảng cũ sang bảng mới, cùng tên cột, thay giá trị 1 trường
            </summary>
            <param name="b_dt_o">Bảng cũ</param>
            <param name="b_row_o">Vị trí hàng cũ</param>
            <param name="b_dt_i">Bảng mới</param>
            <param name="b_row_i">Vị trí hàng mới</param>
            <param name="b_truong">Tên trường cần thay giá trị</param>
            <param name="b_gtri">Giá trị thay</param>
        </member>
        <member name="M:Cthuvien.bang.P_CH_COL(System.Data.DataTable,System.Int32,System.Data.DataTable@,System.Int32,System.String[],System.Object[])">
            <summary>
            Chuyển 1 hàng từ bảng cũ sang bảng mới, cùng tên cột, thay giá trị nhiều trường
            </summary>
            <param name="b_dt_o">Bảng cũ</param>
            <param name="b_row_o">Vị trí hàng cũ</param>
            <param name="b_dt_i">Bảng mới</param>
            <param name="b_row_i">Vị trí hàng mới</param>
            <param name="a_truong">Mảng tên trường cần thay giá trị</param>
            <param name="a_gtri">Mảng giá trị thay</param>
        </member>
        <member name="M:Cthuvien.bang.Fb_CH_LEN(System.Data.DataTable@,System.Int32)">
            <summary>
            Chuyển hàng lên trên
            </summary>
            <param name="b_dt">Bảng cần chuyển</param>
            <param name="b_hang">Thứ tự hàng cần chuyển</param>
            <returns></returns>
        </member>
        <member name="M:Cthuvien.bang.Fb_CH_XUONG(System.Data.DataTable@,System.Int32)">
            <summary>
            Chuyển hàng xuống dưới
            </summary>
            <param name="b_dt">Bảng cần chuyển</param>
            <param name="b_hang">Thứ tự hàng cần chuyển</param>
            <returns></returns>
        </member>
        <member name="M:Cthuvien.bang.Fdt_HANG_COT(System.String,System.Data.DataTable)">
            <summary>
            Chuyển hàng thanh cot
            </summary>
            <param name="b_dt">Bảng cần chuyển</param>
            <returns></returns>
        </member>
        <member name="M:Cthuvien.bang.Fdt_COT_HANG(System.Data.DataTable,System.Int32)">
            <summary>
            Chuyển mot hang thang bang co 2 cot ma,nd. Neu b_hang khong co lay tai hang 0
            </summary>
            <param name="b_dt">Bảng cần chuyển</param>
            <returns></returns>
        </member>
        <member name="M:Cthuvien.bang.P_XEP(System.Data.DataTable@,System.String)">
            <summary>
            Sắp xếp bảng theo tên cột
            </summary>
            <param name="b_dt">Bảng cần xếp</param>
            <param name="b_ma">Tên cột</param>
        </member>
        <member name="M:Cthuvien.bang.P_XEP(System.Data.DataTable@,System.String,System.String)">
            <summary>
            Sắp xếp bảng theo mã quản lý
            </summary>
            <param name="b_dt">Bảng cần xếp</param>
            <param name="b_ma">Tên cột cần xếp</param>
            <param name="b_ma_ct">Tên cột quản lý cần xếp</param>
        </member>
        <member name="M:Cthuvien.bang.P_XEP(System.Data.DataTable@,System.String,System.String,System.String)">
            <summary>
            Sắp xếp bảng theo mã nhóm, mã quản lý
            </summary>
            <param name="b_dt">Bảng cần xếp</param>
            <param name="b_nhom">Tên cột nhóm cần xếp</param>
            <param name="b_ma">Tên cột cần xếp</param>
            <param name="b_ma_ct">Tên cột quản lý cần xếp</param>
        </member>
        <member name="M:Cthuvien.bang.P_XEP(System.Data.DataTable@,System.String[])">
            <summary>
            Sắp xếp bảng theo tên nhieu cột co loai va kieu xep. Moi phan tu cot gom: ten cot,loai gia gtri,kieu xep,tu,den
            Loai gia tri: s-so, n-ngay, c-chu
            kieu xep: l-Len,x-xuong
            </summary>
            <param name="b_dt">Bảng cần xếp</param>
            <param name="a_cot">Tên cột</param>
        </member>
        <member name="M:Cthuvien.bang.P_LOC(System.Data.DataTable@,System.String)">
            <summary>
            Loc bảng theo tên nhieu cột co loai va kieu xep. Moi phan tu cot gom: ten cot,loai gia gtri,kieu xep,tu,den
            Loai gia tri: s-so, n-ngay, c-chu
            kieu xep: l-Len,x-xuong
            </summary>
            <param name="b_dt">Bảng cần xếp</param>
            <param name="b_cot">Tên cột</param>
        </member>
        <member name="M:Cthuvien.bang.P_THEM_COL(System.Data.DataTable@,System.String[],System.String)">
            <summary>
            Thêm nhiều cột trắng vào Table
            </summary>
            <param name="b_dt">Bảng cần thêm</param>
            <param name="a_truong">Mảng tên các trường cần thêm</param>
            <param name="b_kieu">Chuỗi các ký tự đại diện cho kiểu dữ liệu của các trường tương ứng</param>
        </member>
        <member name="M:Cthuvien.bang.P_THEM_COL(System.Data.DataTable@,System.String,System.Type)">
            <summary>
            Thêm 1 cột trắng vào Table
            </summary>
            <param name="b_dt">Bảng cần thêm</param>
            <param name="b_truong">Tên trường cần thêm</param>
            <param name="b_ty">Kiểu dữ liệu trường cần thêm</param>
        </member>
        <member name="M:Cthuvien.bang.P_THEM_COL(System.Data.DataTable@,System.String[],System.Type[])">
            <summary>
            Thêm nhiều cột vào Table
            </summary>
            <param name="b_dt">Bảng cần thêm</param>
            <param name="a_truong">Mảng tên trường cần thêm</param>
            <param name="a_ty">Mảng kiểu dữ liệu trường cần thêm</param>
        </member>
        <member name="M:Cthuvien.bang.P_THEM_COL(System.Data.DataTable@,System.String)">
            <summary>
            Thêm 1 cột thứ tự vào Table
            </summary>
            <param name="b_dt">Bảng cần thêm</param>
            <param name="b_truong">Tên trường thứ tự</param>
        </member>
        <member name="M:Cthuvien.bang.P_THEM_COL(System.Data.DataTable@,System.String,System.String)">
            <summary>
            Thêm 1 cột vào Table từ 1 giá trị String
            </summary>
            <param name="b_dt">Bảng cần thêm</param>
            <param name="b_truong">Tên trường cần thêm</param>
            <param name="b_gtri">Giá trị trường cần thêm</param>
        </member>
        <member name="M:Cthuvien.bang.P_THEM_COL(System.Data.DataTable@,System.String,System.Int32)">
            <summary>
            Thêm 1 cột vào Table từ 1 giá trị Int
            </summary>
            <param name="b_dt">Bảng cần thêm</param>
            <param name="b_truong">Tên trường cần thêm</param>
            <param name="b_gtri">Giá trị trường cần thêm</param>
        </member>
        <member name="M:Cthuvien.bang.P_THEM_COL(System.Data.DataTable@,System.String,System.Double)">
            <summary>
            Thêm 1 cột vào Table từ 1 giá trị double
            </summary>
            <param name="b_dt">Bảng cần thêm</param>
            <param name="b_truong">Tên trường cần thêm</param>
            <param name="b_gtri">Giá trị trường cần thêm</param>
        </member>
        <member name="M:Cthuvien.bang.P_THEM_COL(System.Data.DataTable@,System.String,System.DateTime)">
            <summary>
            Thêm 1 cột vào Table từ 1 giá trị datetime
            </summary>
            <param name="b_dt">Bảng cần thêm</param>
            <param name="b_truong">Tên trường cần thêm</param>
            <param name="b_gtri">Giá trị trường cần thêm</param>
        </member>
        <member name="M:Cthuvien.bang.P_THEM_COL(System.Data.DataTable@,System.String,System.Boolean)">
            <summary>
            Thêm 1 cột vào Table từ 1 giá trị boolean
            </summary>
            <param name="b_dt">Bảng cần thêm</param>
            <param name="b_truong">Tên trường cần thêm</param>
            <param name="b_gtri">Giá trị trường cần thêm</param>
        </member>
        <member name="M:Cthuvien.bang.P_THEM_COL(System.Data.DataTable@,System.String,System.Object)">
            <summary>
            Thêm 1 cột vào Table từ 1 object
            </summary>
            <param name="b_dt">Bảng cần thêm</param>
            <param name="b_truong">Tên trường cần thêm</param>
            <param name="b_gtri">Giá trị trường cần thêm</param>
        </member>
        <member name="M:Cthuvien.bang.P_THEM_COL(System.Data.DataTable@,System.String[])">
            <summary>
            Thêm các cột trắng vào Table
            </summary>
            <param name="b_dt">Bảng cần thêm</param>
            <param name="a_truong">Mảng tên trường cần thêm</param>
        </member>
        <member name="M:Cthuvien.bang.P_THEM_COL(System.Data.DataTable@,System.String[],System.String[])">
            <summary>
            Thêm cột vào Table từ mảng String
            </summary>
            <param name="b_dt">Bảng cần thêm</param>
            <param name="a_truong">Mảng tên trường cần thêm</param>
            <param name="a_gtri">Mảng giá trị các trường cần thêm</param>
        </member>
        <member name="M:Cthuvien.bang.P_THEM_COL(System.Data.DataTable@,System.String[],System.Int32[])">
            <summary>
            Thêm cột vào Table từ mảng Int
            </summary>
            <param name="b_dt">Bảng cần thêm</param>
            <param name="a_truong">Mảng tên trường cần thêm</param>
            <param name="a_gtri">Mảng giá trị các trường cần thêm</param>
        </member>
        <member name="M:Cthuvien.bang.P_THEM_COL(System.Data.DataTable@,System.String[],System.Double[])">
            <summary>
            Thêm cột vào Table từ mảng double
            </summary>
            <param name="b_dt">Bảng cần thêm</param>
            <param name="a_truong">Mảng tên trường cần thêm</param>
            <param name="a_gtri">Mảng giá trị các trường cần thêm</param>
        </member>
        <member name="M:Cthuvien.bang.P_THEM_COL(System.Data.DataTable@,System.String[],System.DateTime[])">
            <summary>
            Thêm cột vào Table từ mảng date
            </summary>
            <param name="b_dt">Bảng cần thêm</param>
            <param name="a_truong">Mảng tên trường cần thêm</param>
            <param name="a_gtri">Mảng giá trị các trường cần thêm</param>
        </member>
        <member name="M:Cthuvien.bang.P_THEM_COL(System.Data.DataTable@,System.String[],System.Boolean[])">
            <summary>
            Thêm cột vào Table từ mảng bool
            </summary>
            <param name="b_dt">Bảng cần thêm</param>
            <param name="a_truong">Mảng tên trường cần thêm</param>
            <param name="a_gtri">Mảng giá trị các trường cần thêm</param>
        </member>
        <member name="M:Cthuvien.bang.P_THEM_COL(System.Data.DataTable@,System.String[],System.Object[])">
            <summary>
            Thêm cột vào Table từ mảng Object
            </summary>
            <param name="b_dt">Bảng cần thêm</param>
            <param name="a_truong">Mảng tên trường cần thêm</param>
            <param name="a_gtri">Mảng giá trị các trường cần thêm</param>
        </member>
        <member name="M:Cthuvien.bang.P_THEM_COL(System.Data.DataTable@,System.Data.DataTable)">
            <summary>
            Thêm cột vào Table từ Table khác
            </summary>
            <param name="b_dt_m">Bảng mới</param>
            <param name="b_dt_c">Bảng cũ</param>
        </member>
        <member name="M:Cthuvien.bang.P_THEM_COL(System.Data.DataTable@,System.Data.DataTable,System.Int32)">
            <summary>
            Thêm cột và giá trị vào Table từ Table khác
            </summary>
            <param name="b_dt_m">Bảng mới</param>
            <param name="b_dt_c">Bảng cũ</param>
            <param name="b_hang">Vị trí hàng cần thêm</param>
        </member>
        <member name="M:Cthuvien.bang.P_COPY_COL(System.Data.DataTable@,System.String,System.String)">
            <summary>
            Thêm 1 cột mới và gán giá trị từ cột khác
            </summary>
            <param name="b_dt">Bảng cần thêm</param>
            <param name="b_moi">Tên cột mới</param>
            <param name="b_cu">Tên cột cũ</param>
        </member>
        <member name="M:Cthuvien.bang.P_THEM_TRANG(System.Data.DataTable@,System.Int32)">
            <summary>
            Thêm vài dòng trắng vào cuối bảng
            </summary>
            <param name="b_dt">Bảng cần thêm</param>
            <param name="b_dong">Số dòng cần thêm</param>
        </member>
        <member name="M:Cthuvien.bang.P_THEM_TRANG(System.Data.DataTable@,System.Int32,System.Int32)">
            <summary>
            Thêm vài dòng trắng tại vị trí chỉ định
            </summary>
            <param name="b_dt">Bảng cần thêm</param>
            <param name="b_dong">Số dòng cần thêm</param>
            <param name="b_hang">Vị trí hàng cần thêm</param>
        </member>
        <member name="M:Cthuvien.bang.P_THEM_HANG(System.Data.DataTable@,System.Int32,System.Int32)">
            <summary>
            Thêm 1 dòng tại vị trí chỉ định và copy giá trị của vài cột từ vị trí cột được chỉ định
            </summary>
            <param name="b_dt">Bảng cần thêm</param>
            <param name="b_cot">Vị trí cột chỉ định</param>
            <param name="b_hang">Vị trí hàng cần thêm</param>
        </member>
        <member name="M:Cthuvien.bang.P_THEM_HANG(System.Data.DataTable@,System.Int32,System.Int32,System.Int32)">
            <summary>
            Thêm vài dòng tại vị trí chỉ định và copy giá trị của vài cột từ vị trí cột được chỉ định
            </summary>
            <param name="b_dt">Bảng cần thêm</param>
            <param name="b_cot">Vị trí cột chỉ định</param>
            <param name="b_dong">Số hàng cần thêm</param>
            <param name="b_hang">Vị trí hàng cần thêm</param>
        </member>
        <member name="M:Cthuvien.bang.P_THEM_HANG(System.Data.DataTable@,System.Object[])">
            <summary>
            Thêm 1 hàng, đặt giá trị các cột theo thứ tự
            </summary>
            <param name="b_dt"></param>
            <param name="a_gtri"></param>
        </member>
        <member name="M:Cthuvien.bang.P_THEM_HANG(System.Data.DataTable@,System.String,System.Object)">
            <summary>
            Thêm 1 hàng, đặt giá trị 1 cột b_tên
            </summary>
            <param name="b_dt">Bảng cần thêm</param>
            <param name="b_ten">Tên cột cần đặt giá trị</param>
            <param name="b_gtri">Giá trị đặt</param>
        </member>
        <member name="M:Cthuvien.bang.P_THEM_HANG(System.Data.DataTable@,System.String[],System.Object[])">
            <summary>
            Thêm 1 hàng, đặt giá trị các cột a_tên
            </summary>
            <param name="b_dt">Bảng cần thêm</param>
            <param name="a_ten">Mảng tên các cột cần đặt giá trị</param>
            <param name="a_gtri">Mảng các giá trị cần đặt</param>
        </member>
        <member name="M:Cthuvien.bang.P_THEM_HANG(System.Data.DataTable@,System.Object[],System.Int32)">
            <summary>
            Thêm 1 hàng tại hàng b_hang, đặt giá trị các cột theo thứ tự
            </summary>
            <param name="b_dt">Bảng cần thêm</param>
            <param name="a_gtri">Mảng các giá trị tương ứng các cột</param>
            <param name="b_hang">Vị trí hàng thêm</param>
        </member>
        <member name="M:Cthuvien.bang.P_THEM_HANG(System.Data.DataTable@,System.String,System.Object,System.Int32)">
            <summary>
            Thêm 1 hàng tại hàng b_hang, đặt giá trị 1 cột b_tên
            </summary>
            <param name="b_dt">Bảng cần thêm</param>
            <param name="b_ten">Tên cột cần đặt giá trị</param>
            <param name="b_gtri">Giá trị đặt</param>
            <param name="b_hang">Vị trí hàng thêm</param>
        </member>
        <member name="M:Cthuvien.bang.P_THEM_HANG(System.Data.DataTable@,System.String[],System.Object[],System.Int32)">
            <summary>
            Thêm 1 hàng tại hàng b_hang, đặt giá trị các cột a_tên
            </summary>
            <param name="b_dt">Bảng cần thêm</param>
            <param name="a_ten">Mảng các tên cột cần đặt giá trị</param>
            <param name="a_gtri">Mảng các giá trị đặt</param>
            <param name="b_hang">Vị trí hàng thêm</param>
        </member>
        <member name="M:Cthuvien.bang.P_THEM_HANG(System.Data.DataTable@,System.String,System.Object[],System.Int32)">
            <summary>
            Thêm 1 hàng tại hàng b_hang, đặt giá trị các cột a_tên
            </summary>
            <param name="b_dt">Bảng cần thêm</param>
            <param name="a_ten">Các tên cột cần đặt giá trị trong b_ten cách nhau dấu phẩy</param>
            <param name="a_gtri">Mảng các giá trị đặt</param>
            <param name="b_hang">Vị trí hàng thêm</param>
        </member>
        <member name="M:Cthuvien.bang.P_THEM_HANG(System.Data.DataTable@,System.String,System.Object[])">
            <summary>
            Thêm các hàng bằng kích thước mảng dọc, đặt giá trị 1 cột b_cot từ mảng
            </summary>
            <param name="b_dt">Bảng cần thêm</param>
            <param name="b_cot">Tên cột cần đặt giá trị</param>
            <param name="a_gtri">Mảng dọc</param>
        </member>
        <member name="M:Cthuvien.bang.P_THEM_HANG(System.Data.DataTable@,System.Data.DataTable)">
            <summary>
            Thêm tất cả hàng từ bảng khác
            </summary>
            <param name="b_dt_m">Bảng mới</param>
            <param name="b_dt_c">Bảng cũ</param>
        </member>
        <member name="M:Cthuvien.bang.P_THEM_HANG(System.Data.DataTable@,System.Data.DataTable,System.Int32)">
            <summary>
            Thêm tất cả hàng từ bảng khác tại hàng b_hang
            </summary>
            <param name="b_dt_m">Bảng mới</param>
            <param name="b_dt_c">Bảng cũ</param>
            <param name="b_hang">Vị trí hàng bắt đầu thêm</param>
        </member>
        <member name="M:Cthuvien.bang.P_THEM_HANG(System.Data.DataTable@,System.Data.DataTable,System.Int32,System.Int32)">
            <summary>
            Thêm vào bảng mới vài hàng từ bảng khác bắt đầu từ hàng được chỉ định
            </summary>
            <param name="b_dt_m">Bảng mới</param>
            <param name="b_dt_c">Bảng cũ</param>
            <param name="b_bdau">Vị trí hàng bắt đầu trong bảng b_dt_c</param>
            <param name="b_hang">Số hàng cần thêm lấy trong bảng b_dt_c</param>
        </member>
        <member name="M:Cthuvien.bang.P_THEM_HANG(System.Data.DataTable@,System.Data.DataTable,System.Int32,System.Int32,System.Int32)">
            <summary>
            Chèn vào bảng mới tại hàng chỉ định vài hàng từ bảng khác bắt đầu từ hàng được chỉ định
            </summary>
            <param name="b_dt_m">Bảng mới</param>
            <param name="b_dt_c">Bảng cũ</param>
            <param name="b_tai">Vị trí hàng bắt đầu chèn trong bảng b_dt_m</param>
            <param name="b_bdau">Vị trí hàng bắt đầu trong bảng b_dt_c</param>
            <param name="b_hang">Số hàng cần thêm lấy trong bảng b_dt_c</param>
        </member>
        <member name="M:Cthuvien.bang.P_THEM_HANG(System.Data.DataTable@,System.Data.DataTable,System.String,System.Object)">
            <summary>
            Thêm hàng từ bảng khác với điều kiện đơn
            </summary>
            <param name="b_dt_m">Bảng mới</param>
            <param name="b_dt_c">Bảng cũ</param>
            <param name="b_ten">Tên trường điều kiện</param>
            <param name="b_gtri">Giá trị điều kiện</param>
        </member>
        <member name="M:Cthuvien.bang.P_THEM_HANG(System.Data.DataTable@,System.Data.DataTable,System.String[],System.Object[])">
            <summary>
            Thêm hàng từ bảng khác với điều kiện mảng
            </summary>
            <param name="b_dt_m">Bảng mới</param>
            <param name="b_dt_c">Bảng cũ</param>
            <param name="a_ten">Mảng các tên trường điều kiện</param>
            <param name="a_gtri">Mảng các giá trị điều kiện</param>
        </member>
        <member name="M:Cthuvien.bang.P_THEM_HANG(System.Data.DataTable@,System.Data.DataTable,System.String,System.Object,System.String)">
            <summary>
            Thêm hàng từ bảng khác điều kiện đơn, động
            </summary>
            <param name="b_dt_m">Bảng mới</param>
            <param name="b_dt_c">Bảng cũ</param>
            <param name="b_ten">Tên trường điều kiện</param>
            <param name="b_gtri">Giá trị điều kiện</param>
            <param name="b_dk">Chuỗi điều kiện</param>
        </member>
        <member name="M:Cthuvien.bang.P_THEM_HANG(System.Data.DataTable@,System.Data.DataTable,System.String[],System.Object[],System.String[])">
            <summary>
            Thêm hàng từ bảng khác điều kiện mảng, điều kiện động
            </summary>
            <param name="b_dt_m">Bảng mới</param>
            <param name="b_dt_c">Bảng cũ</param>
            <param name="a_ten">Mảng các tên trường điều kiện</param>
            <param name="a_gtri">Mảng các giá trị điều kiện</param>
            <param name="a_dk">Mảng các điều kiện</param>
        </member>
        <member name="M:Cthuvien.bang.P_THEM_HANG(System.Data.DataTable@,System.Data.DataTable,System.String)">
            <summary>
            Thêm hàng từ bảng khác loại trừ điều kiện đơn
            </summary>
            <param name="b_dt_m">Bảng mới</param>
            <param name="b_dt_c">Bảng cũ</param>
            <param name="b_ten">Tên cột điều kiện loại trừ</param>
        </member>
        <member name="M:Cthuvien.bang.P_THEM_HANG(System.Data.DataTable@,System.Data.DataTable,System.String[])">
            <summary>
            Thêm hàng từ bảng khác loại trừ điều kiện mảng
            </summary>
            <param name="b_dt_m">Bảng mới</param>
            <param name="b_dt_c">Bảng cũ</param>
            <param name="a_ten">Mảng các tên cột điều kiện loại trừ</param>
        </member>
        <member name="M:Cthuvien.bang.Fdt_GOM_BANG(System.Data.DataTable,System.String[])">
            <summary>
            Gom nhiều cột có giá trị duy nhất từ bảng
            </summary>
            <param name="b_dt_c">Bảng cũ</param>
            <param name="a_ten">Mảng các tên cột để tạo bảng mới</param>
            <returns></returns>
        </member>
        <member name="M:Cthuvien.bang.Fdt_GOM_BANG(System.Data.DataTable,System.String)">
            <summary>
            Gom nhiều cột có giá trị duy nhất từ bảng
            </summary>
            <param name="b_dt_c">Bảng cũ</param>
            <param name="b_ten">Các tên cột cách nhau dấu phẩy, để tạo bảng mới</param>
            <returns></returns>
        </member>
        <member name="M:Cthuvien.bang.Fdt_GOM_BANG(System.Data.DataTable,System.String[],System.String[])">
            <summary>
            Gom 1 bảng theo nhiều trường và tính tổng nhiều cột
            </summary>
            <param name="b_dt_c">Bảng cần gom</param>
            <param name="a_ten">Mảng các tên trường cần gom</param>
            <param name="a_cot">Mảng các tên trường cần tính tổng</param>
            <returns></returns>
        </member>
        <member name="M:Cthuvien.bang.Fdt_GOM_BANG(System.Data.DataTable,System.String,System.String)">
            <summary>
            Gom 1 bảng theo nhiều trường và tính tổng nhiều cột
            </summary>
            <param name="b_dt_c">Bảng cần gom</param>
            <param name="a_ten">Các tên trường cần gom, cách nhau dấu phẩy</param>
            <param name="a_cot">Các tên trường cần tính tổng, cách nhau dấu phẩy</param>
            <returns></returns>
        </member>
        <member name="M:Cthuvien.bang.Fdt_GOM_BANG(System.Data.DataTable,System.String[],System.String)">
            <summary>
            Gom 1 bảng theo nhiều trường và tính tổng 1 trường theo các trường đã gom
            </summary>
            <param name="b_dt_c">Bảng cần gom</param>
            <param name="a_ten">Mảng các tên trường để gom</param>
            <param name="b_cot">Tên trường tính tổng</param>
            <returns></returns>
        </member>
        <member name="M:Cthuvien.bang.Fdt_GOM_BANG(System.Data.DataTable,System.String,System.String[])">
            <summary>
            Gom 1 bảng theo 1 trường và tính tổng nhiều cột
            </summary>
            <param name="b_dt_c">Bảng cần gom</param>
            <param name="b_ten">Tên trường để gom</param>
            <param name="a_cot">Mảng các tên cột cần tính tổng</param>
            <returns></returns>
        </member>
        <member name="M:Cthuvien.bang.P_BO_COT(System.Data.DataTable@,System.String)">
            <summary>
            Bỏ cột của Table có tên=b_ten
            </summary>
            <param name="b_dt">Bảng cần bỏ</param>
            <param name="b_ten">Tên trường cần bỏ</param>
        </member>
        <member name="M:Cthuvien.bang.P_BO_COT(System.Data.DataTable@,System.String[])">
            <summary>
            Bỏ cột của Table có tên trùng tên trong a_ten
            </summary>
            <param name="b_dt">Bảng cần bỏ</param>
            <param name="a_ten">Mảng các tên trường cần bỏ</param>
        </member>
        <member name="M:Cthuvien.bang.P_BO_COT(System.Data.DataTable@,System.Data.DataTable)">
            <summary>
            Bỏ cột của Table có tên trùng tên trong Table b_dt_bo
            </summary>
            <param name="b_dt">Bảng cần bỏ</param>
            <param name="b_dt_bo">Bảng có các tên trường để bỏ</param>
        </member>
        <member name="M:Cthuvien.bang.P_BO_COT(System.Web.UI.Control,System.Data.DataTable@)">
            <summary>
            Bỏ cột của Table có tên trùng tên trong Controls
            </summary>
            <param name="b_f">Control</param>
            <param name="b_dt">Bảng cần bỏ</param>
        </member>
        <member name="M:Cthuvien.bang.P_BO_HANG(System.Data.DataTable@,System.Int32)">
            <summary>
            Bỏ hàng tại vị trí được chỉ định
            </summary>
            <param name="b_dt">Bảng cần bỏ</param>
            <param name="b_hang">Vị trí hàng cần bỏ</param>
        </member>
        <member name="M:Cthuvien.bang.P_BO_HANG(System.Data.DataTable@,System.Int32,System.Int32)">
            <summary>
            Bỏ từ hàng b_dau đến hang b_cuối
            </summary>
            <param name="b_dt">Bảng cần bỏ</param>
            <param name="b_dau">Hàng bắt đầu bỏ</param>
            <param name="b_cuoi">Hàng kết thúc bỏ</param>
        </member>
        <member name="M:Cthuvien.bang.P_BO_HANG(System.Data.DataTable@,System.String,System.Object)">
            <summary>
            Bỏ hàng theo điều kiện đơn
            </summary>
            <param name="b_dt">Bảng cần bỏ</param>
            <param name="b_ten">Tên trường điều kiện</param>
            <param name="b_gtri">Giá trị điều kiện</param>
        </member>
        <member name="M:Cthuvien.bang.P_BO_HANG(System.Data.DataTable@,System.String[],System.Object[])">
            <summary>
            Bỏ hàng theo điều kiện mảng
            </summary>
            <param name="b_dt">Bảng cần bỏ</param>
            <param name="a_ten">Mảng các tên trường điều kiện</param>
            <param name="a_gtri">Mảng các giá trị điều kiện</param>
        </member>
        <member name="M:Cthuvien.bang.P_BO_HANG(System.Data.DataTable@,System.String,System.Data.DataTable,System.String)">
            <summary>
            Bỏ hàng theo điều kiện đơn với giá trị điều kiện lấy từ 1 bảng khác
            </summary>
            <param name="b_dt">Bảng cần bỏ</param>
            <param name="b_ten">Tên cột điều kiện</param>
            <param name="b_dt_t">Bảng chứa giá trị điều kiện</param>
            <param name="b_ten_t">Tên cột cần lấy giá trị điều kiện</param>
        </member>
        <member name="M:Cthuvien.bang.P_BO_HANG(System.Data.DataTable@,System.String[],System.Data.DataTable,System.String[])">
            <summary>
            Bỏ hàng có các ten=a_ten và các gtri=giá trị cột a_ten_t của bảng b_dt_t
            </summary>
            <param name="b_dt">Bảng cần bỏ</param>
            <param name="a_ten">Mảng các tên cột điều kiện</param>
            <param name="b_dt_t">Bảng chứa các giá trị điều kiện</param>
            <param name="a_ten_t">Mảng các tên cột cần lấy giá trị điều kiện</param>
        </member>
        <member name="M:Cthuvien.bang.P_BO_BCAO(System.Data.DataTable@,System.String,System.String)">
            <summary>
            Bỏ hàng mã bậc cao
            </summary>
            <param name="b_dt">Bảng cần bỏ</param>
            <param name="b_ma">Tên trường điều kiện</param>
            <param name="b_ma_ct">Tên trường chứa giá trị điều kiện</param>
        </member>
        <member name="M:Cthuvien.bang.P_DON(System.Data.DataTable@,System.String)">
            <summary>
            Dọn dẹp Table và xóa Record có trường b_ten phải nhập nhưng không nhập
            </summary>
            <param name="b_dt">Bảng cần dọn</param>
            <param name="b_ten">Tên trường điều kiện</param>
        </member>
        <member name="M:Cthuvien.bang.P_DON(System.Data.DataTable@)">
            <summary>
            Dọn dẹp Table và xóa Record có trường in hoa phải nhập nhưng không nhập
            </summary>
            <param name="b_dt">Bảng cần dọn</param>
        </member>
        <member name="M:Cthuvien.bang.P_DON(System.Data.DataTable@,System.String[])">
            <summary>
            Dọn dẹp Table và xóa Record có trường a_ten phải nhập nhưng không nhập
            </summary>
            <param name="b_dt">Bảng cần dọn</param>
            <param name="a_ten">Mảng các tên trường điều kiện</param>
        </member>
        <member name="M:Cthuvien.bang.P_DON_DK(System.Data.DataTable@,System.String[])">
            <summary>
            Dọn dẹp Table và xóa Record có các trường a_ten cùng không nhập
            </summary>
            <param name="b_dt">Bảng cần dọn</param>
            <param name="a_ten">Mảng các tên trường điều kiện</param>
        </member>
        <member name="M:Cthuvien.bang.P_THAY_GTRI(System.Data.DataTable@,System.String,System.Object,System.Object)">
            <summary>
            Thay giá trị b_gtri_m cho cột b_ten có giá trị cũ bằng b_gtri_c
            </summary>
            <param name="b_dt">Bảng cần thay</param>
            <param name="b_ten">Tên cột cần thay giá trị</param>
            <param name="b_gtri_c">Giá trị cũ</param>
            <param name="b_gtri_m">Giá trị mới</param>
        </member>
        <member name="M:Cthuvien.bang.P_THAY_GTRI(System.Data.DataTable@,System.String[],System.Object[],System.Object[])">
            <summary>
            Thay giá trị a_gtri_m cho cột a_ten có giá trị cũ bằng a_gtri_c
            </summary>
            <param name="b_dt">Bảng cần thay</param>
            <param name="a_ten">Mảng các tên cột cần thay giá trị</param>
            <param name="a_gtri_c">Mảng các giá trị cũ</param>
            <param name="a_gtri_m">Mảng các giá trị mới</param>
        </member>
        <member name="M:Cthuvien.bang.P_THAY_GTRI(System.Data.DataTable@,System.String,System.Object,System.String,System.Object)">
            <summary>
            Thay giá trị b_gtri_m cho cột b_ten có giá trị cột b_ten_c cũ bằng b_gtri_c
            </summary>
            <param name="b_dt">Bảng cần thay</param>
            <param name="b_ten">Tên cột cần thay giá trị</param>
            <param name="b_gtri_m">Giá trị mới</param>
            <param name="b_ten_c">Tên cột điều kiện</param>
            <param name="b_gtri_c">Giá trị điều kiện</param>
        </member>
        <member name="M:Cthuvien.bang.P_THAY_GTRI(System.Data.DataTable@,System.String,System.Object,System.String[],System.Object[])">
            <summary>
            Thay giá trị b_gtri_m cho cột b_ten có giá trị cột a_ten_c cũ bằng a_gtri_c
            </summary>
            <param name="b_dt">Bảng cần thay</param>
            <param name="b_ten">Tên cột cần thay giá trị</param>
            <param name="b_gtri_m">Giá trị mới</param>
            <param name="a_ten_c">Mảng các tên cột điều kiện</param>
            <param name="a_gtri_c">Mảng các giá trị điều kiện</param>
        </member>
        <member name="M:Cthuvien.bang.P_THAY_GTRI(System.Data.DataTable@,System.String[],System.Object[],System.String,System.Object)">
            <summary>
            Thay giá trị a_gtri_m cho cột a_ten có giá trị cột b_ten_c cũ bằng b_gtri_c
            </summary>
            <param name="b_dt">Bảng cần thay</param>
            <param name="a_ten">Mảng tên cột cần thay giá trị</param>
            <param name="a_gtri_m">Mảng giá trị thay</param>
            <param name="b_ten_c">Tên cột điều kiện</param>
            <param name="b_gtri_c">Giá trị điều kiện</param>
        </member>
        <member name="M:Cthuvien.bang.P_THAY_GTRI(System.Data.DataTable@,System.String[],System.Object[],System.String[],System.Object[])">
            <summary>
            Thay giá trị a_gtri_m cho cột a_ten có giá trị cột a_ten_c cũ bằng a_gtri_c
            </summary>
            <param name="b_dt">Bảng cần thay</param>
            <param name="a_ten">Mảng tên cột cần thay giá trị</param>
            <param name="a_gtri_m">Mảng giá trị cần thay</param>
            <param name="a_ten_c">Mảng tên cột điều kiện</param>
            <param name="a_gtri_c">Mảng giá trị điều kiện</param>
        </member>
        <member name="M:Cthuvien.bang.P_THAY_GTRI(System.Data.DataTable@,System.Data.DataTable,System.Int32,System.Int32)">
            <summary>
            Thay giá trị từ hàng tại b_hang_c bảng khác có cùng tên cột cho 1 hàng tại b_hang_m
            </summary>
            <param name="b_dt_m">Bảng nhận giá trị</param>
            <param name="b_dt_c">Bảng cho giá trị</param>
            <param name="b_hang_m">Vị trí hàng bảng nhận giá trị</param>
            <param name="b_hang_c">Vị trí hàng bảng cho giá trị</param>
        </member>
        <member name="M:Cthuvien.bang.P_THAY_GTRI(System.Data.DataTable@,System.Data.DataTable,System.Int32)">
            <summary>
            Thay giá trị từ hàng  tại hàng 0 của bảng khác có cùng tên cột cho 1 hàng tại b_hang
            </summary>
            <param name="b_dt_m">Bảng nhận giá trị</param>
            <param name="b_dt_c">Bảng cho giá trị</param>
            <param name="b_hang">Vị trí hàng bảng nhận giá trị</param>
        </member>
        <member name="M:Cthuvien.bang.P_THAY_GTRI(System.Data.DataTable@,System.Data.DataTable,System.String)">
            <summary>
            Thay giá trị từ bảng khác cho các hàng có giá trị cột b_ten bằng nhau
            </summary>
            <param name="b_dt_m">Bảng nhận giá trị</param>
            <param name="b_dt_c">Bảng cho giá trị</param>
            <param name="b_ten">Tên cột điều kiện</param>
        </member>
        <member name="M:Cthuvien.bang.P_THAY_GTRI(System.Data.DataTable@,System.Data.DataTable,System.String[])">
            <summary>
            Thay giá trị từ bảng khác cho các hàng có giá trị cột a_ten bằng nhau
            </summary>
            <param name="b_dt_m">Bảng nhận giá trị</param>
            <param name="b_dt_c">Bảng cho giá trị</param>
            <param name="a_ten">Mảng tên cột điều kiện</param>
        </member>
        <member name="M:Cthuvien.bang.P_THAY_GTRI(System.Data.DataTable@,System.Data.DataTable,System.String,System.String)">
            <summary>
            Thay giá trị cột b_cot từ bảng khác cho từng hàng nếu 2 bảng có giá trị cột b_ten bằng nhau
            </summary>
            <param name="b_dt_m">Bảng nhận giá trị</param>
            <param name="b_dt_c">Bảng cho giá trị</param>
            <param name="b_ten">Tên các cột điều kiện cách nhau dấu phẩy</param>
            <param name="b_cot">Tên các cột thay giá trị cách nhau dấu phẩy</param>
        </member>
        <member name="M:Cthuvien.bang.P_THAY_GTRI(System.Data.DataTable@,System.Data.DataTable,System.String,System.String[])">
            <summary>
            Thay giá trị các cột a_cot từ bảng khác cho từng hàng nếu 2 bảng có giá trị cột b_ten bằng nhau
            </summary>
            <param name="b_dt_m">Bảng nhận giá trị</param>
            <param name="b_dt_c">Bảng cho giá trị</param>
            <param name="b_ten">Tên cột điều kiện</param>
            <param name="a_cot">Mảng tên cột thay giá trị</param>
        </member>
        <member name="M:Cthuvien.bang.P_THAY_GTRI(System.Data.DataTable@,System.Data.DataTable,System.String[],System.String[])">
            <summary>
            Thay giá trị các cột a_cot từ bảng khác cho từng hàng nếu 2 bảng có giá trị cột a_ten bằng nhau
            </summary>
            <param name="b_dt_m">Bảng nhận giá trị</param>
            <param name="b_dt_c">Bảng cho giá trị</param>
            <param name="a_ten">Mảng các tên cột điều kiện</param>
            <param name="a_cot">Mảng các tên cột cần thay giá trị</param>
        </member>
        <member name="M:Cthuvien.bang.P_GAN_COT(System.Data.DataTable@,System.String,System.String)">
            <summary>
            Gán giá trị các cột cho các cột khác
            </summary>
            <param name="b_dt">Bảng cần đặt giá trị</param>
            <param name="b_ten_nhan">Tên cột nhận giá trị</param>
            <param name="b_ten_cho">Tên cột cho giá trị</param>
        </member>
        <member name="M:Cthuvien.bang.P_GAN_COT(System.Data.DataTable@,System.String[],System.String[])">
            <summary>
            Gán giá trị các cột cho các cột khác
            </summary>
            <param name="b_dt">Bảng cần đặt giá trị</param>
            <param name="a_ten_nhan">Mảng tên cột nhận giá trị</param>
            <param name="a_ten_cho">Mảng tên cột cho giá trị</param>
        </member>
        <member name="M:Cthuvien.bang.P_DAT_GTRI(System.Data.DataTable@,System.String,System.Object)">
            <summary>
            Gán giá trị cho 1 cột cho tất cả các hàng
            </summary>
            <param name="b_dt">Bảng cần gán</param>
            <param name="b_ten">Tên cột cần gán</param>
            <param name="b_gtri">Giá trị cần gán</param>
        </member>
        <member name="M:Cthuvien.bang.P_DAT_GTRI(System.Data.DataTable@,System.String[],System.Object[])">
            <summary>
            Gán giá trị nhiều cột từ mảng giá trị cho tất cả các hàng
            </summary>
            <param name="b_dt">Bảng cần gán</param>
            <param name="a_ten">Mảng tên cột cần gán</param>
            <param name="a_gtri">Mảng giá trị cần gán</param>
        </member>
        <member name="M:Cthuvien.bang.P_DAT_GTRI(System.Data.DataTable@,System.String,System.Object,System.Int32)">
            <summary>
            Gán giá trị 1 cột cho 1 hàng
            </summary>
            <param name="b_dt">Bảng cần gán</param>
            <param name="b_ten">Tên cột cần gán</param>
            <param name="b_gtri">Giá trị gán</param>
            <param name="b_hang">Vị trí hàng cần gán</param>
        </member>
        <member name="M:Cthuvien.bang.P_DAT_GTRI(System.Data.DataTable@,System.String[],System.Object[],System.Int32)">
            <summary>
            Gán giá trị nhiều cột từ mảng giá trị cho 1 hàng
            </summary>
            <param name="b_dt">Bảng cần gán</param>
            <param name="a_ten">Mảng tên cột cần gán</param>
            <param name="a_gtri">Mảng giá trị gán</param>
            <param name="b_hang">Vị trí hàng cần gán</param>
        </member>
        <member name="M:Cthuvien.bang.P_DAT_GTRI(System.Data.DataTable@,System.Data.DataTable)">
            <summary>
            Gán giá trị hàng 0 từ bảng khác cho tất cả các hàng
            </summary>
            <param name="b_dt_m">Bảng nhận giá trị</param>
            <param name="b_dt_c">Bảng cho giá trị</param>
        </member>
        <member name="M:Cthuvien.bang.P_DAT_GTRI(System.Data.DataTable@,System.Data.DataTable,System.String)">
            <summary>
            Gán giá trị từ bảng khác cho các hàng có giá trị cột b_ten bằng nhau
            </summary>
            <param name="b_dt_m">Bảng nhận giá trị</param>
            <param name="b_dt_c">Bảng cho giá trị</param>
            <param name="b_ten">Tên cột điều kiện</param>
        </member>
        <member name="M:Cthuvien.bang.P_DAT_GTRI_N(System.Data.DataTable@,System.Data.DataTable,System.Int32)">
            <summary>
            Gán giá trị từ bảng khác cùng tên cột cho các hàng từ vị trí b_hang
            </summary>
            <param name="b_dt_m">Bảng nhận giá trị</param>
            <param name="b_dt_c">Bảng cho giá trị</param>
            <param name="b_hang">Vị trí hàng bắt đầu</param>
        </member>
        <member name="M:Cthuvien.bang.P_CH_HOA(System.Data.DataTable@,System.String)">
            <summary>
            Chuyển giá trị 1 cột thành chữ hoa
            </summary>
            <param name="b_dt">Bảng cần chuyển</param>
            <param name="b_cot">Tên cột cần chuyển</param>
        </member>
        <member name="M:Cthuvien.bang.P_CH_HOA(System.Data.DataTable@,System.String[])">
            <summary>
            Chuyển giá trị nhiều cột thành chữ hoa
            </summary>
            <param name="b_dt">Bảng cần chuyển</param>
            <param name="a_cot">Mảng tên cột cần chuyển</param>
        </member>
        <member name="M:Cthuvien.bang.P_CH_Uni(System.Data.DataTable@,System.String[])">
            <summary>
            Thêm ký tự nhận biết vào nhiều trường là trường Unicode
            </summary>
            <param name="b_dt">Bảng cần thêm</param>
            <param name="a_cot">Mảng tên cột Unicode</param>
        </member>
        <member name="M:Cthuvien.bang.P_CH_Uni(System.Data.DataTable@,System.String)">
            <summary>
            Thêm ký tự nhận biết vào 1 trường là trường Unicode
            </summary>
            <param name="b_dt">Bảng cần thêm</param>
            <param name="b_cot">Tên cột Unicode</param>
        </member>
        <member name="M:Cthuvien.bang.P_BO_Uni(System.Data.DataTable@)">
            <summary>
            Bỏ ký tự nhận biết Unicode của cả bảng
            </summary>
            <param name="b_dt">Bảng cần bỏ</param>
        </member>
        <member name="M:Cthuvien.bang.P_BO_Uni(System.Data.DataTable@,System.String)">
            <summary>
            Bỏ ký tự nhận biết Unicode của 1 trường
            </summary>
            <param name="b_dt">Bảng cần bỏ</param>
            <param name="b_cot">Tên cột cần bỏ</param>
        </member>
        <member name="M:Cthuvien.bang.P_BO_Uni(System.Data.DataTable@,System.String[])">
            <summary>
            Bỏ ký tự nhận biết Unicode của nhiều trường
            </summary>
            <param name="b_dt">Bảng cần bỏ</param>
            <param name="a_cot">Mảng tên cột cần bỏ</param>
        </member>
        <member name="M:Cthuvien.bang.P_CH_BLANK(System.Data.DataTable@,System.String)">
            <summary>
            Chuyển cột dạng chuỗi thành ký tự cách nếu null
            </summary>
            <param name="b_dt">Bảng cần chuyển</param>
            <param name="b_cot">Tên các cột cần chuyển. Tên các cột cách nhau dấu phẩy</param>
        </member>
        <member name="M:Cthuvien.bang.P_CH_BLANK(System.Data.DataTable@,System.String[])">
            <summary>
            Chuyển nhiều cột dạng chuỗi thành ký tự cách nếu null
            </summary>
            <param name="b_dt">Bảng cần chuyển</param>
            <param name="a_cot">Mảng tên cột cần chuyển</param>
        </member>
        <member name="M:Cthuvien.bang.P_CH_BLANK(System.Data.DataTable@,System.String,System.String)">
            <summary>
            Chuyển cột dạng chuỗi thành b_gtri nếu null
            </summary>
            <param name="b_dt">Bảng cần chuyển</param>
            <param name="b_cot">Tên cột cần chuyển</param>
            <param name="b_gtri">Giá trị cần chuyển</param>
        </member>
        <member name="M:Cthuvien.bang.P_CH_BLANK(System.Data.DataTable@,System.String[],System.String[])">
            <summary>
            Chuyển nhiều cột dạng chuỗi thành a_gtri nếu null
            </summary>
            <param name="b_dt">Bảng cần chuyển</param>
            <param name="a_cot">Mảng tên cột cần chuyển</param>
            <param name="a_gtri">Mảng giá trị cần chuyển</param>
        </member>
        <member name="M:Cthuvien.bang.P_CH_BLANK(System.Data.DataTable@,System.String,System.String[])">
            <summary>
            Chuyển nhiều cột dạng chuỗi thành a_gtri nếu null
            </summary>
            <param name="b_dt">Bảng cần chuyển</param>
            <param name="a_cot">các tên cột cần chuyển, trong b_cot cách nhau dấu phẩy</param>
            <param name="a_gtri">Mảng giá trị cần chuyển</param>
        </member>
        <member name="M:Cthuvien.bang.P_CH_NULL(System.Data.DataTable@,System.String)">
            <summary>
            Chuyển các cột có tên b_cot thành null
            </summary>
            <param name="b_dt">Bảng cần chuyển</param>
            <param name="b_cot">Tên cần chuyển</param>
        </member>
        <member name="M:Cthuvien.bang.P_CH_NULL(System.Data.DataTable@,System.String[])">
            <summary>
            Chuyển các cột có tên a_cot thành null
            </summary>
            <param name="b_dt">Bảng cần chuyển</param>
            <param name="a_cot">Mảng tên cột cần chuyển</param>
        </member>
        <member name="M:Cthuvien.bang.P_CH_GTRI(System.Data.DataTable@,System.String,System.String)">
            <summary>
            Chuyển giá trị cột b_ten cho cột b_khac
            </summary>
            <param name="b_dt">Bảng cần chuyển</param>
            <param name="b_ten">Tên cột cho giá trị</param>
            <param name="b_khac">Tên cột nhận giá trị</param>
        </member>
        <member name="M:Cthuvien.bang.P_SO_NULL(System.Data.DataTable@)">
            <summary>
            Chuyển các cột dạng số thành null
            </summary>
            <param name="b_dt">Bảng cần chuyển</param>
        </member>
        <member name="M:Cthuvien.bang.P_SO_NULL(System.Data.DataTable@,System.String)">
            <summary>
            Chuyển cột loại số thành null
            </summary>
            <param name="b_dt">Bảng cần chuyển</param>
            <param name="b_cot">Tên cột cần chuyển</param>
        </member>
        <member name="M:Cthuvien.bang.P_SO_NULL(System.Data.DataTable@,System.String[])">
            <summary>
            Chuyển các cột loại số thành null
            </summary>
            <param name="b_dt">Bảng cần chuyển</param>
            <param name="a_cot">Mảng tên cột cần chuyển</param>
        </member>
        <member name="M:Cthuvien.bang.P_SO_NULL(System.Data.DataTable@,System.Int32)">
            <summary>
            Chuyển các cột loại số thành null tại vị trí hàng b_hang
            </summary>
            <param name="b_dt">Bảng cần chuyển</param>
            <param name="b_hang">Vị trí hàng cần chuyển</param>
        </member>
        <member name="M:Cthuvien.bang.P_CH_KHONG(System.Data.DataTable@)">
            <summary>
            Chuyển các cột loại số null thành 0
            </summary>
            <param name="b_dt">Bảng cần chuyển</param>
        </member>
        <member name="M:Cthuvien.bang.P_SO_CSO(System.Data.DataTable@,System.String)">
            <summary>
            Chuyển cột loại số thành chuỗi dạng số
            </summary>
            <param name="b_dt">Bảng cần chuyển</param>
            <param name="b_cot">Tên cột cần chuyển</param>
        </member>
        <member name="M:Cthuvien.bang.P_SO_CH(System.Data.DataTable@,System.String)">
            <summary>
            Chuyển cột loại số thành chuỗi
            </summary>
            <param name="b_dt">Bảng cần chuyển</param>
            <param name="b_cot">Tên cột cần chuyển</param>
        </member>
        <member name="M:Cthuvien.bang.P_CSO_SO(System.Data.DataTable@,System.String)">
            <summary>
            Chuyển giá trị cột chuỗi dạng số sang số
            </summary>
            <param name="b_dt">Bảng cần chuyển</param>
            <param name="b_cot">Tên cột cần chuyển</param>
        </member>
        <member name="M:Cthuvien.bang.P_SO_CSO(System.Data.DataTable@,System.String[])">
            <summary>
            Chuyển nhiều cột loại số thành chuỗi dạng số
            </summary>
            <param name="b_dt">Bảng cần chuyển</param>
            <param name="a_cot">Mảng tên các cột cần chuyển</param>
        </member>
        <member name="M:Cthuvien.bang.P_CSO_SO(System.Data.DataTable@,System.String[])">
            <summary>
            Chuyển giá trị cột chuỗi dạng số sang số
            </summary>
            <param name="b_dt">Bảng cần chuyển</param>
            <param name="a_cot">Mảng tên cột cần chuyển</param>
        </member>
        <member name="M:Cthuvien.bang.P_SO_CNG(System.Data.DataTable@,System.String)">
            <summary>
            Chuyển giá trị cột từ ngày dạng số yyyyMMdd sang ngày dạng chữ dd/MM/yyyy
            </summary>
            <param name="b_dt">Bảng cần chuyển</param>
            <param name="b_cot">Tên cột cần chuyển</param>
        </member>
        <member name="M:Cthuvien.bang.P_SO_CNG(System.Data.DataTable@,System.String[])">
            <summary>
            Chuyển giá trị nhiều cột từ ngày dạng số yyyyMMdd sang ngày dạng chữ dd/MM/yyyy
            </summary>
            <param name="b_dt">Bảng cần chuyển</param>
            <param name="b_cot">Mảng các tên cột cần chuyển</param>
        </member>
        <member name="M:Cthuvien.bang.P_CSO_CNG(System.Data.DataTable@,System.String)">
            <summary>
            Chuyển giá trị cột từ ngày dạng chuỗi yyyyMMdd sang ngày dạng chuỗi dd/MM/yyyy
            </summary>
            <param name="b_dt">Bảng cần chuyển</param>
            <param name="b_cot">Tên cột cần chuyển</param>
        </member>
        <member name="M:Cthuvien.bang.P_CSO_CNG(System.Data.DataTable@,System.String[])">
            <summary>
            Chuyển giá trị cột từ ngày dạng chuỗi yyyyMMdd sang ngày dạng chuỗi dd/MM/yyyy
            </summary>
            <param name="b_dt">Bảng cần chuyển</param>
            <param name="a_cot">Mảng tên cột cần chuyển</param>
        </member>
        <member name="M:Cthuvien.bang.P_NG_CNG(System.Data.DataTable@,System.String)">
            <summary>
            Chuyển giá trị cột từ ngày dạng date sang ngày dạng chữ
            </summary>
            <param name="b_dt">Bảng cần chuyển</param>
            <param name="b_cot">Tên cột cần chuyển</param>
        </member>
        <member name="M:Cthuvien.bang.P_NG_CNG(System.Data.DataTable@,System.String[])">
            <summary>
            Chuyển giá trị nhiều cột từ ngày dạng date sang ngày dạng chữ
            </summary>
            <param name="b_dt">Bảng cần chuyển</param>
            <param name="a_cot">Mảng tên cột cần chuyển</param>
        </member>
        <member name="M:Cthuvien.bang.P_NG_NGC(System.Data.DataTable@,System.String)">
            <summary>
            Chuyển giá trị cột từ ngày dạng date sang ngày dạng dd/mm/yyyy
            </summary>
            <param name="b_dt">Bảng cần chuyển</param>
            <param name="b_cot">Tên cột cần chuyển. Nếu nhiều cột, tên cột cách nhau dấu phẩy</param>
        </member>
        <member name="M:Cthuvien.bang.P_NG_SO(System.Data.DataTable@,System.String)">
            <summary>
            Chuyển giá trị cột từ ngày dạng date sang ngày dạng số
            </summary>
            <param name="b_dt">Bảng cần chuyển</param>
            <param name="b_cot">Tên cột cần chuyển</param>
        </member>
        <member name="M:Cthuvien.bang.P_NG_SO(System.Data.DataTable@,System.String[])">
            <summary>
            Chuyển giá trị nhiều cột từ ngày dạng date sang ngày dạng số
            </summary>
            <param name="b_dt">Bảng cần chuyển</param>
            <param name="a_cot">Mảng tên cột cần chuyển</param>
        </member>
        <member name="M:Cthuvien.bang.P_NG_CSO(System.Data.DataTable@,System.String)">
            <summary>
            Chuyển giá trị cột từ ngày dạng date sang ngày dạng chữ số
            </summary>
            <param name="b_dt">Bảng cần chuyển</param>
            <param name="b_cot">Tên cột cần chuyển</param>
        </member>
        <member name="M:Cthuvien.bang.P_NG_CSO(System.Data.DataTable@,System.String[])">
            <summary>
            Chuyển giá trị nhiều cột từ ngày dạng date sang ngày dạng chữ số
            </summary>
            <param name="b_dt">Bảng cần chuyển</param>
            <param name="a_cot">Mảng tên cột cần chuyển</param>
        </member>
        <member name="M:Cthuvien.bang.P_CNG_NG(System.Data.DataTable@,System.String)">
            <summary>
            Chuyển giá trị cột từ ngày dạng chữ dd/MM/yyyy sang ngày dạng date
            </summary>
            <param name="b_dt">Bảng cần chuyển</param>
            <param name="b_cot">Tên các cột cần chuyển. Các cột cách nhau dấu phẩy </param>
        </member>
        <member name="M:Cthuvien.bang.P_CNG_NG(System.Data.DataTable@,System.String[])">
            <summary>
            Chuyển giá trị cột từ ngày dạng chữ dd/MM/yyyy sang ngày dạng date
            </summary>
            <param name="b_dt">Bảng cần chuyển</param>
            <param name="a_cot">Mảng tên cột cần chuyển</param>
        </member>
        <member name="M:Cthuvien.bang.P_CNG_SO(System.Data.DataTable@,System.String)">
            <summary>
            Chuyển giá trị cột từ ngày dạng chữ dd/MM/yyyy sang ngày dạng số yyyymmdd
            </summary>
            <param name="b_dt">bảng cần chuyển</param>
            <param name="b_cot">Tên cột cần chuyển</param>
        </member>
        <member name="M:Cthuvien.bang.P_CNG_SO(System.Data.DataTable@,System.String[])">
            <summary>
            Chuyển giá trị nhiều cột từ ngày dạng chữ dd/MM/yyyy sang ngày dạng số yyyymmdd
            </summary>
            <param name="b_dt">bảng cần chuyển</param>
            <param name="a_cot">Mảng tên cột cần chuyển</param>
        </member>
        <member name="M:Cthuvien.bang.P_SO_CTH(System.Data.DataTable@,System.String)">
            <summary>
            Chuyển giá trị cột từ thang dạng số yyyyMM sang thang dạng chữ MM/yyyy
            </summary>
            <param name="b_dt">Bảng cần chuyển</param>
            <param name="b_cot">Tên cột cần chuyển</param>
        </member>
        <member name="M:Cthuvien.bang.P_CSO_CTH(System.Data.DataTable@,System.String)">
            <summary>
            Chuyển giá trị cột từ thang dạng chuỗi yyyyMM sang thang dạng chuỗi MM/yyyy
            </summary>
            <param name="b_dt">Bảng cần chuyển</param>
            <param name="b_cot">Tên cột cần chuyển</param>
        </member>
        <member name="M:Cthuvien.bang.P_CTH_SO(System.Data.DataTable@,System.String)">
            <summary>
            Chuyển giá trị cột từ thang dạng chữ MM/yyyy sang thang dạng số yyyymm
            </summary>
            <param name="b_dt">bảng cần chuyển</param>
            <param name="b_cot">Tên cột cần chuyển</param>
        </member>
        <member name="M:Cthuvien.bang.P_OBJ_CH(System.Data.DataTable@,System.String)">
            <summary>
            Chuyển giá trị cột thành chuỗi
            </summary>
            <param name="b_dt">Bảng cần chuyển</param>
            <param name="b_cot">Tên cột cần chuyển</param>
        </member>
        <member name="M:Cthuvien.bang.P_OBJ_CH(System.Data.DataTable@,System.String[])">
            <summary>
            Chuyển giá trị cột thành chuỗi
            </summary>
            <param name="b_dt">Bảng cần chuyển</param>
            <param name="a_cot">Mảng tên cột cần chuyển</param>
        </member>
        <member name="M:Cthuvien.bang.P_DICH(System.Data.DataTable@,System.String,System.String,System.String)">
            <summary>
            Dịch nội dung các cột
            </summary>
            <param name="b_dt">Bảng cần chuyển</param>
            <param name="b_cot">Tên các cột cần chuyển. Tên các cột cách nhau dấu phẩy</param>
            <param name="b_nuoc">Tiếng nước cần dịch sang</param>
            <param name="b_cu">Tiếng nước cũ. Giá trị Default là VIE</param>
        </member>
        <member name="M:Cthuvien.bang.Fdt_TAO_BANG(System.String[],System.String)">
            <summary>
            Tạo bảng từ mảng
            </summary>
            <param name="a_ten">Mảng tên các trường</param>
            <param name="b_kieu">Chuỗi kiểu dữ liệu các trường</param>
            <returns></returns>
        </member>
        <member name="M:Cthuvien.bang.Fdt_TAO_BANG(System.String,System.String)">
            <summary>
            Tạo bảng từ chuỗi
            </summary>
            <param name="b_ten">Chuỗi tên các trường cách nhau bởi dấu phẩy</param>
            <param name="b_kieu">Chuỗi kiểu dữ liệu các trường</param>
            <returns></returns>
        </member>
        <member name="M:Cthuvien.bang.Fdt_TAO_BANG(System.Object[])">
            <summary>
            Tạo bảng từ mảng tên và kiểu
            </summary>
            <param name="a_ctruc">Mảng 2 phần tử: phần tử 1 là mảng các tên, phần tử 2 là chuỗi kiểu dữ liệu</param>
            <returns></returns>
        </member>
        <member name="M:Cthuvien.bang.Fdt_TAO_BANG(System.String[],System.Object[])">
            <summary>
            Tạo bảng từ mảng tên và mảng giá trị
            </summary>
            <param name="a_ten">Mảng tên</param>
            <param name="a_gtri">Mảng giá trị</param>
            <returns></returns>
        </member>
        <member name="M:Cthuvien.bang.Fdt_TAO_BANG(System.Data.DataTable,System.String,System.Object)">
            <summary>
            Tạo bảng từ bảng khác điều kiện đơn
            </summary>
            <param name="b_dt">Bảng gốc</param>
            <param name="b_ten">Tên cột điều kiện</param>
            <param name="b_gtri">Giá trị điều kiện</param>
            <returns></returns>
        </member>
        <member name="M:Cthuvien.bang.Fdt_TAO_BANG(System.Data.DataTable,System.String[],System.Object[])">
            <summary>
            Tạo bảng từ bảng khác điều kiện mảng
            </summary>
            <param name="b_dt">Bảng gốc</param>
            <param name="a_ten">Mảng tên cột điều kiện</param>
            <param name="a_gtri">Mảng giá trị điều kiện</param>
            <returns></returns>
        </member>
        <member name="M:Cthuvien.bang.Fdt_TAO_BANG(System.Data.DataTable,System.String)">
            <summary>
            Tạo bảng từ bảng khác lấy vai cột
            </summary>
            <param name="b_dt">Bảng gốc</param>
            <param name="b_ten">Tên cột cần lấy</param>
            <returns></returns>
        </member>
        <member name="M:Cthuvien.bang.Fdt_TAO_BANG(System.Data.DataTable,System.String[])">
            <summary>
            Tạo bảng từ bảng khác lấy vài cột
            </summary>
            <param name="b_dt">Bảng gốc</param>
            <param name="a_ten">Mảng tên cột cần lấy</param>
            <returns></returns>
        </member>
        <member name="M:Cthuvien.bang.Fdt_TAO_THEM(System.Data.DataTable,System.Int32,System.Int32)">
            <summary>
            Tạo bảng từ bang khac va them cac hang
            </summary>
            <param name="b_dt">Bang goc</param>
            <param name="b_dau">Hang bat dau</param>
            <param name="b_hang">So hang se them</param>
            <returns></returns>
        </member>
        <member name="M:Cthuvien.bang.Fdt_TAO_THEM(System.String[],System.Object[])">
            <summary>
            Tạo bảng và thêm các hàng từ mảng của mảng các giá trị
            </summary>
            <param name="a_ten">Mảng tên các cột</param>
            <param name="aa_gtri">Mảng các giá trị cần thêm </param>
            <returns></returns>
        </member>
        <member name="M:Cthuvien.bang.Fdt_TAO_THEM(System.Object[])">
            <summary>
            Tạo bảng từ mảng chứa 2 mảng tên cột và các giá trị
            </summary>
            <param name="a_dt">Mảng tên các cột và các giá trị</param>
            <returns></returns>
        </member>
        <member name="M:Cthuvien.bang.Fb_TRANG(System.Data.DataTable)">
            <summary>
            Kiểm tra bảng null hoặc trắng
            </summary>
            <param name="b_dt">Bảng cần kiểm tra</param>
            <returns></returns>
        </member>
        <member name="M:Cthuvien.bang.P_DOI_TENCOL(System.Data.DataTable@,System.String,System.String)">
            <summary>
            Đổi tên 1 cột
            </summary>
            <param name="b_dt">Bảng cần đổi</param>
            <param name="b_ten_c">Tên các cột cũ cách nhau dấu phẩy</param>
            <param name="b_ten_m">Tên các cột mới cách nhau dấu phẩy</param>
        </member>
        <member name="M:Cthuvien.bang.P_DOI_TENCOL(System.Data.DataTable@,System.String[],System.String[])">
            <summary>
            Đổi tên nhiều cột
            </summary>
            <param name="b_dt">Bảng cần đổi</param>
            <param name="a_ten_c">Mảng các tên cột cũ</param>
            <param name="a_ten_m">Mảng các tên cột mới</param>
        </member>
        <member name="M:Cthuvien.bang.P_XULY_NH(System.Data.DataTable@,System.Data.DataTable)">
            <summary>
            Xử lý đối chiếu bảng: nếu bảng gốc thiếu các trường so với bảng đối chiếu thì tạo thêm cho bảng gốc các trường đó như bảng đối chiếu
            </summary>
            <param name="b_dt_nh">Bảng gốc</param>
            <param name="b_dt_dc">Bảng đối chiếu</param>
        </member>
        <member name="M:Cthuvien.bang.P_THEM_TEXT(System.Data.DataTable@,System.String,System.String,System.String)">
            <summary>
            Thêm giá trị Text vào giá trị 1 cột
            </summary>
            <param name="b_dt">Bảng cần thêm</param>
            <param name="b_truong">Tên cột cần thêm</param>
            <param name="b_gtri">Giá trị cần thêm</param>
            <param name="b_kieu">Kieu: T-them truoc,S -Them phia sau. Default T</param>
        </member>
        <member name="M:Cthuvien.bang.P_THEM_TEXT(System.Data.DataTable@,System.String[],System.String[],System.String)">
            <summary>
            Thêm các giá trị Text vào trước các giá trị cột
            </summary>
            <param name="b_dt">Bảng cần thêm</param>
            <param name="a_truong">Mảng tên cột cần thêm</param>
            <param name="a_gtri">Mảng giá trị cần thêm</param>
            <param name="b_kieu">Kieu: T-them truoc,S -Them phia sau. Default T</param>
        </member>
        <member name="M:Cthuvien.bang.P_NGAN_TEXT(System.Data.DataTable@,System.String,System.Int32)">
            <summary>
            Ngắn Text
            </summary>
            <param name="b_dt">Bảng cần ngắn</param>
            <param name="b_cot">Tên cột cần ngắn, cách nhau dấu phẩy</param>
            <param name="b_rong">Độ rộng sẽ đặt</param>
        </member>
        <member name="M:Cthuvien.bang.Fas_TEN_COT(System.Data.DataTable)">
            <summary>
            Trả mảng tên cột của bảng
            </summary>
            <param name="b_dt">Bảng cần trả</param>
            <returns></returns>
        </member>
        <member name="M:Cthuvien.bang.Fs_HANG_GOP(System.Data.DataTable,System.Int32,System.String)">
            <summary>
            Trả chuỗi tên và giá trị tất cả các cột tại hàng b_hang của bảng.
            Tên và giá trị cách nhau bởi dấu ';'.
            Các tên cách nhau bởi ','.
            Các giá trị cách nhau bởi dấu '|'
            </summary>
            <param name="b_dt">Bảng cần trả</param>
            <param name="b_hang">Vị trí hàng cần trả</param>
            <returns></returns>
        </member>
        <member name="M:Cthuvien.bang.Fs_HANG_GOP(System.Data.DataTable,System.Int32)">
            <summary>
            Trả chuỗi tên và giá trị tất cả các cột tại hàng b_hang của bảng.
            Tên và giá trị cách nhau bởi dấu ';'.
            Các tên cách nhau bởi ','.
            Các giá trị cách nhau bởi dấu '|'
            </summary>
            <param name="b_dt">Bảng cần trả</param>
            <param name="b_hang">Vị trí hàng cần trả</param>
            <returns></returns>
        </member>
        <member name="M:Cthuvien.bang.Fs_HANG_GOP(System.Data.DataTable,System.String)">
            <summary>
            Trả 2 chuỗi giá trị 2 cot tất cả các cột tại hàng của bảng.
            Chuoi 1 giá trị cách nhau bởi dấu ','.
            Chuoi 2 các giá trị cách nhau bởi dấu '|'
            </summary>
            <param name="b_dt">Bảng cần trả</param>
            <returns></returns>
        </member>
        <member name="M:Cthuvien.bang.Fs_HANG_CH(System.Data.DataTable,System.Int32,System.String[],System.String)">
            <summary>
            Trả chuỗi giá trị một số cột tại hàng b_hang của bảng cách nhau bởi dấu '|'
            </summary>
            <param name="b_dt">Bảng cần trả</param>
            <param name="b_hang">Vị trí hàng cần trả</param>
            <param name="a_cot">Mảng các tên cột cần trả</param>
            <returns></returns>
        </member>
        <member name="M:Cthuvien.bang.Fs_HANG_CH(System.Data.DataTable,System.Int32,System.String)">
            <summary>
            Trả chuỗi giá trị tất cả các cột tại hàng b_hang của bảng cách nhau bởi dấu '|'
            </summary>
            <param name="b_dt">Bảng cần trả</param>
            <param name="b_hang">Vị trí hàng cần trả</param>
            <returns></returns>
        </member>
        <member name="M:Cthuvien.bang.Fs_BANG_CH(System.Data.DataTable,System.String[],System.String)">
            <summary>
            Chuyển vài cột của bảng thành 1 chuỗi có các hàng cách nhau bởi dấu ';'.
            Các giá trị trong 1 hàng cách nhau bởi dấu '|'
            </summary>
            <param name="b_dt">Bảng cần chuyển</param>
            <param name="a_cot">Mảng tên các cột cần chuyển</param>
            <returns></returns>
        </member>
        <member name="M:Cthuvien.bang.Fs_BANG_CH(System.Data.DataTable,System.String,System.String)">
            <summary>
            Chuyển vài cột của bảng thành 1 chuỗi có các hàng cách nhau bởi dấu ';'.
            Các giá trị trong 1 hàng cách nhau bởi dấu '|'
            </summary>
            <param name="b_dt">Bảng cần chuyển</param>
            <param name="b_cot">Chuỗi tên các cột cần chuyển cách nhau bởi dấu ','</param>
            <returns></returns>
        </member>
        <member name="M:Cthuvien.bang.Fs_BANG_CH(System.Data.DataTable)">
            <summary>
            Chuyển toàn bộ bảng thành 1 chuỗi có các hàng cách nhau bởi dấu ';'.
            Các giá trị trong 1 hàng cách nhau bởi dấu '|'
            </summary>
            <param name="b_dt"></param>
            <returns></returns>
        </member>
        <member name="M:Cthuvien.bang.Fs_BANG_GOP(System.Data.DataTable)">
            <summary>
            Trả chuỗi tên và giá trị của bảng.
            Tên cột và giá trị cách nhau bởi dấu '#'. Các hàng cách nhau bởi dấu ';'.
            Các tên cột cách nhau bởi dấu ','.
            Các giá trị trong 1 hàng cách nhau bởi dấu '|'.
            </summary>
            <param name="b_dt"></param>
            <returns></returns>
        </member>
        <member name="M:Cthuvien.bang.P_BANG_GHEP(System.Data.DataTable@,System.String,System.String)">
            <summary>
            Ghep truong bảng.
            </summary>
            <param name="b_dt">Bảng cần ghep</param>
            <param name="b_cot">Tên cac cột ghep, cách nhau bởi dấu ','</param>
            <param name="b_cach">Dau cach ghep</param>
        </member>
        <member name="M:Cthuvien.bang.Fs_COT_CH(System.Data.DataTable,System.String[],System.String,System.String)">
            <summary>
            Trả chuỗi giá trị một số cột của tất cả hàng.
            Các cột cách nhau bởi dấu ';'.
            Các giá trị trong 1 cột cách nhau bởi dấu '|'.
            </summary>
            <param name="b_dt">Bảng cần trả</param>
            <param name="a_cot">Tên cột cần trả. Nếu nhiều cột các cột cách nhau dấu ','.</param>
            <returns></returns>
        </member>
        <member name="M:Cthuvien.bang.Fs_COT_CH(System.Data.DataTable,System.String,System.String,System.String)">
            <summary>
            Trả chuỗi giá trị một số cột của tất cả hàng.
            Các giá trị trong cột trong hàng cách nhau bởi dấu '|'.
            Các giá trị hàng cách nhau bởi dấu ';'.
            </summary>
            <param name="b_dt">Bảng cần trả</param>
            <param name="b_cot">Tên cột cần trả. Nếu nhiều cột các cột cách nhau dấu ','.</param>
            <returns></returns>
        </member>
        <member name="M:Cthuvien.bang.Fs_COT_CH(System.Data.DataTable)">
            <summary>
            Trả chuỗi giá trị tất cả các cột của tất cả hàng.
            Các cột cách nhau bởi dấu ';'.
            Các giá trị trong 1 cột cách nhau bởi dấu '|'.
            </summary>
            <param name="b_dt">Bảng cần trả</param>
            <returns></returns>
        </member>
        <!-- Badly formed XML comment ignored for member "M:Cthuvien.bang.Fb_CHUYEN_HANG(System.Data.DataTable@,System.Int32,System.Int32)" -->
        <member name="M:Cthuvien.bang.P_BANG_LIST(System.Data.DataTable,System.String,System.String@,System.String@)">
            <summary>\
            Chuyen bảng cho List
            </summary>
            <param name="b_dt">Bảng đặt</param>
            <param name="b_cot">Cot truong lay so lieu theo tra,lke</param>
            <param name="b_lke">lke</param>
            <param name="b_tra">tra</param>
        </member>
        <member name="M:Cthuvien.bang.Fs_LKE_DAU(System.Data.DataTable,System.String,System.Int32)">
            <summary>\
            Gia tri dau cho List 
            </summary>
            <param name="b_dt">Bảng đặt</param>
            <param name="b_cot">Cot truong lay so lieu theo tra,lke</param>
        </member>
        <member name="M:Cthuvien.bang.Fs_LKE_TIM(System.Data.DataTable,System.Object,System.String)">
            <summary>\
            Gia tri dau cho List 
            </summary>
            <param name="b_dt">Bảng đặt</param>
            <param name="b_cot">Cot truong lay so lieu theo tra,lke</param>
        </member>
        <member name="M:Cthuvien.chuyen.CNG_TRANG">
            <summary>
            Trả chuỗi dạng ngày trắng
            </summary>
            <returns></returns>
        </member>
        <member name="M:Cthuvien.chuyen.CNG_CSO(System.String)">
            <summary>
            Chuyển chuỗi dạng ngày sang chuỗi dạng số yyyyMMdd
            </summary>
            <param name="b_ngay">Chuỗi ngày dạng dd/mm/yyyy</param>
            <returns></returns>
        </member>
        <member name="M:Cthuvien.chuyen.CNG_SO(System.String)">
            <summary>
            Chuyển chuỗi dạng ngày sang số dạng yyyyMMdd
            </summary>
            <param name="b_ngay">Chuỗi ngày dạng dd/mm/yyyy</param>
            <returns></returns>
        </member>
        <member name="M:Cthuvien.chuyen.CNG_NG(System.String,System.Int32,System.Int32,System.Int32)">
            <summary>
            Chuyển chuỗi dạng ngày sang Datetime
            </summary>
            <param name="b_ngay">Chuỗi ngày dạng dd/mm/yyyy</param>
            <returns></returns>
        </member>
        <member name="M:Cthuvien.chuyen.CNG_NGC(System.String)">
            <summary>
            Chuyển chuỗi dạng ngày sang chuỗi dạng chữ ngày
            </summary>
            <param name="b_ngay">Chuỗi ngày dạng dd/mm/yyyy</param>
            <returns></returns>
        </member>
        <member name="M:Cthuvien.chuyen.NG_NGC(System.DateTime)">
            <summary>
            Chuyển Datetime sang chuỗi dạng ngày
            </summary>
            <param name="b_ngay">Ngày datetime</param>
            <returns></returns>
        </member>
        <member name="M:Cthuvien.chuyen.NG_CNG(System.DateTime)">
            <summary>
            Chuyển Datetime sang chuỗi dạng ngày
            </summary>
            <param name="b_ngay">Ngày datetime</param>
            <returns></returns>
        </member>
        <member name="M:Cthuvien.chuyen.CSO_CNG(System.String)">
            <summary>
            Chuyển chuỗi số dạng yyyyMMdd sang chuỗi dạng ngày
            </summary>
            <param name="b_so">Chuỗi số dạng yyyyMMdd</param>
            <returns></returns>
        </member>
        <member name="M:Cthuvien.chuyen.NG_SO(System.DateTime)">
            <summary>
            Chuyển Datetime sang Int dạng yyyyMMdd
            </summary>
            <param name="d_ngay">Ngày datetime</param>
            <returns></returns>
        </member>
        <member name="M:Cthuvien.chuyen.SO_CNG(System.Int32)">
            <summary>
            Chuyển số dạng yyyyMMdd sang chuỗi dạng ngày dd/MM/yyyy
            </summary>
            <param name="b_so">Số dạng yyyyMMdd</param>
            <returns></returns>
        </member>
        <member name="M:Cthuvien.chuyen.SO_NG(System.Int32)">
            <summary>
            Chuyển số dạng yyyyMMdd sang datetime
            </summary>
            <param name="b_so">Số dạng yyyyMMdd</param>
            <returns></returns>
        </member>
        <member name="M:Cthuvien.chuyen.CTH_TRANG">
            <summary>
            Trả chuỗi dạng tháng trắng
            </summary>
            <returns></returns>
        </member>
        <member name="M:Cthuvien.chuyen.CTH_CSO(System.String)">
            <summary>
            Chuyển chuỗi dạng tháng sang chuỗi dạng số yyyyMM
            </summary>
            <param name="b_thang">Chuỗi dạng tháng MM/yyyy</param>
            <returns></returns>
        </member>
        <member name="M:Cthuvien.chuyen.CTH_SO(System.String)">
            <summary>
            Chuyển chuỗi dạng tháng sang số dạng yyyyMM
            </summary>
            <param name="b_thang">Chuỗi dạng tháng MM/yyyy</param>
            <returns></returns>
        </member>
        <member name="M:Cthuvien.chuyen.NG_CTH(System.DateTime)">
            <summary>
            Chuyển Datetime sang chuỗi dạng tháng
            </summary>
            <param name="b_ngay">Ngày datetime</param>
            <returns></returns>
        </member>
        <member name="M:Cthuvien.chuyen.CSO_CTH(System.String)">
            <summary>
            Chuyển chuỗi số dạng yyyyMM sang chuỗi dạng tháng
            </summary>
            <param name="b_so">Chuỗi số dạng yyyyMM</param>
            <returns></returns>
        </member>
        <member name="M:Cthuvien.chuyen.TH_SO(System.DateTime)">
            <summary>
            Chuyển Datetime sang Int dạng yyyyMM
            </summary>
            <param name="b_ngay">Ngày datetime</param>
            <returns></returns>
        </member>
        <member name="M:Cthuvien.chuyen.SO_CTH(System.Int32)">
            <summary>
            Chuyển số dạng yyyyMM sang chuỗi dạng tháng
            </summary>
            <param name="b_so">Số dạng yyyyMM</param>
            <returns></returns>
        </member>
        <member name="M:Cthuvien.chuyen.SO_CSO(System.Double,System.Int32)">
            <summary>
            Chuyển số sang chuỗi dạng Format số
            </summary>
            <param name="b_so">Số double</param>
            <param name="b_tp">Số chữ số thập phân sau dấu phẩy</param>
            <returns></returns>
        </member>
        <member name="M:Cthuvien.chuyen.CSO_CH(System.String,System.String)">
            <summary>
            Chuyển chuỗi số dạng Format sang chuỗi dạng số
            </summary>
            <param name="b_chu">Chuỗi số dạng Format</param>
            <param name="b_de">Gia tri tra ra neu chu ko co so</param>
            <returns></returns>
        </member>
        <member name="M:Cthuvien.chuyen.CH_CSO(System.String,System.Int32,System.String)">
            <summary>
            Chuyển chuỗi số sang chuỗi số dạng Format
            </summary>
            <param name="b_chu">Chuối dạng số</param>
            <param name="b_so_tp">Số chữ số thập phân sau dấu phẩy</param>
            <param name="b_de">Gia tri tra ra neu chu ko co so</param>
            <returns></returns>
        </member>
        <member name="M:Cthuvien.chuyen.CSO_SO(System.String)">
            <summary>
            Chuyển chuỗi số dạng Format sang số
            </summary>
            <param name="b_chu">Chuỗi số dạng Format</param>
            <returns></returns>
        </member>
        <member name="M:Cthuvien.chuyen.OBJ_I(System.Object)">
            <summary>
            Chuyển Object sang Int
            </summary>
            <param name="b_obj">Object</param>
            <returns></returns>
        </member>
        <member name="M:Cthuvien.chuyen.OBJ_N(System.Object)">
            <summary>
            Chuyển Object sang Double
            </summary>
            <param name="b_obj">Object</param>
            <returns></returns>
        </member>
        <member name="M:Cthuvien.chuyen.OBJ_S(System.Object)">
            <summary>
            Chuyển Object sang String
            </summary>
            <param name="b_obj">Object</param>
            <returns></returns>
        </member>
        <member name="M:Cthuvien.chuyen.OBJ_S(System.Object,System.String)">
            <summary>
            Chuyển Object sang String
            </summary>
            <param name="b_obj">Object</param>
            <param name="b_out">Chuỗi được trả nếu object null</param>
            <returns></returns>
        </member>
        <member name="M:Cthuvien.chuyen.OBJ_D(System.Object)">
            <summary>
            Chuyển Object sang Datetime
            </summary>
            <param name="b_obj">Object</param>
            <returns></returns>
        </member>
        <member name="M:Cthuvien.chuyen.OBJ_B(System.Object)">
            <summary>
            Chuyển Object sang Boolean
            </summary>
            <param name="b_obj">Object</param>
            <returns></returns>
        </member>
        <member name="M:Cthuvien.chuyen.OBJ_C(System.Object)">
            <summary>
            Chuyển object thành chuỗi tương ứng để nhập vào CSDL
            </summary>
            <param name="b_obj">Object</param>
            <returns></returns>
        </member>
        <member name="M:Cthuvien.chuyen.OBJ_C(System.Object,System.String,System.String)">
            <summary>
            Chuyển object thành chuỗi CSDL, nếu chuỗi kết quả bằng chuỗi điều kiện thì trả chuỗi mới
            </summary>
            <param name="b_obj">Object</param>
            <param name="b_gtri">Chuỗi điều kiện</param>
            <param name="b_moi">Chuỗi mới được trả nếu chuỗi kết quả bằng chuỗi điều kiện</param>
            <returns></returns>
        </member>
        <member name="M:Cthuvien.chuyen.Fobj_OBJ(System.String[])">
            <summary>
            Chuyển mảng String thành mảng Object
            </summary>
            <param name="a_goc">Mảng các phần tử là string</param>
            <returns></returns>
        </member>
        <member name="M:Cthuvien.chuyen.Fobj_OBJ(System.Int32[])">
            <summary>
            Chuyển mảng Int thành mảng Object
            </summary>
            <param name="a_goc">Mảng các phần tử là Int</param>
            <returns></returns>
        </member>
        <member name="M:Cthuvien.chuyen.Fobj_OBJ(System.Double[])">
            <summary>
            Chuyển mảng Double thành mảng Object
            </summary>
            <param name="a_goc">Mảng các phần tử là double</param>
            <returns></returns>
        </member>
        <member name="M:Cthuvien.chuyen.Fobj_OBJ(System.DateTime[])">
            <summary>
            Chuyển mảng datetime thành mảng Object
            </summary>
            <param name="a_goc">Mảng các phần tử là Datetime</param>
            <returns></returns>
        </member>
        <member name="M:Cthuvien.chuyen.Fobj_OBJ(System.Boolean[])">
            <summary>
            Chuyển mảng boolean thành mảng Object
            </summary>
            <param name="a_goc">Mảng các phần tử là boolean</param>
            <returns></returns>
        </member>
        <member name="M:Cthuvien.chuyen.Fas_OBJ_STR(System.Object[])">
            <summary>
            Chuyển mảng Object thành mảng String
            </summary>
            <param name="a_goc">Mảng các phần tử là object</param>
            <returns></returns>
        </member>
        <member name="M:Cthuvien.grid.Fs_TEN_COT(Cthuvien.GridX)">
            <summary>
            Tra ten cot cac nhau dau phay
            </summary>
            <param name="b_gr">Grid</param>
            <returns></returns>
        </member>
        <member name="M:Cthuvien.grid.Fas_TEN_COT(Cthuvien.GridX)">
            <summary>
            Tra mang ten cot
            </summary>
            <param name="b_gr">Grid</param>
            <returns></returns>
        </member>
        <member name="T:Cthuvien.smsB.APISMS">
            <remarks/>
        </member>
        <member name="M:Cthuvien.smsB.APISMS.#ctor(System.String)">
            <remarks/>
        </member>
        <member name="M:Cthuvien.smsB.APISMS.PushMsg2Phone(System.String,System.String,System.String,System.String,System.String)">
            <remarks/>
        </member>
        <member name="M:Cthuvien.smsB.APISMS.PushMsg2PhoneAsync(System.String,System.String,System.String,System.String,System.String)">
            <remarks/>
        </member>
        <member name="M:Cthuvien.smsB.APISMS.PushMsg2PhoneAsync(System.String,System.String,System.String,System.String,System.String,System.Object)">
            <remarks/>
        </member>
        <member name="M:Cthuvien.smsB.APISMS.PushMsg2PhoneDLVR(System.String,System.String,System.String,System.String,System.Int32,System.Boolean,System.String,System.String)">
            <remarks/>
        </member>
        <member name="M:Cthuvien.smsB.APISMS.PushMsg2PhoneDLVRAsync(System.String,System.String,System.String,System.String,System.Int32,System.Boolean,System.String,System.String)">
            <remarks/>
        </member>
        <member name="M:Cthuvien.smsB.APISMS.PushMsg2PhoneDLVRAsync(System.String,System.String,System.String,System.String,System.Int32,System.Boolean,System.String,System.String,System.Object)">
            <remarks/>
        </member>
        <member name="M:Cthuvien.smsB.APISMS.PushMsgAdvDirect(System.String,System.String,System.String,System.String,System.String)">
            <remarks/>
        </member>
        <member name="M:Cthuvien.smsB.APISMS.PushMsgAdvDirectAsync(System.String,System.String,System.String,System.String,System.String)">
            <remarks/>
        </member>
        <member name="M:Cthuvien.smsB.APISMS.PushMsgAdvDirectAsync(System.String,System.String,System.String,System.String,System.String,System.Object)">
            <remarks/>
        </member>
        <member name="M:Cthuvien.smsB.APISMS.SendOTP(System.String,System.String,System.String,System.String,System.String)">
            <remarks/>
        </member>
        <member name="M:Cthuvien.smsB.APISMS.SendOTPAsync(System.String,System.String,System.String,System.String,System.String)">
            <remarks/>
        </member>
        <member name="M:Cthuvien.smsB.APISMS.SendOTPAsync(System.String,System.String,System.String,System.String,System.String,System.Object)">
            <remarks/>
        </member>
        <member name="M:Cthuvien.smsB.APISMS.PushMsg2ListPhone(System.String,System.String,System.String[],System.String,System.String)">
            <remarks/>
        </member>
        <member name="M:Cthuvien.smsB.APISMS.PushMsg2ListPhoneAsync(System.String,System.String,System.String[],System.String,System.String)">
            <remarks/>
        </member>
        <member name="M:Cthuvien.smsB.APISMS.PushMsg2ListPhoneAsync(System.String,System.String,System.String[],System.String,System.String,System.Object)">
            <remarks/>
        </member>
        <member name="M:Cthuvien.smsB.APISMS.PushMsg2ListPhoneDLVR(System.String,System.String,Cthuvien.smsB.ListPhone[],System.Int32,System.Boolean,System.String,System.String)">
            <remarks/>
        </member>
        <member name="M:Cthuvien.smsB.APISMS.PushMsg2ListPhoneDLVRAsync(System.String,System.String,Cthuvien.smsB.ListPhone[],System.Int32,System.Boolean,System.String,System.String)">
            <remarks/>
        </member>
        <member name="M:Cthuvien.smsB.APISMS.PushMsg2ListPhoneDLVRAsync(System.String,System.String,Cthuvien.smsB.ListPhone[],System.Int32,System.Boolean,System.String,System.String,System.Object)">
            <remarks/>
        </member>
        <member name="M:Cthuvien.smsB.APISMS.PushBulkSms(System.String,Cthuvien.smsB.DataSms[],System.String,System.String)">
            <remarks/>
        </member>
        <member name="M:Cthuvien.smsB.APISMS.PushBulkSmsAsync(System.String,Cthuvien.smsB.DataSms[],System.String,System.String)">
            <remarks/>
        </member>
        <member name="M:Cthuvien.smsB.APISMS.PushBulkSmsAsync(System.String,Cthuvien.smsB.DataSms[],System.String,System.String,System.Object)">
            <remarks/>
        </member>
        <member name="M:Cthuvien.smsB.APISMS.GetTelco(System.String,System.String,System.String)">
            <remarks/>
        </member>
        <member name="M:Cthuvien.smsB.APISMS.GetTelcoAsync(System.String,System.String,System.String)">
            <remarks/>
        </member>
        <member name="M:Cthuvien.smsB.APISMS.GetTelcoAsync(System.String,System.String,System.String,System.Object)">
            <remarks/>
        </member>
        <member name="M:Cthuvien.smsB.APISMS.CancelAsync(System.Object)">
            <remarks/>
        </member>
        <member name="E:Cthuvien.smsB.APISMS.PushMsg2PhoneCompleted">
            <remarks/>
        </member>
        <member name="E:Cthuvien.smsB.APISMS.PushMsg2PhoneDLVRCompleted">
            <remarks/>
        </member>
        <member name="E:Cthuvien.smsB.APISMS.PushMsgAdvDirectCompleted">
            <remarks/>
        </member>
        <member name="E:Cthuvien.smsB.APISMS.SendOTPCompleted">
            <remarks/>
        </member>
        <member name="E:Cthuvien.smsB.APISMS.PushMsg2ListPhoneCompleted">
            <remarks/>
        </member>
        <member name="E:Cthuvien.smsB.APISMS.PushMsg2ListPhoneDLVRCompleted">
            <remarks/>
        </member>
        <member name="E:Cthuvien.smsB.APISMS.PushBulkSmsCompleted">
            <remarks/>
        </member>
        <member name="E:Cthuvien.smsB.APISMS.GetTelcoCompleted">
            <remarks/>
        </member>
        <member name="T:Cthuvien.smsB.ListPhone">
            <remarks/>
        </member>
        <member name="P:Cthuvien.smsB.ListPhone.Phone">
            <remarks/>
        </member>
        <member name="P:Cthuvien.smsB.ListPhone.RequestId">
            <remarks/>
        </member>
        <member name="T:Cthuvien.smsB.DataSms">
            <remarks/>
        </member>
        <member name="P:Cthuvien.smsB.DataSms.Message">
            <remarks/>
        </member>
        <member name="P:Cthuvien.smsB.DataSms.Phone">
            <remarks/>
        </member>
        <member name="T:Cthuvien.smsB.PushMsg2PhoneCompletedEventHandler">
            <remarks/>
        </member>
        <member name="T:Cthuvien.smsB.PushMsg2PhoneCompletedEventArgs">
            <remarks/>
        </member>
        <member name="P:Cthuvien.smsB.PushMsg2PhoneCompletedEventArgs.Result">
            <remarks/>
        </member>
        <member name="T:Cthuvien.smsB.PushMsg2PhoneDLVRCompletedEventHandler">
            <remarks/>
        </member>
        <member name="T:Cthuvien.smsB.PushMsg2PhoneDLVRCompletedEventArgs">
            <remarks/>
        </member>
        <member name="P:Cthuvien.smsB.PushMsg2PhoneDLVRCompletedEventArgs.Result">
            <remarks/>
        </member>
        <member name="T:Cthuvien.smsB.PushMsgAdvDirectCompletedEventHandler">
            <remarks/>
        </member>
        <member name="T:Cthuvien.smsB.PushMsgAdvDirectCompletedEventArgs">
            <remarks/>
        </member>
        <member name="P:Cthuvien.smsB.PushMsgAdvDirectCompletedEventArgs.Result">
            <remarks/>
        </member>
        <member name="T:Cthuvien.smsB.SendOTPCompletedEventHandler">
            <remarks/>
        </member>
        <member name="T:Cthuvien.smsB.SendOTPCompletedEventArgs">
            <remarks/>
        </member>
        <member name="P:Cthuvien.smsB.SendOTPCompletedEventArgs.Result">
            <remarks/>
        </member>
        <member name="T:Cthuvien.smsB.PushMsg2ListPhoneCompletedEventHandler">
            <remarks/>
        </member>
        <member name="T:Cthuvien.smsB.PushMsg2ListPhoneCompletedEventArgs">
            <remarks/>
        </member>
        <member name="P:Cthuvien.smsB.PushMsg2ListPhoneCompletedEventArgs.Result">
            <remarks/>
        </member>
        <member name="T:Cthuvien.smsB.PushMsg2ListPhoneDLVRCompletedEventHandler">
            <remarks/>
        </member>
        <member name="T:Cthuvien.smsB.PushMsg2ListPhoneDLVRCompletedEventArgs">
            <remarks/>
        </member>
        <member name="P:Cthuvien.smsB.PushMsg2ListPhoneDLVRCompletedEventArgs.Result">
            <remarks/>
        </member>
        <member name="T:Cthuvien.smsB.PushBulkSmsCompletedEventHandler">
            <remarks/>
        </member>
        <member name="T:Cthuvien.smsB.PushBulkSmsCompletedEventArgs">
            <remarks/>
        </member>
        <member name="P:Cthuvien.smsB.PushBulkSmsCompletedEventArgs.Result">
            <remarks/>
        </member>
        <member name="T:Cthuvien.smsB.GetTelcoCompletedEventHandler">
            <remarks/>
        </member>
        <member name="T:Cthuvien.smsB.GetTelcoCompletedEventArgs">
            <remarks/>
        </member>
        <member name="P:Cthuvien.smsB.GetTelcoCompletedEventArgs.Result">
            <remarks/>
        </member>
        <member name="T:Cthuvien.sms.SMS">
            <remarks/>
        </member>
        <member name="M:Cthuvien.sms.SMS.SendSMSBrandName(System.String,System.String,System.String,System.String,System.String)">
            <remarks/>
        </member>
        <member name="M:Cthuvien.sms.SMS.SendSMSBrandNameAsync(System.String,System.String,System.String,System.String,System.String)">
            <remarks/>
        </member>
        <member name="M:Cthuvien.sms.SMS.SendSMSBrandNameAsync(System.String,System.String,System.String,System.String,System.String,System.Object)">
            <remarks/>
        </member>
        <member name="M:Cthuvien.sms.SMS.CancelAsync(System.Object)">
            <remarks/>
        </member>
        <member name="E:Cthuvien.sms.SMS.SendSMSBrandNameCompleted">
            <remarks/>
        </member>
        <member name="T:Cthuvien.sms.SendSMSBrandNameCompletedEventHandler">
            <remarks/>
        </member>
        <member name="T:Cthuvien.sms.SendSMSBrandNameCompletedEventArgs">
            <remarks/>
        </member>
        <member name="P:Cthuvien.sms.SendSMSBrandNameCompletedEventArgs.Result">
            <remarks/>
        </member>
        <member name="M:Cthuvien.dbora.Fcn_KNOI(System.String)">
            <summary>
            Tạo kết nối mới Oracle
            </summary>
            <param name="b_dns">Chuỗi kết nối</param>
            <returns></returns>
        </member>
        <member name="M:Cthuvien.dbora.F_KIEU(System.Char)">
            <summary>
            Chuyển đỗi kiểu dữ liệu từ .NET sang ORACLE
            </summary>
            <param name="b_kieu">Ký tự kiểu: D-date, T-timestamp, N-double, I-int, R-refcursor</param>
            <returns></returns>
        </member>
        <member name="M:Cthuvien.dbora.P_THEM_PAR(Oracle.DataAccess.Client.OracleCommand@,System.String,System.Char)">
            <summary>
            Thêm parameter vào lệnh lấy dữ liệu ra
            </summary>
            <param name="b_lenh">Chuỗi lệnh cần thêm</param>
            <param name="b_ten">Parameter cần thêm</param>
            <param name="b_kieu">Kiểu parameter</param>
        </member>
        <member name="M:Cthuvien.dbora.P_THEM_PAR(Oracle.DataAccess.Client.OracleCommand@,System.String,System.Char,System.Int32)">
            <summary>
            Thêm nhiều parameter giống nhau vào lệnh lấy dữ liệu ra
            </summary>
            <param name="b_lenh">Chuỗi lệnh</param>
            <param name="b_ten">Parameter cần thêm</param>
            <param name="b_kieu">Kiểu parameter</param>
            <param name="b_lap">Số lượng parameter cần thêm</param>
        </member>
        <member name="M:Cthuvien.dbora.P_THEM_PAR(Oracle.DataAccess.Client.OracleCommand@,System.String[],System.Char[])">
            <summary>
            Thêm parameter vào lệnh lấy dữ liệu ra cho nhiều tham số
            </summary>
            <param name="b_lenh">Chuỗi lệnh</param>
            <param name="a_ten">Mảng các parameter</param>
            <param name="a_kieu">Mảng các kiểu parameter</param>
        </member>
        <member name="M:Cthuvien.dbora.P_THEM_PAR(Oracle.DataAccess.Client.OracleCommand@,System.String[],System.String)">
            <summary>
            Thêm parameter vào lệnh lấy dữ liệu ra cho nhiều tham số
            </summary>
            <param name="b_lenh">Chuỗi lệnh</param>
            <param name="a_ten">Mảng các parameter</param>
            <param name="b_kieu">Chuỗi chứa các ký tự kiểu</param>
        </member>
        <member name="M:Cthuvien.dbora.P_THEM_PAR(Oracle.DataAccess.Client.OracleCommand@,System.String,System.Char,System.Char,System.Object)">
            <summary>
            Thêm parameter vào lệnh đưa dữ liệu vào cho 1 biến đơn
            </summary>
            <param name="b_lenh">Chuỗi lệnh</param>
            <param name="b_ten">Parameter</param>
            <param name="b_kieu">Kiểu parameter</param>
            <param name="b_huong"></param>
            <param name="b_gtri">Giá trị của parameter</param>
        </member>
        <member name="M:Cthuvien.dbora.P_THEM_PAR(Oracle.DataAccess.Client.OracleCommand@,System.String[],System.Char[],System.Char[],System.Object[])">
            <summary>
            Thêm parameter vào lệnh đưa dữ liệu vào cho nhiều biến đơn
            </summary>
            <param name="b_lenh">Chuỗi lệnh</param>
            <param name="a_ten">Mảng các parameter</param>
            <param name="a_kieu">Mảng các kiểu parameter</param>
            <param name="a_huong"></param>
            <param name="a_gtri">Mảng các giá trị của parameter</param>
        </member>
        <member name="M:Cthuvien.dbora.P_THEM_PAR(Oracle.DataAccess.Client.OracleCommand@,System.String,System.Char,System.Object[])">
            <summary>
            Thêm parameter vào lệnh đưa dữ liệu vào cho biến mảng
            </summary>
            <param name="b_lenh">Chuỗi lệnh</param>
            <param name="b_ten">Parameter</param>
            <param name="b_kieu">Kiểu parameter</param>
            <param name="a_gtri">Mảng giá trị truyền cho parameter</param>
        </member>
        <member name="M:Cthuvien.dbora.P_THEM_PAR(Oracle.DataAccess.Client.OracleCommand@,System.String,System.Char,System.Object[],System.Int32)">
            <summary>
            Thêm parameter vào lệnh đưa dữ liệu vào, ra cho biến mảng
            </summary>
            <param name="b_lenh">Chuỗi lệnh</param>
            <param name="b_ten">Parameter</param>
            <param name="b_kieu">Kiểu parameter</param>
            <param name="a_gtri">Mảng giá trị truyền cho parameter</param>
            <param name="b_rong"></param>
        </member>
        <member name="M:Cthuvien.dbora.Fds_TRA(Oracle.DataAccess.Client.OracleCommand)">
            <summary>
            Trả Dataset từ lệnh trả Cursor
            </summary>
            <param name="b_lenh">Lệnh chạy</param>
            <returns></returns>
        </member>
        <member name="M:Cthuvien.dbora.Fdt_TRA(Oracle.DataAccess.Client.OracleCommand)">
            <summary>
            Trả Datatable từ lệnh trả Cursor
            </summary>
            <param name="b_lenh">Lệnh chạy</param>
            <returns></returns>
        </member>
        <member name="M:Cthuvien.dbora.Fdt_TRA(Oracle.DataAccess.Client.OracleCommand,System.String)">
            <summary>
            Trả Datatable từ lệnh trả Cursor
            </summary>
            <param name="b_lenh">Lệnh chạy</param>
            <param name="b_ten">Tên bảng</param>
            <returns></returns>
        </member>
        <member name="M:Cthuvien.dbora.P_GOIHAM_KB(System.String,System.String)">
            <summary>
            Gọi hàm có khong biến
            </summary>
            <param name="b_ham">Tên hàm</param>
        </member>
        <member name="M:Cthuvien.dbora.P_GOIHAM(System.Object,System.String,System.String)">
            <summary>
            Gọi hàm có 1 biến
            </summary>
            <param name="b_obj">Biến truyền vào</param>
            <param name="b_ham">Tên hàm</param>
        </member>
        <member name="M:Cthuvien.dbora.P_GOIHAM(System.Object[],System.String,System.String)">
            <summary>
            Gọi hàm có nhiều biến
            </summary>
            <param name="a_obj">Mảng các biến</param>
            <param name="b_ham">Tên hàm</param>
        </member>
        <member name="M:Cthuvien.dbora.Fobj_GOIHAM(System.Object[],System.String,System.String)">
            <summary>
            Gọi hàm biến mảng in, out bất kỳ trả Object dạng Dataset,Datatable,Object
            </summary>
            <param name="a_obj">Mảng các biến</param>
            <param name="b_ham">Tên hàm</param>
            <returns></returns>
        </member>
        <member name="M:Cthuvien.dbora.Fobj_GOIHAM(System.Object,System.String,System.String)">
            <summary>
            Gọi hàm biến mảng in, out bất kỳ trả Object dạng Dataset,Datatable,Object
            </summary>
            <param name="b_obj">Biến vào</param>
            <param name="b_ham">Tên hàm</param>
            <returns></returns>
        </member>
        <member name="M:Cthuvien.dbora.Fobj_LKE(System.Char,System.String)">
            <summary>
            Gọi hàm trả kết quả là đối tượng, không truyền biến
            </summary>
            <param name="b_loai">Loại kết quả</param>
            <param name="b_ham">Hàm gọi</param>
            <returns></returns>
        </member>
        <member name="M:Cthuvien.dbora.Fobj_LKE(System.Object,System.Char,System.String)">
            <summary>
            Gọi hàm trả kết quả là đối tượng, truyền vào 1 biến
            </summary>
            <param name="b_obj">Biến truyền vào</param>
            <param name="b_loai">Kiểu kết quả trả về</param>
            <param name="b_ham">Hàm gọi</param>
            <returns></returns>
        </member>
        <member name="M:Cthuvien.dbora.Fobj_LKE(System.Object[],System.Char,System.String)">
            <summary>
            Gọi hàm trả kết quả là đối tượng, truyền vào biến mảng
            </summary>
            <param name="a_obj">Mảng các biến truyền vào</param>
            <param name="b_loai">Kiểu kết quả trả về</param>
            <param name="b_ham">Hàm gọi</param>
            <returns></returns>
        </member>
        <member name="M:Cthuvien.dbora.Faobj_LKE(System.String,System.String)">
            <summary>
            Gọi hàm trả kết quả là mảng đối tượng, không truyền biến
            </summary>
            <param name="b_loai">Chuỗi các kiểu kết quả trả về</param>
            <param name="b_ham">Hàm gọi</param>
            <returns></returns>
        </member>
        <member name="M:Cthuvien.dbora.Faobj_LKE(System.Object,System.String,System.String)">
            <summary>
            Gọi hàm trả kết quả là mảng đối tượng, truyền vào biến đơn
            </summary>
            <param name="b_obj">Biến truyền vào</param>
            <param name="b_loai">Kiểu kết quả trả về</param>
            <param name="b_ham">Hàm gọi</param>
            <returns></returns>
        </member>
        <member name="M:Cthuvien.dbora.Faobj_LKE(System.Object[],System.String,System.String)">
            <summary>
            Gọi hàm trả kết quả là mảng đối tượng, truyền vào biến mảng
            </summary>
            <param name="a_obj">Mảng các biến</param>
            <param name="b_loai">Chuỗi các kiểu kết quả trả về</param>
            <param name="b_ham"></param>
            <returns></returns>
        </member>
        <member name="M:Cthuvien.dbora.Fdt_LKE(System.String)">
            <summary>
            Gọi hàm trả kết quả là bảng, không truyền biến
            </summary>
            <param name="b_ham">Hàm gọi</param>
            <returns></returns>
        </member>
        <member name="M:Cthuvien.dbora.Fdt_LKE_S(System.Object,System.String)">
            <summary>
            Gọi hàm trả kết quả là bảng, truyền vào 1 biến đứng trước
            </summary>
            <param name="b_obj">Biến truyền vào</param>
            <param name="b_ham">Hàm gọi</param>
            <returns></returns>
        </member>
        <member name="M:Cthuvien.dbora.Fdt_LKE_S(System.Object[],System.String)">
            <summary>
            Gọi hàm trả kết quả là 1 bảng, truyền vào mảng biến đứng trước
            </summary>
            <param name="a_obj">Mảng biến truyền vào</param>
            <param name="b_ham">Hàm gọi</param>
            <returns></returns>
        </member>
        <member name="M:Cthuvien.dbora.Fdt_LKE_T(System.Object,System.String)">
            <summary>
            Gọi hàm trả kết quả bảng, truyền vào 1 biến đứng sau
            </summary>
            <param name="b_obj"></param>
            <param name="b_ham"></param>
            <returns></returns>
        </member>
        <member name="M:Cthuvien.dbora.Fdt_LKE_T(System.Object[],System.String)">
            <summary>
            Gọi hàm trả kết quả bảng, truyền vào mảng biến đứng sau
            </summary>
            <param name="a_obj">Mảng biến</param>
            <param name="b_ham">Hàm gọi</param>
            <returns></returns>
        </member>
        <member name="M:Cthuvien.dbora.Fds_LKE(System.Int32,System.String)">
            <summary>
            Gọi hàm trả kết quả nhiều bảng, không truyền biến
            </summary>
            <param name="b_so_cs">Số bảng kết quả</param>
            <param name="b_ham">Hàm gọi</param>
            <returns></returns>
        </member>
        <member name="M:Cthuvien.dbora.Fds_LKE(System.Object,System.Int32,System.String)">
            <summary>
            Gọi hàm trả kết quả nhiều bảng, truyền 1 biến
            </summary>
            <param name="b_obj">Biến truyền vào</param>
            <param name="b_so_cs">Số bảng kết quả</param>
            <param name="b_ham">Hàm gọi</param>
            <returns></returns>
        </member>
        <member name="M:Cthuvien.dbora.Fds_LKE(System.Object[],System.Int32,System.String)">
            <summary>
            Gọi hàm trả kết quả nhiều bảng, truyền nhiều biến
            </summary>
            <param name="a_obj">Mảng biến truyền vào</param>
            <param name="b_so_cs">Số bảng kết quả</param>
            <param name="b_ham">Hàm gọi</param>
            <returns></returns>    
        </member>
        <member name="M:Cthuvien.dbora.Fds_LKE_T(System.Object,System.Int32,System.String)">
            <summary>
            Gọi hàm trả kết quả 1 dataset, truyền 1 biến
            </summary>
            <param name="b_obj">Biến truyền vào</param>
            <param name="b_so_cs">Số bảng kết quả trong Dataset</param>
            <param name="b_ham">Hàm gọi</param>
            <returns></returns>
        </member>
        <member name="M:Cthuvien.dbora.Fds_LKE_T(System.Object[],System.Int32,System.String)">
            <summary>
            Gọi hàm trả kết quả 1 dataset, truyền nhiều biến
            </summary>
            <param name="a_obj">Mảng biến truyền vào</param>
            <param name="b_so_cs">Số bảng kết quả trong Dataset</param>
            <param name="b_ham">Hàm gọi</param>
            <returns></returns>
        </member>
        <member name="M:Cthuvien.dbora.FTobj_LKE(System.Char,System.String)">
            <summary>
            Gọi hàm trả kết quả đối tượng, không truyền biến
            </summary>
            <param name="b_loai">Kiểu kết quả</param>
            <param name="b_ham">Hàm gọi</param>
            <returns></returns>
        </member>
        <member name="M:Cthuvien.dbora.FTobj_LKE(System.Object,System.Char,System.String)">
            <summary>
            Gọi hàm trả kết quả là đối tượng, truyền vào 1 biến
            </summary>
            <param name="b_obj">Biến vào</param>
            <param name="b_loai">Kiểu kết quả</param>
            <param name="b_ham">Hàm gọi</param>
            <returns></returns>
        </member>
        <member name="M:Cthuvien.dbora.FTobj_LKE(System.Object[],System.Char,System.String)">
            <summary>
            Gọi hàm trả kết quả đối tượng, truyền nhiều biến
            </summary>
            <param name="a_obj">Mảng các biến</param>
            <param name="b_loai">Kiểu kết quả</param>
            <param name="b_ham">Hàm gọi</param>
            <returns></returns>
        </member>
        <member name="M:Cthuvien.dbora.FTaobj_LKE(System.String,System.String)">
            <summary>
            Gọi hàm trả kết quả mảng, không truyền biến
            </summary>
            <param name="b_loai">Kiểu kết quả</param>
            <param name="b_ham">Hàm gọi</param>
            <returns></returns>
        </member>
        <member name="M:Cthuvien.dbora.FTaobj_LKE(System.Object,System.String,System.String)">
            <summary>
            Gọi hàm trả kết quả mảng, truyền 1 biến
            </summary>
            <param name="b_obj">Biến truyền vào</param>
            <param name="b_loai">Chuỗi kiểu kết quả</param>
            <param name="b_ham">Hàm gọi</param>
            <returns></returns>
        </member>
        <member name="M:Cthuvien.dbora.FTaobj_LKE(System.Object[],System.String,System.String)">
            <summary>
            Gọi hàm trả kết quả mảng, truyền nhiều biến
            </summary>
            <param name="a_obj">Mảng các biến</param>
            <param name="b_loai">Chuỗi kiểu kết quả</param>
            <param name="b_ham">Hàm gọi</param>
            <returns></returns>
        </member>
        <member name="M:Cthuvien.dbora.FTdt_LKE(System.String)">
            <summary>
            Gọi hàm trả kết quả bảng, không truyền biến
            </summary>
            <param name="b_ham"></param>
            <returns></returns>
        </member>
        <member name="M:Cthuvien.dbora.FTdt_LKE_S(System.Object,System.String)">
            <summary>
            Gọi hàm trả kết quả bảng, truyền 1 biến
            </summary>
            <param name="b_obj">Biến truyền vào</param>
            <param name="b_ham">Hàm gọi</param>
            <returns></returns>
        </member>
        <member name="M:Cthuvien.dbora.FTdt_LKE_S(System.Object[],System.String)">
            <summary>
            Gọi hàm trả kết quả bảng, truyền nhiều biến
            </summary>
            <param name="a_obj">Mảng các biến</param>
            <param name="b_ham">Hàm gọi</param>
            <returns></returns>
        </member>
        <member name="M:Cthuvien.dbora.FTdt_LKE_T(System.Object,System.String)">
            <summary>
            Gọi hàm trả kết quả bảng, truyền 1 biến
            </summary>
            <param name="b_obj">Biến truyền vào</param>
            <param name="b_ham">Hàm gọi</param>
            <returns></returns>
        </member>
        <member name="M:Cthuvien.dbora.FTdt_LKE_T(System.Object[],System.String)">
            <summary>
            Gọi hàm trả kết quả bảng, truyền nhiều biến
            </summary>
            <param name="a_obj">Mảng các biến</param>
            <param name="b_ham">Hàm gọi</param>
            <returns></returns>
        </member>
        <member name="M:Cthuvien.dbora.FTds_LKE(System.Int32,System.String)">
            <summary>
            Gọi hàm trả kết quả DataSet, không truyền biến
            </summary>
            <param name="b_so_cs">Số DataTable trong DataSet</param>
            <param name="b_ham">Hàm gọi</param>
            <returns></returns>
        </member>
        <member name="M:Cthuvien.dbora.FTds_LKE(System.Object,System.Int32,System.String)">
            <summary>
            Gọi hàm trả kết quả DataSet, truyền 1 biến đứng trước
            </summary>
            <param name="b_obj">Biến truyền vào</param>
            <param name="b_so_cs">Số DataTable trong DataSet</param>
            <param name="b_ham">Hàm gọi</param>
            <returns></returns>
        </member>
        <member name="M:Cthuvien.dbora.FTds_LKE(System.Object[],System.Int32,System.String)">
            <summary>
            Gọi hàm trả kết quả DataSet, truyền nhiều biến đứng trước
            </summary>
            <param name="a_obj">Mảng các biến truyền vào</param>
            <param name="b_so_cs">Số DataTable trong DataSet</param>
            <param name="b_ham">Hàm gọi</param>
            <returns></returns>
        </member>
        <member name="M:Cthuvien.dbora.FTds_LKE_T(System.Object,System.Int32,System.String)">
            <summary>
            Gọi hàm trả kết quả DataSet, truyền 1 biến đứng sau
            </summary>
            <param name="b_obj">Biến truyền vào</param>
            <param name="b_so_cs">Số DataTable trong DataSet</param>
            <param name="b_ham">Hàm gọi</param>
            <returns></returns>
        </member>
        <member name="M:Cthuvien.dbora.FTds_LKE_T(System.Object[],System.Int32,System.String)">
            <summary>
            Gọi hàm trả kết quả DataSet, truyền nhiều biến đứng sau
            </summary>
            <param name="a_obj">Mảng các biến truyền vào</param>
            <param name="b_so_cs">Số DataTable trong DataSet</param>
            <param name="b_ham">Hàm gọi</param>
            <returns></returns>
        </member>
        <member name="M:Cthuvien.dbora.PT_GOIHAM(System.Object[],System.String)">
            <summary>
            Gọi hàm có nhiều biến
            </summary>
            <param name="a_obj">Mảng các biến</param>
            <param name="b_ham">Tên hàm</param>
        </member>
        <member name="T:Cthuvien.dulieu">
            <summary>Xử lý Dataset</summary>
        </member>
        <member name="M:Cthuvien.dulieu.Fb_TIM(System.Data.DataSet,System.String)">
            <summary>Kiểm tra có bảng trong Dataset</summary>
        </member>
        <member name="M:Cthuvien.dulieu.Fb_TIM_GD(System.Data.DataSet,System.String)">
            <summary>Kiểm tra có bảng gần đúng trong Dataset</summary>
        </member>
        <member name="M:Cthuvien.dulieu.Fi_TIM(System.Data.DataSet,System.String)">
            <summary>Tìm thứ tự bảng trong Dataset</summary>
        </member>
        <member name="M:Cthuvien.dulieu.Fdt_TRA(System.Data.DataSet,System.String)">
            <summary>Trả bảng trong Dataset</summary>
        </member>
        <member name="M:Cthuvien.dulieu.P_XOA(System.Data.DataSet@,System.String)">
            <summary>Xóa bảng trong Dataset</summary>
        </member>
        <member name="M:Cthuvien.dulieu.P_XOA_GD(System.Data.DataSet@,System.String)">
            <summary>Xóa bảng tên gần đúng trong Dataset</summary>
        </member>
        <member name="M:Cthuvien.dulieu.P_GIU(System.Data.DataSet@,System.String)">
            <summary>Xóa các bảng và để lại bảng b_ten trong Dataset</summary>
        </member>
        <member name="M:Cthuvien.dulieu.P_GIU(System.Data.DataSet@,System.String[])">
            <summary>Xóa các bảng và để lại các bảng a_ten trong Dataset</summary>
        </member>
        <member name="M:Cthuvien.dulieu.P_LUU(System.Data.DataSet@,System.Data.DataTable)">
            <summary>Lưu bảng vào Dataset</summary>
        </member>
        <member name="T:Tylers.ApplicationBlocks.Data.ConnectionStringCacheState">
            <summary>
            this enum is used in the connection string cache class to return the cached state for a given connection string
            </summary>
        </member>
        <member name="F:Tylers.ApplicationBlocks.Data.ConnectionStringCacheState.isOracle">
            <summary>Connection string is for Oracle</summary>
        </member>
        <member name="F:Tylers.ApplicationBlocks.Data.ConnectionStringCacheState.isSqlServer">
            <summary>Connection string is for SqlServer</summary>
        </member>
        <member name="F:Tylers.ApplicationBlocks.Data.ConnectionStringCacheState.isNotCached">
            <summary>Connection string is not cached</summary>
        </member>
        <member name="T:Tylers.ApplicationBlocks.Data.DbConnectionOwnership">
            <summary>
            Used to indicate whether the connection was provided by the caller, or created by SqlHelper, so that
            we can set the appropriate CommandBehavior when calling ExecuteReader()
            </summary>
        </member>
        <member name="F:Tylers.ApplicationBlocks.Data.DbConnectionOwnership.Internal">
            <summary>Connection is owned and managed by SqlHelper</summary>
        </member>
        <member name="F:Tylers.ApplicationBlocks.Data.DbConnectionOwnership.External">
            <summary>Connection is owned and managed by the caller</summary>
        </member>
        <member name="T:Tylers.ApplicationBlocks.Data.DbSvrType">
            <summary>
            Used to indicated which database server type is being used
            </summary>
        </member>
        <member name="F:Tylers.ApplicationBlocks.Data.DbSvrType.dbSQL">
            <summary>SQL Server</summary>
        </member>
        <member name="F:Tylers.ApplicationBlocks.Data.DbSvrType.dbORA">
            <summary>Oracle</summary>
        </member>
        <member name="F:Tylers.ApplicationBlocks.Data.DbSvrType.dbDB2">
            <summary>DB2 - not yet implemented</summary>
        </member>
        <member name="F:Tylers.ApplicationBlocks.Data.DbSvrType.dbUNKNOWN">
            <summary>Unknown - will throw error</summary>
        </member>
        <member name="T:Tylers.ApplicationBlocks.Data.DataHelper">
            <summary>
            The DataHelper class is intended to pass through to either SqlHelper or OraHelper 
            </summary>
        </member>
        <member name="M:Tylers.ApplicationBlocks.Data.DataHelper.GetDbSvrType(System.String)">
            <summary>
            A tricky thing since by connection string it is impossible to directly determine whether it is
            for a SqlClient or OracleClient, so we cache the connection string and store the value of our
            test to open an OracleConnection
            </summary>
            <param name="connectionString"></param>
            <returns></returns>
        </member>
        <member name="M:Tylers.ApplicationBlocks.Data.DataHelper.ExecuteNonQuery(System.String,System.Data.CommandType,System.String)">
            <summary>
            Execute a SqlCommand (that returns no resultset and takes no parameters) against the database specified in 
            the connection string. 
            </summary>
            <remarks>
            e.g.:  
             int result = ExecuteNonQuery(connString, CommandType.StoredProcedure, "PublishOrders");
            </remarks>
            <param name="connectionString">a valid connection string for a IDbConnection</param>
            <param name="commandType">the CommandType (stored procedure, text, etc.)</param>
            <param name="commandText">the stored procedure name or T-SQL command</param>
            <returns>an int representing the number of rows affected by the command</returns>
        </member>
        <member name="M:Tylers.ApplicationBlocks.Data.DataHelper.ExecuteNonQuery(System.String,System.Data.CommandType,System.String,System.Data.IDataParameter[])">
            <summary>
            Execute a SqlCommand (that returns no resultset) against the database specified in the connection string 
            using the provided parameters.
            </summary>
            <remarks>
            e.g.:  
             int result = ExecuteNonQuery(connString, CommandType.StoredProcedure, "PublishOrders", new IDataParameter("@prodid", 24));
            </remarks>
            <param name="connectionString">a valid connection string for a IDbConnection</param>
            <param name="commandType">the CommandType (stored procedure, text, etc.)</param>
            <param name="commandText">the stored procedure name or T-SQL command</param>
            <param name="commandParameters">an array of SqlParamters used to execute the command</param>
            <returns>an int representing the number of rows affected by the command</returns>
        </member>
        <member name="M:Tylers.ApplicationBlocks.Data.DataHelper.ExecuteNonQuery(System.String,System.String,System.Object[])">
            <summary>
            Execute a stored procedure via a SqlCommand (that returns no resultset) against the database specified in 
            the connection string using the provided parameter values.  This method will query the database to discover the parameters for the 
            stored procedure (the first time each stored procedure is called), and assign the values based on parameter order.
            </summary>
            <remarks>
            This method provides no access to output parameters or the stored procedure's return value parameter.
            
            e.g.:  
             int result = ExecuteNonQuery(connString, "PublishOrders", 24, 36);
            </remarks>
            <param name="connectionString">a valid connection string for a IDbConnection</param>
            <param name="spName">the name of the stored prcedure</param>
            <param name="parameterValues">an array of objects to be assigned as the input values of the stored procedure</param>
            <returns>an int representing the number of rows affected by the command</returns>
        </member>
        <member name="M:Tylers.ApplicationBlocks.Data.DataHelper.ExecuteNonQuery(System.Data.IDbConnection,System.Data.CommandType,System.String)">
            <summary>
            Execute a SqlCommand (that returns no resultset and takes no parameters) against the provided IDbConnection. 
            </summary>
            <remarks>
            e.g.:  
             int result = ExecuteNonQuery(conn, CommandType.StoredProcedure, "PublishOrders");
            </remarks>
            <param name="connection">a valid IDbConnection</param>
            <param name="commandType">the CommandType (stored procedure, text, etc.)</param>
            <param name="commandText">the stored procedure name or T-SQL command</param>
            <returns>an int representing the number of rows affected by the command</returns>
        </member>
        <member name="M:Tylers.ApplicationBlocks.Data.DataHelper.ExecuteNonQuery(System.Data.IDbConnection,System.Data.CommandType,System.String,System.Data.IDataParameter[])">
            <summary>
            Execute a SqlCommand (that returns no resultset) against the specified IDbConnection 
            using the provided parameters.
            </summary>
            <remarks>
            e.g.:  
             int result = ExecuteNonQuery(conn, CommandType.StoredProcedure, "PublishOrders", new IDataParameter("@prodid", 24));
            </remarks>
            <param name="connection">a valid IDbConnection</param>
            <param name="commandType">the CommandType (stored procedure, text, etc.)</param>
            <param name="commandText">the stored procedure name or T-SQL command</param>
            <param name="commandParameters">an array of SqlParamters used to execute the command</param>
            <returns>an int representing the number of rows affected by the command</returns>
        </member>
        <member name="M:Tylers.ApplicationBlocks.Data.DataHelper.ExecuteNonQuery(System.Data.IDbConnection,System.String,System.Object[])">
            <summary>
            Execute a stored procedure via a SqlCommand (that returns no resultset) against the specified IDbConnection 
            using the provided parameter values.  This method will query the database to discover the parameters for the 
            stored procedure (the first time each stored procedure is called), and assign the values based on parameter order.
            </summary>
            <remarks>
            This method provides no access to output parameters or the stored procedure's return value parameter.
            
            e.g.:  
             int result = ExecuteNonQuery(conn, "PublishOrders", 24, 36);
            </remarks>
            <param name="connection">a valid IDbConnection</param>
            <param name="spName">the name of the stored procedure</param>
            <param name="parameterValues">an array of objects to be assigned as the input values of the stored procedure</param>
            <returns>an int representing the number of rows affected by the command</returns>
        </member>
        <member name="M:Tylers.ApplicationBlocks.Data.DataHelper.ExecuteNonQuery(System.Data.IDbTransaction,System.Data.CommandType,System.String)">
            <summary>
            Execute a SqlCommand (that returns no resultset and takes no parameters) against the provided IDbTransaction. 
            </summary>
            <remarks>
            e.g.:  
             int result = ExecuteNonQuery(trans, CommandType.StoredProcedure, "PublishOrders");
            </remarks>
            <param name="transaction">a valid IDbTransaction</param>
            <param name="commandType">the CommandType (stored procedure, text, etc.)</param>
            <param name="commandText">the stored procedure name or T-SQL command</param>
            <returns>an int representing the number of rows affected by the command</returns>
        </member>
        <member name="M:Tylers.ApplicationBlocks.Data.DataHelper.ExecuteNonQuery(System.Data.IDbTransaction,System.Data.CommandType,System.String,System.Data.IDataParameter[])">
            <summary>
            Execute a SqlCommand (that returns no resultset) against the specified IDbTransaction
            using the provided parameters.
            </summary>
            <remarks>
            e.g.:  
             int result = ExecuteNonQuery(trans, CommandType.StoredProcedure, "GetOrders", new IDataParameter("@prodid", 24));
            </remarks>
            <param name="transaction">a valid IDbTransaction</param>
            <param name="commandType">the CommandType (stored procedure, text, etc.)</param>
            <param name="commandText">the stored procedure name or T-SQL command</param>
            <param name="commandParameters">an array of SqlParamters used to execute the command</param>
            <returns>an int representing the number of rows affected by the command</returns>
        </member>
        <member name="M:Tylers.ApplicationBlocks.Data.DataHelper.ExecuteNonQuery(System.Data.IDbTransaction,System.String,System.Object[])">
            <summary>
            Execute a stored procedure via a SqlCommand (that returns no resultset) against the specified 
            IDbTransaction using the provided parameter values.  This method will query the database to discover the parameters for the 
            stored procedure (the first time each stored procedure is called), and assign the values based on parameter order.
            </summary>
            <remarks>
            This method provides no access to output parameters or the stored procedure's return value parameter.
            
            e.g.:  
             int result = ExecuteNonQuery(conn, trans, "PublishOrders", 24, 36);
            </remarks>
            <param name="transaction">a valid IDbTransaction</param>
            <param name="spName">the name of the stored procedure</param>
            <param name="parameterValues">an array of objects to be assigned as the input values of the stored procedure</param>
            <returns>an int representing the number of rows affected by the command</returns>
        </member>
        <member name="M:Tylers.ApplicationBlocks.Data.DataHelper.ExecuteDataset(System.String,System.Data.CommandType,System.String)">
            <summary>
            Execute a SqlCommand (that returns a resultset and takes no parameters) against the database specified in 
            the connection string. 
            </summary>
            <remarks>
            e.g.:  
             DataSet ds = ExecuteDataset(connString, CommandType.StoredProcedure, "GetOrders");
            </remarks>
            <param name="connectionString">a valid connection string for a IDbConnection</param>
            <param name="commandType">the CommandType (stored procedure, text, etc.)</param>
            <param name="commandText">the stored procedure name or T-SQL command</param>
            <returns>a dataset containing the resultset generated by the command</returns>
        </member>
        <member name="M:Tylers.ApplicationBlocks.Data.DataHelper.ExecuteDataset(System.String,System.Data.CommandType,System.String,System.Data.IDataParameter[])">
            <summary>
            Execute a SqlCommand (that returns a resultset) against the database specified in the connection string 
            using the provided parameters.
            </summary>
            <remarks>
            e.g.:  
             DataSet ds = ExecuteDataset(connString, CommandType.StoredProcedure, "GetOrders", new IDataParameter("@prodid", 24));
            </remarks>
            <param name="connectionString">a valid connection string for a IDbConnection</param>
            <param name="commandType">the CommandType (stored procedure, text, etc.)</param>
            <param name="commandText">the stored procedure name or T-SQL command</param>
            <param name="commandParameters">an array of SqlParamters used to execute the command</param>
            <returns>a dataset containing the resultset generated by the command</returns>
        </member>
        <member name="M:Tylers.ApplicationBlocks.Data.DataHelper.ExecuteDataset(System.String,System.String,System.Object[])">
            <summary>
            Execute a stored procedure via a SqlCommand (that returns a resultset) against the database specified in 
            the connection string using the provided parameter values.  This method will query the database to discover the parameters for the 
            stored procedure (the first time each stored procedure is called), and assign the values based on parameter order.
            </summary>
            <remarks>
            This method provides no access to output parameters or the stored procedure's return value parameter.
            
            e.g.:  
             DataSet ds = ExecuteDataset(connString, "GetOrders", 24, 36);
            </remarks>
            <param name="connectionString">a valid connection string for a IDbConnection</param>
            <param name="spName">the name of the stored procedure</param>
            <param name="parameterValues">an array of objects to be assigned as the input values of the stored procedure</param>
            <returns>a dataset containing the resultset generated by the command</returns>
        </member>
        <member name="M:Tylers.ApplicationBlocks.Data.DataHelper.ExecuteDataset(System.Data.IDbConnection,System.Data.CommandType,System.String)">
            <summary>
            Execute a SqlCommand (that returns a resultset and takes no parameters) against the provided IDbConnection. 
            </summary>
            <remarks>
            e.g.:  
             DataSet ds = ExecuteDataset(conn, CommandType.StoredProcedure, "GetOrders");
            </remarks>
            <param name="connection">a valid IDbConnection</param>
            <param name="commandType">the CommandType (stored procedure, text, etc.)</param>
            <param name="commandText">the stored procedure name or T-SQL command</param>
            <returns>a dataset containing the resultset generated by the command</returns>
        </member>
        <member name="M:Tylers.ApplicationBlocks.Data.DataHelper.ExecuteDataset(System.Data.IDbConnection,System.Data.CommandType,System.String,System.Data.IDataParameter[])">
            <summary>
            Execute a SqlCommand (that returns a resultset) against the specified IDbConnection 
            using the provided parameters.
            </summary>
            <remarks>
            e.g.:  
             DataSet ds = ExecuteDataset(conn, CommandType.StoredProcedure, "GetOrders", new IDataParameter("@prodid", 24));
            </remarks>
            <param name="connection">a valid IDbConnection</param>
            <param name="commandType">the CommandType (stored procedure, text, etc.)</param>
            <param name="commandText">the stored procedure name or T-SQL command</param>
            <param name="commandParameters">an array of SqlParamters used to execute the command</param>
            <returns>a dataset containing the resultset generated by the command</returns>
        </member>
        <member name="M:Tylers.ApplicationBlocks.Data.DataHelper.ExecuteDataset(System.Data.IDbConnection,System.String,System.Object[])">
            <summary>
            Execute a stored procedure via a SqlCommand (that returns a resultset) against the specified IDbConnection 
            using the provided parameter values.  This method will query the database to discover the parameters for the 
            stored procedure (the first time each stored procedure is called), and assign the values based on parameter order.
            </summary>
            <remarks>
            This method provides no access to output parameters or the stored procedure's return value parameter.
            
            e.g.:  
             DataSet ds = ExecuteDataset(conn, "GetOrders", 24, 36);
            </remarks>
            <param name="connection">a valid IDbConnection</param>
            <param name="spName">the name of the stored procedure</param>
            <param name="parameterValues">an array of objects to be assigned as the input values of the stored procedure</param>
            <returns>a dataset containing the resultset generated by the command</returns>
        </member>
        <member name="M:Tylers.ApplicationBlocks.Data.DataHelper.ExecuteDataset(System.Data.IDbTransaction,System.Data.CommandType,System.String)">
            <summary>
            Execute a SqlCommand (that returns a resultset and takes no parameters) against the provided IDbTransaction. 
            </summary>
            <remarks>
            e.g.:  
             DataSet ds = ExecuteDataset(trans, CommandType.StoredProcedure, "GetOrders");
            </remarks>
            <param name="transaction">a valid IDbTransaction</param>
            <param name="commandType">the CommandType (stored procedure, text, etc.)</param>
            <param name="commandText">the stored procedure name or T-SQL command</param>
            <returns>a dataset containing the resultset generated by the command</returns>
        </member>
        <member name="M:Tylers.ApplicationBlocks.Data.DataHelper.ExecuteDataset(System.Data.IDbTransaction,System.Data.CommandType,System.String,System.Data.IDataParameter[])">
            <summary>
            Execute a SqlCommand (that returns a resultset) against the specified IDbTransaction
            using the provided parameters.
            </summary>
            <remarks>
            e.g.:  
             DataSet ds = ExecuteDataset(trans, CommandType.StoredProcedure, "GetOrders", new IDataParameter("@prodid", 24));
            </remarks>
            <param name="transaction">a valid IDbTransaction</param>
            <param name="commandType">the CommandType (stored procedure, text, etc.)</param>
            <param name="commandText">the stored procedure name or T-SQL command</param>
            <param name="commandParameters">an array of SqlParamters used to execute the command</param>
            <returns>a dataset containing the resultset generated by the command</returns>
        </member>
        <member name="M:Tylers.ApplicationBlocks.Data.DataHelper.ExecuteDataset(System.Data.IDbTransaction,System.String,System.Object[])">
            <summary>
            Execute a stored procedure via a SqlCommand (that returns a resultset) against the specified 
            IDbTransaction using the provided parameter values.  This method will query the database to discover the parameters for the 
            stored procedure (the first time each stored procedure is called), and assign the values based on parameter order.
            </summary>
            <remarks>
            This method provides no access to output parameters or the stored procedure's return value parameter.
            
            e.g.:  
             DataSet ds = ExecuteDataset(trans, "GetOrders", 24, 36);
            </remarks>
            <param name="transaction">a valid IDbTransaction</param>
            <param name="spName">the name of the stored procedure</param>
            <param name="parameterValues">an array of objects to be assigned as the input values of the stored procedure</param>
            <returns>a dataset containing the resultset generated by the command</returns>
        </member>
        <member name="M:Tylers.ApplicationBlocks.Data.DataHelper.ExecuteReader(System.String,System.Data.CommandType,System.String)">
            <summary>
            Execute a SqlCommand (that returns a resultset and takes no parameters) against the database specified in 
            the connection string. 
            </summary>
            <remarks>
            e.g.:  
             IDataReader dr = ExecuteReader(connString, CommandType.StoredProcedure, "GetOrders");
            </remarks>
            <param name="connectionString">a valid connection string for a IDbConnection</param>
            <param name="commandType">the CommandType (stored procedure, text, etc.)</param>
            <param name="commandText">the stored procedure name or T-SQL command</param>
            <returns>a IDataReader containing the resultset generated by the command</returns>
        </member>
        <member name="M:Tylers.ApplicationBlocks.Data.DataHelper.ExecuteReader(System.String,System.Data.CommandType,System.String,System.Data.IDataParameter[])">
            <summary>
            Execute a SqlCommand (that returns a resultset) against the database specified in the connection string 
            using the provided parameters.
            </summary>
            <remarks>
            e.g.:  
             IDataReader dr = ExecuteReader(connString, CommandType.StoredProcedure, "GetOrders", new IDataParameter("@prodid", 24));
            </remarks>
            <param name="connectionString">a valid connection string for a IDbConnection</param>
            <param name="commandType">the CommandType (stored procedure, text, etc.)</param>
            <param name="commandText">the stored procedure name or T-SQL command</param>
            <param name="commandParameters">an array of SqlParamters used to execute the command</param>
            <returns>a IDataReader containing the resultset generated by the command</returns>
        </member>
        <member name="M:Tylers.ApplicationBlocks.Data.DataHelper.ExecuteReader(System.String,System.String,System.Object[])">
            <summary>
            Execute a stored procedure via a SqlCommand (that returns a resultset) against the database specified in 
            the connection string using the provided parameter values.  This method will query the database to discover the parameters for the 
            stored procedure (the first time each stored procedure is called), and assign the values based on parameter order.
            </summary>
            <remarks>
            This method provides no access to output parameters or the stored procedure's return value parameter.
            
            e.g.:  
             IDataReader dr = ExecuteReader(connString, "GetOrders", 24, 36);
            </remarks>
            <param name="connectionString">a valid connection string for a IDbConnection</param>
            <param name="spName">the name of the stored procedure</param>
            <param name="parameterValues">an array of objects to be assigned as the input values of the stored procedure</param>
            <returns>a IDataReader containing the resultset generated by the command</returns>
        </member>
        <member name="M:Tylers.ApplicationBlocks.Data.DataHelper.ExecuteReader(System.Data.IDbConnection,System.Data.CommandType,System.String)">
            <summary>
            Execute a SqlCommand (that returns a resultset and takes no parameters) against the provided IDbConnection. 
            </summary>
            <remarks>
            e.g.:  
             IDataReader dr = ExecuteReader(conn, CommandType.StoredProcedure, "GetOrders");
            </remarks>
            <param name="connection">a valid IDbConnection</param>
            <param name="commandType">the CommandType (stored procedure, text, etc.)</param>
            <param name="commandText">the stored procedure name or T-SQL command</param>
            <returns>a IDataReader containing the resultset generated by the command</returns>
        </member>
        <member name="M:Tylers.ApplicationBlocks.Data.DataHelper.ExecuteReader(System.Data.IDbConnection,System.Data.CommandType,System.String,System.Data.IDataParameter[])">
            <summary>
            Execute a SqlCommand (that returns a resultset) against the specified IDbConnection 
            using the provided parameters.
            </summary>
            <remarks>
            e.g.:  
             IDataReader dr = ExecuteReader(conn, CommandType.StoredProcedure, "GetOrders", new IDataParameter("@prodid", 24));
            </remarks>
            <param name="connection">a valid IDbConnection</param>
            <param name="commandType">the CommandType (stored procedure, text, etc.)</param>
            <param name="commandText">the stored procedure name or T-SQL command</param>
            <param name="commandParameters">an array of SqlParamters used to execute the command</param>
            <returns>a IDataReader containing the resultset generated by the command</returns>
        </member>
        <member name="M:Tylers.ApplicationBlocks.Data.DataHelper.ExecuteReader(System.Data.IDbConnection,System.String,System.Object[])">
            <summary>
            Execute a stored procedure via a SqlCommand (that returns a resultset) against the specified IDbConnection 
            using the provided parameter values.  This method will query the database to discover the parameters for the 
            stored procedure (the first time each stored procedure is called), and assign the values based on parameter order.
            </summary>
            <remarks>
            This method provides no access to output parameters or the stored procedure's return value parameter.
            
            e.g.:  
             IDataReader dr = ExecuteReader(conn, "GetOrders", 24, 36);
            </remarks>
            <param name="connection">a valid IDbConnection</param>
            <param name="spName">the name of the stored procedure</param>
            <param name="parameterValues">an array of objects to be assigned as the input values of the stored procedure</param>
            <returns>a IDataReader containing the resultset generated by the command</returns>
        </member>
        <member name="M:Tylers.ApplicationBlocks.Data.DataHelper.ExecuteReader(System.Data.IDbTransaction,System.Data.CommandType,System.String)">
            <summary>
            Execute a SqlCommand (that returns a resultset and takes no parameters) against the provided IDbTransaction. 
            </summary>
            <remarks>
            e.g.:  
             IDataReader dr = ExecuteReader(trans, CommandType.StoredProcedure, "GetOrders");
            </remarks>
            <param name="transaction">a valid IDbTransaction</param>
            <param name="commandType">the CommandType (stored procedure, text, etc.)</param>
            <param name="commandText">the stored procedure name or T-SQL command</param>
            <returns>a IDataReader containing the resultset generated by the command</returns>
        </member>
        <member name="M:Tylers.ApplicationBlocks.Data.DataHelper.ExecuteReader(System.Data.IDbTransaction,System.Data.CommandType,System.String,System.Data.IDataParameter[])">
            <summary>
            Execute a SqlCommand (that returns a resultset) against the specified IDbTransaction
            using the provided parameters.
            </summary>
            <remarks>
            e.g.:  
              IDataReader dr = ExecuteReader(trans, CommandType.StoredProcedure, "GetOrders", new IDataParameter("@prodid", 24));
            </remarks>
            <param name="transaction">a valid IDbTransaction</param>
            <param name="commandType">the CommandType (stored procedure, text, etc.)</param>
            <param name="commandText">the stored procedure name or T-SQL command</param>
            <param name="commandParameters">an array of SqlParamters used to execute the command</param>
            <returns>a IDataReader containing the resultset generated by the command</returns>
        </member>
        <member name="M:Tylers.ApplicationBlocks.Data.DataHelper.ExecuteReader(System.Data.IDbTransaction,System.String,System.Object[])">
            <summary>
            Execute a stored procedure via a SqlCommand (that returns a resultset) against the specified
            IDbTransaction using the provided parameter values.  This method will query the database to discover the parameters for the 
            stored procedure (the first time each stored procedure is called), and assign the values based on parameter order.
            </summary>
            <remarks>
            This method provides no access to output parameters or the stored procedure's return value parameter.
            
            e.g.:  
             IDataReader dr = ExecuteReader(trans, "GetOrders", 24, 36);
            </remarks>
            <param name="transaction">a valid IDbTransaction</param>
            <param name="spName">the name of the stored procedure</param>
            <param name="parameterValues">an array of objects to be assigned as the input values of the stored procedure</param>
            <returns>a IDataReader containing the resultset generated by the command</returns>
        </member>
        <member name="M:Tylers.ApplicationBlocks.Data.DataHelper.ExecuteScalar(System.String,System.Data.CommandType,System.String)">
            <summary>
            Execute a SqlCommand (that returns a 1x1 resultset and takes no parameters) against the database specified in 
            the connection string. 
            </summary>
            <remarks>
            e.g.:  
             int orderCount = (int)ExecuteScalar(connString, CommandType.StoredProcedure, "GetOrderCount");
            </remarks>
            <param name="connectionString">a valid connection string for a IDbConnection</param>
            <param name="commandType">the CommandType (stored procedure, text, etc.)</param>
            <param name="commandText">the stored procedure name or T-SQL command</param>
            <returns>an object containing the value in the 1x1 resultset generated by the command</returns>
        </member>
        <member name="M:Tylers.ApplicationBlocks.Data.DataHelper.ExecuteScalar(System.String,System.Data.CommandType,System.String,System.Data.IDataParameter[])">
            <summary>
            Execute a SqlCommand (that returns a 1x1 resultset) against the database specified in the connection string 
            using the provided parameters.
            </summary>
            <remarks>
            e.g.:  
             int orderCount = (int)ExecuteScalar(connString, CommandType.StoredProcedure, "GetOrderCount", new IDataParameter("@prodid", 24));
            </remarks>
            <param name="connectionString">a valid connection string for a IDbConnection</param>
            <param name="commandType">the CommandType (stored procedure, text, etc.)</param>
            <param name="commandText">the stored procedure name or T-SQL command</param>
            <param name="commandParameters">an array of SqlParamters used to execute the command</param>
            <returns>an object containing the value in the 1x1 resultset generated by the command</returns>
        </member>
        <member name="M:Tylers.ApplicationBlocks.Data.DataHelper.ExecuteScalar(System.String,System.String,System.Object[])">
            <summary>
            Execute a stored procedure via a SqlCommand (that returns a 1x1 resultset) against the database specified in 
            the connection string using the provided parameter values.  This method will query the database to discover the parameters for the 
            stored procedure (the first time each stored procedure is called), and assign the values based on parameter order.
            </summary>
            <remarks>
            This method provides no access to output parameters or the stored procedure's return value parameter.
            
            e.g.:  
             int orderCount = (int)ExecuteScalar(connString, "GetOrderCount", 24, 36);
            </remarks>
            <param name="connectionString">a valid connection string for a IDbConnection</param>
            <param name="spName">the name of the stored procedure</param>
            <param name="parameterValues">an array of objects to be assigned as the input values of the stored procedure</param>
            <returns>an object containing the value in the 1x1 resultset generated by the command</returns>
        </member>
        <member name="M:Tylers.ApplicationBlocks.Data.DataHelper.ExecuteScalar(System.Data.IDbConnection,System.Data.CommandType,System.String)">
            <summary>
            Execute a SqlCommand (that returns a 1x1 resultset and takes no parameters) against the provided IDbConnection. 
            </summary>
            <remarks>
            e.g.:  
             int orderCount = (int)ExecuteScalar(conn, CommandType.StoredProcedure, "GetOrderCount");
            </remarks>
            <param name="connection">a valid IDbConnection</param>
            <param name="commandType">the CommandType (stored procedure, text, etc.)</param>
            <param name="commandText">the stored procedure name or T-SQL command</param>
            <returns>an object containing the value in the 1x1 resultset generated by the command</returns>
        </member>
        <member name="M:Tylers.ApplicationBlocks.Data.DataHelper.ExecuteScalar(System.Data.IDbConnection,System.Data.CommandType,System.String,System.Data.IDataParameter[])">
            <summary>
            Execute a SqlCommand (that returns a 1x1 resultset) against the specified IDbConnection 
            using the provided parameters.
            </summary>
            <remarks>
            e.g.:  
             int orderCount = (int)ExecuteScalar(conn, CommandType.StoredProcedure, "GetOrderCount", new IDataParameter("@prodid", 24));
            </remarks>
            <param name="connection">a valid IDbConnection</param>
            <param name="commandType">the CommandType (stored procedure, text, etc.)</param>
            <param name="commandText">the stored procedure name or T-SQL command</param>
            <param name="commandParameters">an array of SqlParamters used to execute the command</param>
            <returns>an object containing the value in the 1x1 resultset generated by the command</returns>
        </member>
        <member name="M:Tylers.ApplicationBlocks.Data.DataHelper.ExecuteScalar(System.Data.IDbConnection,System.String,System.Object[])">
            <summary>
            Execute a stored procedure via a SqlCommand (that returns a 1x1 resultset) against the specified IDbConnection 
            using the provided parameter values.  This method will query the database to discover the parameters for the 
            stored procedure (the first time each stored procedure is called), and assign the values based on parameter order.
            </summary>
            <remarks>
            This method provides no access to output parameters or the stored procedure's return value parameter.
            
            e.g.:  
             int orderCount = (int)ExecuteScalar(conn, "GetOrderCount", 24, 36);
            </remarks>
            <param name="connection">a valid IDbConnection</param>
            <param name="spName">the name of the stored procedure</param>
            <param name="parameterValues">an array of objects to be assigned as the input values of the stored procedure</param>
            <returns>an object containing the value in the 1x1 resultset generated by the command</returns>
        </member>
        <member name="M:Tylers.ApplicationBlocks.Data.DataHelper.ExecuteScalar(System.Data.IDbTransaction,System.Data.CommandType,System.String)">
            <summary>
            Execute a SqlCommand (that returns a 1x1 resultset and takes no parameters) against the provided IDbTransaction. 
            </summary>
            <remarks>
            e.g.:  
             int orderCount = (int)ExecuteScalar(trans, CommandType.StoredProcedure, "GetOrderCount");
            </remarks>
            <param name="transaction">a valid IDbTransaction</param>
            <param name="commandType">the CommandType (stored procedure, text, etc.)</param>
            <param name="commandText">the stored procedure name or T-SQL command</param>
            <returns>an object containing the value in the 1x1 resultset generated by the command</returns>
        </member>
        <member name="M:Tylers.ApplicationBlocks.Data.DataHelper.ExecuteScalar(System.Data.IDbTransaction,System.Data.CommandType,System.String,System.Data.IDataParameter[])">
            <summary>
            Execute a SqlCommand (that returns a 1x1 resultset) against the specified IDbTransaction
            using the provided parameters.
            </summary>
            <remarks>
            e.g.:  
             int orderCount = (int)ExecuteScalar(trans, CommandType.StoredProcedure, "GetOrderCount", new IDataParameter("@prodid", 24));
            </remarks>
            <param name="transaction">a valid IDbTransaction</param>
            <param name="commandType">the CommandType (stored procedure, text, etc.)</param>
            <param name="commandText">the stored procedure name or T-SQL command</param>
            <param name="commandParameters">an array of SqlParamters used to execute the command</param>
            <returns>an object containing the value in the 1x1 resultset generated by the command</returns>
        </member>
        <member name="M:Tylers.ApplicationBlocks.Data.DataHelper.ExecuteScalar(System.Data.IDbTransaction,System.String,System.Object[])">
            <summary>
            Execute a stored procedure via a SqlCommand (that returns a 1x1 resultset) against the specified
            IDbTransaction using the provided parameter values.  This method will query the database to discover the parameters for the 
            stored procedure (the first time each stored procedure is called), and assign the values based on parameter order.
            </summary>
            <remarks>
            This method provides no access to output parameters or the stored procedure's return value parameter.
            
            e.g.:  
             int orderCount = (int)ExecuteScalar(trans, "GetOrderCount", 24, 36);
            </remarks>
            <param name="transaction">a valid IDbTransaction</param>
            <param name="spName">the name of the stored procedure</param>
            <param name="parameterValues">an array of objects to be assigned as the input values of the stored procedure</param>
            <returns>an object containing the value in the 1x1 resultset generated by the command</returns>
        </member>
        <member name="M:Tylers.ApplicationBlocks.Data.DataHelper.ExecuteXmlReader(System.Data.IDbConnection,System.Data.CommandType,System.String)">
            <summary>
            Execute a SqlCommand (that returns a resultset and takes no parameters) against the provided IDbConnection. 
            </summary>
            <remarks>
            e.g.:  
             XmlReader r = ExecuteXmlReader(conn, CommandType.StoredProcedure, "GetOrders");
            </remarks>
            <param name="connection">a valid IDbConnection</param>
            <param name="commandType">the CommandType (stored procedure, text, etc.)</param>
            <param name="commandText">the stored procedure name or T-SQL command using "FOR XML AUTO"</param>
            <returns>an XmlReader containing the resultset generated by the command</returns>
        </member>
        <member name="M:Tylers.ApplicationBlocks.Data.DataHelper.ExecuteXmlReader(System.Data.IDbConnection,System.Data.CommandType,System.String,System.Data.IDataParameter[])">
            <summary>
            Execute a SqlCommand (that returns a resultset) against the specified IDbConnection 
            using the provided parameters.
            </summary>
            <remarks>
            e.g.:  
             XmlReader r = ExecuteXmlReader(conn, CommandType.StoredProcedure, "GetOrders", new IDataParameter("@prodid", 24));
            </remarks>
            <param name="connection">a valid IDbConnection</param>
            <param name="commandType">the CommandType (stored procedure, text, etc.)</param>
            <param name="commandText">the stored procedure name or T-SQL command using "FOR XML AUTO"</param>
            <param name="commandParameters">an array of SqlParamters used to execute the command</param>
            <returns>an XmlReader containing the resultset generated by the command</returns>
        </member>
        <member name="M:Tylers.ApplicationBlocks.Data.DataHelper.ExecuteXmlReader(System.Data.IDbConnection,System.String,System.Object[])">
            <summary>
            Execute a stored procedure via a SqlCommand (that returns a resultset) against the specified IDbConnection 
            using the provided parameter values.  This method will query the database to discover the parameters for the 
            stored procedure (the first time each stored procedure is called), and assign the values based on parameter order.
            </summary>
            <remarks>
            This method provides no access to output parameters or the stored procedure's return value parameter.
            
            e.g.:  
             XmlReader r = ExecuteXmlReader(conn, "GetOrders", 24, 36);
            </remarks>
            <param name="connection">a valid IDbConnection</param>
            <param name="spName">the name of the stored procedure using "FOR XML AUTO"</param>
            <param name="parameterValues">an array of objects to be assigned as the input values of the stored procedure</param>
            <returns>an XmlReader containing the resultset generated by the command</returns>
        </member>
        <member name="M:Tylers.ApplicationBlocks.Data.DataHelper.ExecuteXmlReader(System.Data.IDbTransaction,System.Data.CommandType,System.String)">
            <summary>
            Execute a SqlCommand (that returns a resultset and takes no parameters) against the provided IDbTransaction. 
            </summary>
            <remarks>
            e.g.:  
             XmlReader r = ExecuteXmlReader(trans, CommandType.StoredProcedure, "GetOrders");
            </remarks>
            <param name="transaction">a valid IDbTransaction</param>
            <param name="commandType">the CommandType (stored procedure, text, etc.)</param>
            <param name="commandText">the stored procedure name or T-SQL command using "FOR XML AUTO"</param>
            <returns>an XmlReader containing the resultset generated by the command</returns>
        </member>
        <member name="M:Tylers.ApplicationBlocks.Data.DataHelper.ExecuteXmlReader(System.Data.IDbTransaction,System.Data.CommandType,System.String,System.Data.IDataParameter[])">
            <summary>
            Execute a SqlCommand (that returns a resultset) against the specified IDbTransaction
            using the provided parameters.
            </summary>
            <remarks>
            e.g.:  
             XmlReader r = ExecuteXmlReader(trans, CommandType.StoredProcedure, "GetOrders", new IDataParameter("@prodid", 24));
            </remarks>
            <param name="transaction">a valid IDbTransaction</param>
            <param name="commandType">the CommandType (stored procedure, text, etc.)</param>
            <param name="commandText">the stored procedure name or T-SQL command using "FOR XML AUTO"</param>
            <param name="commandParameters">an array of SqlParamters used to execute the command</param>
            <returns>an XmlReader containing the resultset generated by the command</returns>
        </member>
        <member name="M:Tylers.ApplicationBlocks.Data.DataHelper.ExecuteXmlReader(System.Data.IDbTransaction,System.String,System.Object[])">
            <summary>
            Execute a stored procedure via a SqlCommand (that returns a resultset) against the specified 
            IDbTransaction using the provided parameter values.  This method will query the database to discover the parameters for the 
            stored procedure (the first time each stored procedure is called), and assign the values based on parameter order.
            </summary>
            <remarks>
            This method provides no access to output parameters or the stored procedure's return value parameter.
            
            e.g.:  
             XmlReader r = ExecuteXmlReader(trans, "GetOrders", 24, 36);
            </remarks>
            <param name="transaction">a valid IDbTransaction</param>
            <param name="spName">the name of the stored procedure</param>
            <param name="parameterValues">an array of objects to be assigned as the input values of the stored procedure</param>
            <returns>a dataset containing the resultset generated by the command</returns>
        </member>
        <member name="T:Tylers.ApplicationBlocks.Data.ConnectionStringCache">
            <summary>
            ConnectionString cache provides functions to leverage a static cache of connection strings
            </summary>
        </member>
        <member name="M:Tylers.ApplicationBlocks.Data.ConnectionStringCache.CacheConnectionString(System.String,System.Boolean)">
            <summary>
            add connectionString to the cache - stores connectionString as key with value of isOracle
            </summary>
        </member>
        <member name="M:Tylers.ApplicationBlocks.Data.ConnectionStringCache.GetConnectionStringState(System.String)">
            <summary>
            retrieve a parameter array from the cache
            </summary>
        </member>
        <member name="T:Tylers.ApplicationBlocks.Data.OraHelper">
            <summary>
            The OraHelper class is intended to encapsulate high performance, scalable best practices for 
            common uses of SqlClient.
            </summary>
        </member>
        <member name="M:Tylers.ApplicationBlocks.Data.OraHelper.AttachParameters(System.Data.OracleClient.OracleCommand,System.Data.OracleClient.OracleParameter[])">
            <summary>
            This method is used to attach array of OracleParameters to a OracleCommand.
            
            This method will assign a value of DbNull to any parameter with a direction of
            InputOutput and a value of null.  
            
            This behavior will prevent default values from being used, but
            this will be the less common case than an intended pure output parameter (derived as InputOutput)
            where the user provided no input value.
            </summary>
            <param name="command">The command to which the parameters will be added</param>
            <param name="commandParameters">an array of OracleParameters tho be added to command</param>
        </member>
        <member name="M:Tylers.ApplicationBlocks.Data.OraHelper.AssignParameterValues(System.Data.OracleClient.OracleParameter[],System.Object[])">
            <summary>
            This method assigns an array of values to an array of OracleParameters.
            </summary>
            <param name="commandParameters">array of OracleParameters to be assigned values</param>
            <param name="parameterValues">array of objects holding the values to be assigned</param>
        </member>
        <member name="M:Tylers.ApplicationBlocks.Data.OraHelper.PrepareCommand(System.Data.OracleClient.OracleCommand,System.Data.OracleClient.OracleConnection,System.Data.OracleClient.OracleTransaction,System.Data.CommandType,System.String,System.Data.OracleClient.OracleParameter[])">
            <summary>
            This method opens (if necessary) and assigns a connection, transaction, command type and parameters 
            to the provided command.
            </summary>
            <param name="command">the OracleCommand to be prepared</param>
            <param name="connection">a valid OracleConnection, on which to execute this command</param>
            <param name="transaction">a valid OracleTransaction, or 'null'</param>
            <param name="commandType">the CommandType (stored procedure, text, etc.)</param>
            <param name="commandText">the stored procedure name or PL-SQL command</param>
            <param name="commandParameters">an array of OracleParameters to be associated with the command or 'null' if no parameters are required</param>
        </member>
        <member name="M:Tylers.ApplicationBlocks.Data.OraHelper.ExecuteNonQuery(System.String,System.Data.CommandType,System.String)">
            <summary>
            Execute a OracleCommand (that returns no resultset and takes no parameters) against the database specified in 
            the connection string. 
            </summary>
            <remarks>
            e.g.:  
             int result = ExecuteNonQuery(connString, CommandType.StoredProcedure, "PublishOrders");
            </remarks>
            <param name="connectionString">a valid connection string for a OracleConnection</param>
            <param name="commandType">the CommandType (stored procedure, text, etc.)</param>
            <param name="commandText">the stored procedure name or PL-SQL command</param>
            <returns>an int representing the number of rows affected by the command</returns>
        </member>
        <member name="M:Tylers.ApplicationBlocks.Data.OraHelper.ExecuteNonQuery(System.String,System.Data.CommandType,System.String,System.Data.OracleClient.OracleParameter[])">
            <summary>
            Execute a OracleCommand (that returns no resultset) against the database specified in the connection string 
            using the provided parameters.
            </summary>
            <remarks>
            e.g.:  
             int result = ExecuteNonQuery(connString, CommandType.StoredProcedure, "PublishOrders", new OracleParameter("@prodid", 24));
            </remarks>
            <param name="connectionString">a valid connection string for a OracleConnection</param>
            <param name="commandType">the CommandType (stored procedure, text, etc.)</param>
            <param name="commandText">the stored procedure name or PL-SQL command</param>
            <param name="commandParameters">an array of OracleParameters used to execute the command</param>
            <returns>an int representing the number of rows affected by the command</returns>
        </member>
        <member name="M:Tylers.ApplicationBlocks.Data.OraHelper.ExecuteNonQuery(System.String,System.String,System.Object[])">
            <summary>
            Execute a stored procedure via a OracleCommand (that returns no resultset) against the database specified in 
            the connection string using the provided parameter values.  This method will query the database to discover the parameters for the 
            stored procedure (the first time each stored procedure is called), and assign the values based on parameter order.
            </summary>
            <remarks>
            This method provides no access to output parameters or the stored procedure's return value parameter.
            
            e.g.:  
             int result = ExecuteNonQuery(connString, "PublishOrders", 24, 36);
            </remarks>
            <param name="connectionString">a valid connection string for a OracleConnection</param>
            <param name="spName">the name of the stored prcedure</param>
            <param name="parameterValues">an array of objects to be assigned as the input values of the stored procedure</param>
            <returns>an int representing the number of rows affected by the command</returns>
        </member>
        <member name="M:Tylers.ApplicationBlocks.Data.OraHelper.ExecuteNonQuery(System.Data.OracleClient.OracleConnection,System.Data.CommandType,System.String)">
            <summary>
            Execute a OracleCommand (that returns no resultset and takes no parameters) against the provided OracleConnection. 
            </summary>
            <remarks>
            e.g.:  
             int result = ExecuteNonQuery(conn, CommandType.StoredProcedure, "PublishOrders");
            </remarks>
            <param name="connection">a valid OracleConnection</param>
            <param name="commandType">the CommandType (stored procedure, text, etc.)</param>
            <param name="commandText">the stored procedure name or PL-SQL command</param>
            <returns>an int representing the number of rows affected by the command</returns>
        </member>
        <member name="M:Tylers.ApplicationBlocks.Data.OraHelper.ExecuteNonQuery(System.Data.OracleClient.OracleConnection,System.Data.CommandType,System.String,System.Data.OracleClient.OracleParameter[])">
            <summary>
            Execute a OracleCommand (that returns no resultset) against the specified OracleConnection 
            using the provided parameters.
            </summary>
            <remarks>
            e.g.:  
             int result = ExecuteNonQuery(conn, CommandType.StoredProcedure, "PublishOrders", new OracleParameter("@prodid", 24));
            </remarks>
            <param name="connection">a valid OracleConnection</param>
            <param name="commandType">the CommandType (stored procedure, text, etc.)</param>
            <param name="commandText">the stored procedure name or PL-SQL command</param>
            <param name="commandParameters">an array of OracleParameters used to execute the command</param>
            <returns>an int representing the number of rows affected by the command</returns>
        </member>
        <member name="M:Tylers.ApplicationBlocks.Data.OraHelper.ExecuteNonQuery(System.Data.OracleClient.OracleConnection,System.String,System.Object[])">
            <summary>
            Execute a stored procedure via a OracleCommand (that returns no resultset) against the specified OracleConnection 
            using the provided parameter values.  This method will query the database to discover the parameters for the 
            stored procedure (the first time each stored procedure is called), and assign the values based on parameter order.
            </summary>
            <remarks>
            This method provides no access to output parameters or the stored procedure's return value parameter.
            
            e.g.:  
             int result = ExecuteNonQuery(conn, "PublishOrders", 24, 36);
            </remarks>
            <param name="connection">a valid OracleConnection</param>
            <param name="spName">the name of the stored procedure</param>
            <param name="parameterValues">an array of objects to be assigned as the input values of the stored procedure</param>
            <returns>an int representing the number of rows affected by the command</returns>
        </member>
        <member name="M:Tylers.ApplicationBlocks.Data.OraHelper.ExecuteNonQuery(System.Data.OracleClient.OracleTransaction,System.Data.CommandType,System.String)">
            <summary>
            Execute a OracleCommand (that returns no resultset and takes no parameters) against the provided OracleTransaction. 
            </summary>
            <remarks>
            e.g.:  
             int result = ExecuteNonQuery(trans, CommandType.StoredProcedure, "PublishOrders");
            </remarks>
            <param name="transaction">a valid OracleTransaction</param>
            <param name="commandType">the CommandType (stored procedure, text, etc.)</param>
            <param name="commandText">the stored procedure name or PL-SQL command</param>
            <returns>an int representing the number of rows affected by the command</returns>
        </member>
        <member name="M:Tylers.ApplicationBlocks.Data.OraHelper.ExecuteNonQuery(System.Data.OracleClient.OracleTransaction,System.Data.CommandType,System.String,System.Data.OracleClient.OracleParameter[])">
            <summary>
            Execute a OracleCommand (that returns no resultset) against the specified OracleTransaction
            using the provided parameters.
            </summary>
            <remarks>
            e.g.:  
             int result = ExecuteNonQuery(trans, CommandType.StoredProcedure, "GetOrders", new OracleParameter("@prodid", 24));
            </remarks>
            <param name="transaction">a valid OracleTransaction</param>
            <param name="commandType">the CommandType (stored procedure, text, etc.)</param>
            <param name="commandText">the stored procedure name or PL-SQL command</param>
            <param name="commandParameters">an array of OracleParameters used to execute the command</param>
            <returns>an int representing the number of rows affected by the command</returns>
        </member>
        <member name="M:Tylers.ApplicationBlocks.Data.OraHelper.ExecuteNonQuery(System.Data.OracleClient.OracleTransaction,System.String,System.Object[])">
            <summary>
            Execute a stored procedure via a OracleCommand (that returns no resultset) against the specified 
            OracleTransaction using the provided parameter values.  This method will query the database to discover the parameters for the 
            stored procedure (the first time each stored procedure is called), and assign the values based on parameter order.
            </summary>
            <remarks>
            This method provides no access to output parameters or the stored procedure's return value parameter.
            
            e.g.:  
             int result = ExecuteNonQuery(conn, trans, "PublishOrders", 24, 36);
            </remarks>
            <param name="transaction">a valid OracleTransaction</param>
            <param name="spName">the name of the stored procedure</param>
            <param name="parameterValues">an array of objects to be assigned as the input values of the stored procedure</param>
            <returns>an int representing the number of rows affected by the command</returns>
        </member>
        <member name="M:Tylers.ApplicationBlocks.Data.OraHelper.ExecuteDataset(System.String,System.Data.CommandType,System.String)">
            <summary>
            Execute a OracleCommand (that returns a resultset and takes no parameters) against the database specified in 
            the connection string. 
            </summary>
            <remarks>
            e.g.:  
             DataSet ds = ExecuteDataset(connString, CommandType.StoredProcedure, "GetOrders");
            </remarks>
            <param name="connectionString">a valid connection string for a OracleConnection</param>
            <param name="commandType">the CommandType (stored procedure, text, etc.)</param>
            <param name="commandText">the stored procedure name or PL-SQL command</param>
            <returns>a dataset containing the resultset generated by the command</returns>
        </member>
        <member name="M:Tylers.ApplicationBlocks.Data.OraHelper.ExecuteDataset(System.String,System.Data.CommandType,System.String,System.Data.OracleClient.OracleParameter[])">
            <summary>
            Execute a OracleCommand (that returns a resultset) against the database specified in the connection string 
            using the provided parameters.
            </summary>
            <remarks>
            e.g.:  
             DataSet ds = ExecuteDataset(connString, CommandType.StoredProcedure, "GetOrders", new OracleParameter("@prodid", 24));
            </remarks>
            <param name="connectionString">a valid connection string for a OracleConnection</param>
            <param name="commandType">the CommandType (stored procedure, text, etc.)</param>
            <param name="commandText">the stored procedure name or PL-SQL command</param>
            <param name="commandParameters">an array of OracleParameters used to execute the command</param>
            <returns>a dataset containing the resultset generated by the command</returns>
        </member>
        <member name="M:Tylers.ApplicationBlocks.Data.OraHelper.ExecuteDataset(System.String,System.String,System.Object[])">
            <summary>
            Execute a stored procedure via a OracleCommand (that returns a resultset) against the database specified in 
            the connection string using the provided parameter values.  This method will query the database to discover the parameters for the 
            stored procedure (the first time each stored procedure is called), and assign the values based on parameter order.
            </summary>
            <remarks>
            This method provides no access to output parameters or the stored procedure's return value parameter.
            
            e.g.:  
             DataSet ds = ExecuteDataset(connString, "GetOrders", 24, 36);
            </remarks>
            <param name="connectionString">a valid connection string for a OracleConnection</param>
            <param name="spName">the name of the stored procedure</param>
            <param name="parameterValues">an array of objects to be assigned as the input values of the stored procedure</param>
            <returns>a dataset containing the resultset generated by the command</returns>
        </member>
        <member name="M:Tylers.ApplicationBlocks.Data.OraHelper.ExecuteDataset(System.Data.OracleClient.OracleConnection,System.Data.CommandType,System.String)">
            <summary>
            Execute a OracleCommand (that returns a resultset and takes no parameters) against the provided OracleConnection. 
            </summary>
            <remarks>
            e.g.:  
             DataSet ds = ExecuteDataset(conn, CommandType.StoredProcedure, "GetOrders");
            </remarks>
            <param name="connection">a valid OracleConnection</param>
            <param name="commandType">the CommandType (stored procedure, text, etc.)</param>
            <param name="commandText">the stored procedure name or PL-SQL command</param>
            <returns>a dataset containing the resultset generated by the command</returns>
        </member>
        <member name="M:Tylers.ApplicationBlocks.Data.OraHelper.ExecuteDataset(System.Data.OracleClient.OracleConnection,System.Data.CommandType,System.String,System.Data.OracleClient.OracleParameter[])">
            <summary>
            Execute a OracleCommand (that returns a resultset) against the specified OracleConnection 
            using the provided parameters.
            </summary>
            <remarks>
            e.g.:  
             DataSet ds = ExecuteDataset(conn, CommandType.StoredProcedure, "GetOrders", new OracleParameter("@prodid", 24));
            </remarks>
            <param name="connection">a valid OracleConnection</param>
            <param name="commandType">the CommandType (stored procedure, text, etc.)</param>
            <param name="commandText">the stored procedure name or PL-SQL command</param>
            <param name="commandParameters">an array of OracleParameters used to execute the command</param>
            <returns>a dataset containing the resultset generated by the command</returns>
        </member>
        <member name="M:Tylers.ApplicationBlocks.Data.OraHelper.ExecuteDataset(System.Data.OracleClient.OracleConnection,System.String,System.Object[])">
            <summary>
            Execute a stored procedure via a OracleCommand (that returns a resultset) against the specified OracleConnection 
            using the provided parameter values.  This method will query the database to discover the parameters for the 
            stored procedure (the first time each stored procedure is called), and assign the values based on parameter order.
            </summary>
            <remarks>
            This method provides no access to output parameters or the stored procedure's return value parameter.
            
            e.g.:  
             DataSet ds = ExecuteDataset(conn, "GetOrders", 24, 36);
            </remarks>
            <param name="connection">a valid OracleConnection</param>
            <param name="spName">the name of the stored procedure</param>
            <param name="parameterValues">an array of objects to be assigned as the input values of the stored procedure</param>
            <returns>a dataset containing the resultset generated by the command</returns>
        </member>
        <member name="M:Tylers.ApplicationBlocks.Data.OraHelper.ExecuteDataset(System.Data.OracleClient.OracleTransaction,System.Data.CommandType,System.String)">
            <summary>
            Execute a OracleCommand (that returns a resultset and takes no parameters) against the provided OracleTransaction. 
            </summary>
            <remarks>
            e.g.:  
             DataSet ds = ExecuteDataset(trans, CommandType.StoredProcedure, "GetOrders");
            </remarks>
            <param name="transaction">a valid OracleTransaction</param>
            <param name="commandType">the CommandType (stored procedure, text, etc.)</param>
            <param name="commandText">the stored procedure name or PL-SQL command</param>
            <returns>a dataset containing the resultset generated by the command</returns>
        </member>
        <member name="M:Tylers.ApplicationBlocks.Data.OraHelper.ExecuteDataset(System.Data.OracleClient.OracleTransaction,System.Data.CommandType,System.String,System.Data.OracleClient.OracleParameter[])">
            <summary>
            Execute a OracleCommand (that returns a resultset) against the specified OracleTransaction
            using the provided parameters.
            </summary>
            <remarks>
            e.g.:  
             DataSet ds = ExecuteDataset(trans, CommandType.StoredProcedure, "GetOrders", new OracleParameter("@prodid", 24));
            </remarks>
            <param name="transaction">a valid OracleTransaction</param>
            <param name="commandType">the CommandType (stored procedure, text, etc.)</param>
            <param name="commandText">the stored procedure name or PL-SQL command</param>
            <param name="commandParameters">an array of OracleParameters used to execute the command</param>
            <returns>a dataset containing the resultset generated by the command</returns>
        </member>
        <member name="M:Tylers.ApplicationBlocks.Data.OraHelper.ExecuteDataset(System.Data.OracleClient.OracleTransaction,System.String,System.Object[])">
            <summary>
            Execute a stored procedure via a OracleCommand (that returns a resultset) against the specified 
            OracleTransaction using the provided parameter values.  This method will query the database to discover the parameters for the 
            stored procedure (the first time each stored procedure is called), and assign the values based on parameter order.
            </summary>
            <remarks>
            This method provides no access to output parameters or the stored procedure's return value parameter.
            
            e.g.:  
             DataSet ds = ExecuteDataset(trans, "GetOrders", 24, 36);
            </remarks>
            <param name="transaction">a valid OracleTransaction</param>
            <param name="spName">the name of the stored procedure</param>
            <param name="parameterValues">an array of objects to be assigned as the input values of the stored procedure</param>
            <returns>a dataset containing the resultset generated by the command</returns>
        </member>
        <member name="M:Tylers.ApplicationBlocks.Data.OraHelper.ExecuteReader(System.Data.OracleClient.OracleConnection,System.Data.OracleClient.OracleTransaction,System.Data.CommandType,System.String,System.Data.OracleClient.OracleParameter[],Tylers.ApplicationBlocks.Data.DbConnectionOwnership)">
            <summary>
            Create and prepare a OracleCommand, and call ExecuteReader with the appropriate CommandBehavior.
            </summary>
            <remarks>
            If we created and opened the connection, we want the connection to be closed when the DataReader is closed.
            
            If the caller provided the connection, we want to leave it to them to manage.
            </remarks>
            <param name="connection">a valid OracleConnection, on which to execute this command</param>
            <param name="transaction">a valid OracleTransaction, or 'null'</param>
            <param name="commandType">the CommandType (stored procedure, text, etc.)</param>
            <param name="commandText">the stored procedure name or PL-SQL command</param>
            <param name="commandParameters">an array of OracleParameters to be associated with the command or 'null' if no parameters are required</param>
            <param name="connectionOwnership">indicates whether the connection parameter was provided by the caller, or created by OraHelper</param>
            <returns>OracleDataReader containing the results of the command</returns>
        </member>
        <member name="M:Tylers.ApplicationBlocks.Data.OraHelper.ExecuteReader(System.String,System.Data.CommandType,System.String)">
            <summary>
            Execute a OracleCommand (that returns a resultset and takes no parameters) against the database specified in 
            the connection string. 
            </summary>
            <remarks>
            e.g.:  
             OracleDataReader dr = ExecuteReader(connString, CommandType.StoredProcedure, "GetOrders");
            </remarks>
            <param name="connectionString">a valid connection string for a OracleConnection</param>
            <param name="commandType">the CommandType (stored procedure, text, etc.)</param>
            <param name="commandText">the stored procedure name or PL-SQL command</param>
            <returns>a OracleDataReader containing the resultset generated by the command</returns>
        </member>
        <member name="M:Tylers.ApplicationBlocks.Data.OraHelper.ExecuteReader(System.String,System.Data.CommandType,System.String,System.Data.OracleClient.OracleParameter[])">
            <summary>
            Execute a OracleCommand (that returns a resultset) against the database specified in the connection string 
            using the provided parameters.
            </summary>
            <remarks>
            e.g.:  
             OracleDataReader dr = ExecuteReader(connString, CommandType.StoredProcedure, "GetOrders", new OracleParameter("@prodid", 24));
            </remarks>
            <param name="connectionString">a valid connection string for a OracleConnection</param>
            <param name="commandType">the CommandType (stored procedure, text, etc.)</param>
            <param name="commandText">the stored procedure name or PL-SQL command</param>
            <param name="commandParameters">an array of OracleParameters used to execute the command</param>
            <returns>a OracleDataReader containing the resultset generated by the command</returns>
        </member>
        <member name="M:Tylers.ApplicationBlocks.Data.OraHelper.ExecuteReader(System.String,System.String,System.Object[])">
            <summary>
            Execute a stored procedure via a OracleCommand (that returns a resultset) against the database specified in 
            the connection string using the provided parameter values.  This method will query the database to discover the parameters for the 
            stored procedure (the first time each stored procedure is called), and assign the values based on parameter order.
            </summary>
            <remarks>
            This method provides no access to output parameters or the stored procedure's return value parameter.
            
            e.g.:  
             OracleDataReader dr = ExecuteReader(connString, "GetOrders", 24, 36);
            </remarks>
            <param name="connectionString">a valid connection string for a OracleConnection</param>
            <param name="spName">the name of the stored procedure</param>
            <param name="parameterValues">an array of objects to be assigned as the input values of the stored procedure</param>
            <returns>a OracleDataReader containing the resultset generated by the command</returns>
        </member>
        <member name="M:Tylers.ApplicationBlocks.Data.OraHelper.ExecuteReader(System.Data.OracleClient.OracleConnection,System.Data.CommandType,System.String)">
            <summary>
            Execute a OracleCommand (that returns a resultset and takes no parameters) against the provided OracleConnection. 
            </summary>
            <remarks>
            e.g.:  
             OracleDataReader dr = ExecuteReader(conn, CommandType.StoredProcedure, "GetOrders");
            </remarks>
            <param name="connection">a valid OracleConnection</param>
            <param name="commandType">the CommandType (stored procedure, text, etc.)</param>
            <param name="commandText">the stored procedure name or PL-SQL command</param>
            <returns>a OracleDataReader containing the resultset generated by the command</returns>
        </member>
        <member name="M:Tylers.ApplicationBlocks.Data.OraHelper.ExecuteReader(System.Data.OracleClient.OracleConnection,System.Data.CommandType,System.String,System.Data.OracleClient.OracleParameter[])">
            <summary>
            Execute a OracleCommand (that returns a resultset) against the specified OracleConnection 
            using the provided parameters.
            </summary>
            <remarks>
            e.g.:  
             OracleDataReader dr = ExecuteReader(conn, CommandType.StoredProcedure, "GetOrders", new OracleParameter("@prodid", 24));
            </remarks>
            <param name="connection">a valid OracleConnection</param>
            <param name="commandType">the CommandType (stored procedure, text, etc.)</param>
            <param name="commandText">the stored procedure name or PL-SQL command</param>
            <param name="commandParameters">an array of OracleParameters used to execute the command</param>
            <returns>a OracleDataReader containing the resultset generated by the command</returns>
        </member>
        <member name="M:Tylers.ApplicationBlocks.Data.OraHelper.ExecuteReader(System.Data.OracleClient.OracleConnection,System.String,System.Object[])">
            <summary>
            Execute a stored procedure via a OracleCommand (that returns a resultset) against the specified OracleConnection 
            using the provided parameter values.  This method will query the database to discover the parameters for the 
            stored procedure (the first time each stored procedure is called), and assign the values based on parameter order.
            </summary>
            <remarks>
            This method provides no access to output parameters or the stored procedure's return value parameter.
            
            e.g.:  
             OracleDataReader dr = ExecuteReader(conn, "GetOrders", 24, 36);
            </remarks>
            <param name="connection">a valid OracleConnection</param>
            <param name="spName">the name of the stored procedure</param>
            <param name="parameterValues">an array of objects to be assigned as the input values of the stored procedure</param>
            <returns>a OracleDataReader containing the resultset generated by the command</returns>
        </member>
        <member name="M:Tylers.ApplicationBlocks.Data.OraHelper.ExecuteReader(System.Data.OracleClient.OracleTransaction,System.Data.CommandType,System.String)">
            <summary>
            Execute a OracleCommand (that returns a resultset and takes no parameters) against the provided OracleTransaction. 
            </summary>
            <remarks>
            e.g.:  
             OracleDataReader dr = ExecuteReader(trans, CommandType.StoredProcedure, "GetOrders");
            </remarks>
            <param name="transaction">a valid OracleTransaction</param>
            <param name="commandType">the CommandType (stored procedure, text, etc.)</param>
            <param name="commandText">the stored procedure name or PL-SQL command</param>
            <returns>a OracleDataReader containing the resultset generated by the command</returns>
        </member>
        <member name="M:Tylers.ApplicationBlocks.Data.OraHelper.ExecuteReader(System.Data.OracleClient.OracleTransaction,System.Data.CommandType,System.String,System.Data.OracleClient.OracleParameter[])">
            <summary>
            Execute a OracleCommand (that returns a resultset) against the specified OracleTransaction
            using the provided parameters.
            </summary>
            <remarks>
            e.g.:  
              OracleDataReader dr = ExecuteReader(trans, CommandType.StoredProcedure, "GetOrders", new OracleParameter("@prodid", 24));
            </remarks>
            <param name="transaction">a valid OracleTransaction</param>
            <param name="commandType">the CommandType (stored procedure, text, etc.)</param>
            <param name="commandText">the stored procedure name or PL-SQL command</param>
            <param name="commandParameters">an array of OracleParameters used to execute the command</param>
            <returns>a OracleDataReader containing the resultset generated by the command</returns>
        </member>
        <member name="M:Tylers.ApplicationBlocks.Data.OraHelper.ExecuteReader(System.Data.OracleClient.OracleTransaction,System.String,System.Object[])">
            <summary>
            Execute a stored procedure via a OracleCommand (that returns a resultset) against the specified
            OracleTransaction using the provided parameter values.  This method will query the database to discover the parameters for the 
            stored procedure (the first time each stored procedure is called), and assign the values based on parameter order.
            </summary>
            <remarks>
            This method provides no access to output parameters or the stored procedure's return value parameter.
            
            e.g.:  
             OracleDataReader dr = ExecuteReader(trans, "GetOrders", 24, 36);
            </remarks>
            <param name="transaction">a valid OracleTransaction</param>
            <param name="spName">the name of the stored procedure</param>
            <param name="parameterValues">an array of objects to be assigned as the input values of the stored procedure</param>
            <returns>a OracleDataReader containing the resultset generated by the command</returns>
        </member>
        <member name="M:Tylers.ApplicationBlocks.Data.OraHelper.ExecuteScalar(System.String,System.Data.CommandType,System.String)">
            <summary>
            Execute a OracleCommand (that returns a 1x1 resultset and takes no parameters) against the database specified in 
            the connection string. 
            </summary>
            <remarks>
            e.g.:  
             int orderCount = (int)ExecuteScalar(connString, CommandType.StoredProcedure, "GetOrderCount");
            </remarks>
            <param name="connectionString">a valid connection string for a OracleConnection</param>
            <param name="commandType">the CommandType (stored procedure, text, etc.)</param>
            <param name="commandText">the stored procedure name or PL-SQL command</param>
            <returns>an object containing the value in the 1x1 resultset generated by the command</returns>
        </member>
        <member name="M:Tylers.ApplicationBlocks.Data.OraHelper.ExecuteScalar(System.String,System.Data.CommandType,System.String,System.Data.OracleClient.OracleParameter[])">
            <summary>
            Execute a OracleCommand (that returns a 1x1 resultset) against the database specified in the connection string 
            using the provided parameters.
            </summary>
            <remarks>
            e.g.:  
             int orderCount = (int)ExecuteScalar(connString, CommandType.StoredProcedure, "GetOrderCount", new OracleParameter("@prodid", 24));
            </remarks>
            <param name="connectionString">a valid connection string for a OracleConnection</param>
            <param name="commandType">the CommandType (stored procedure, text, etc.)</param>
            <param name="commandText">the stored procedure name or PL-SQL command</param>
            <param name="commandParameters">an array of OracleParameters used to execute the command</param>
            <returns>an object containing the value in the 1x1 resultset generated by the command</returns>
        </member>
        <member name="M:Tylers.ApplicationBlocks.Data.OraHelper.ExecuteScalar(System.String,System.String,System.Object[])">
            <summary>
            Execute a stored procedure via a OracleCommand (that returns a 1x1 resultset) against the database specified in 
            the connection string using the provided parameter values.  This method will query the database to discover the parameters for the 
            stored procedure (the first time each stored procedure is called), and assign the values based on parameter order.
            </summary>
            <remarks>
            This method provides no access to output parameters or the stored procedure's return value parameter.
            
            e.g.:  
             int orderCount = (int)ExecuteScalar(connString, "GetOrderCount", 24, 36);
            </remarks>
            <param name="connectionString">a valid connection string for a OracleConnection</param>
            <param name="spName">the name of the stored procedure</param>
            <param name="parameterValues">an array of objects to be assigned as the input values of the stored procedure</param>
            <returns>an object containing the value in the 1x1 resultset generated by the command</returns>
        </member>
        <member name="M:Tylers.ApplicationBlocks.Data.OraHelper.ExecuteScalar(System.Data.OracleClient.OracleConnection,System.Data.CommandType,System.String)">
            <summary>
            Execute a OracleCommand (that returns a 1x1 resultset and takes no parameters) against the provided OracleConnection. 
            </summary>
            <remarks>
            e.g.:  
             int orderCount = (int)ExecuteScalar(conn, CommandType.StoredProcedure, "GetOrderCount");
            </remarks>
            <param name="connection">a valid OracleConnection</param>
            <param name="commandType">the CommandType (stored procedure, text, etc.)</param>
            <param name="commandText">the stored procedure name or PL-SQL command</param>
            <returns>an object containing the value in the 1x1 resultset generated by the command</returns>
        </member>
        <member name="M:Tylers.ApplicationBlocks.Data.OraHelper.ExecuteScalar(System.Data.OracleClient.OracleConnection,System.Data.CommandType,System.String,System.Data.OracleClient.OracleParameter[])">
            <summary>
            Execute a OracleCommand (that returns a 1x1 resultset) against the specified OracleConnection 
            using the provided parameters.
            </summary>
            <remarks>
            e.g.:  
             int orderCount = (int)ExecuteScalar(conn, CommandType.StoredProcedure, "GetOrderCount", new OracleParameter("@prodid", 24));
            </remarks>
            <param name="connection">a valid OracleConnection</param>
            <param name="commandType">the CommandType (stored procedure, text, etc.)</param>
            <param name="commandText">the stored procedure name or PL-SQL command</param>
            <param name="commandParameters">an array of OracleParameters used to execute the command</param>
            <returns>an object containing the value in the 1x1 resultset generated by the command</returns>
        </member>
        <member name="M:Tylers.ApplicationBlocks.Data.OraHelper.ExecuteScalar(System.Data.OracleClient.OracleConnection,System.String,System.Object[])">
            <summary>
            Execute a stored procedure via a OracleCommand (that returns a 1x1 resultset) against the specified OracleConnection 
            using the provided parameter values.  This method will query the database to discover the parameters for the 
            stored procedure (the first time each stored procedure is called), and assign the values based on parameter order.
            </summary>
            <remarks>
            This method provides no access to output parameters or the stored procedure's return value parameter.
            
            e.g.:  
             int orderCount = (int)ExecuteScalar(conn, "GetOrderCount", 24, 36);
            </remarks>
            <param name="connection">a valid OracleConnection</param>
            <param name="spName">the name of the stored procedure</param>
            <param name="parameterValues">an array of objects to be assigned as the input values of the stored procedure</param>
            <returns>an object containing the value in the 1x1 resultset generated by the command</returns>
        </member>
        <member name="M:Tylers.ApplicationBlocks.Data.OraHelper.ExecuteScalar(System.Data.OracleClient.OracleTransaction,System.Data.CommandType,System.String)">
            <summary>
            Execute a OracleCommand (that returns a 1x1 resultset and takes no parameters) against the provided OracleTransaction. 
            </summary>
            <remarks>
            e.g.:  
             int orderCount = (int)ExecuteScalar(trans, CommandType.StoredProcedure, "GetOrderCount");
            </remarks>
            <param name="transaction">a valid OracleTransaction</param>
            <param name="commandType">the CommandType (stored procedure, text, etc.)</param>
            <param name="commandText">the stored procedure name or PL-SQL command</param>
            <returns>an object containing the value in the 1x1 resultset generated by the command</returns>
        </member>
        <member name="M:Tylers.ApplicationBlocks.Data.OraHelper.ExecuteScalar(System.Data.OracleClient.OracleTransaction,System.Data.CommandType,System.String,System.Data.OracleClient.OracleParameter[])">
            <summary>
            Execute a OracleCommand (that returns a 1x1 resultset) against the specified OracleTransaction
            using the provided parameters.
            </summary>
            <remarks>
            e.g.:  
             int orderCount = (int)ExecuteScalar(trans, CommandType.StoredProcedure, "GetOrderCount", new OracleParameter("@prodid", 24));
            </remarks>
            <param name="transaction">a valid OracleTransaction</param>
            <param name="commandType">the CommandType (stored procedure, text, etc.)</param>
            <param name="commandText">the stored procedure name or PL-SQL command</param>
            <param name="commandParameters">an array of OracleParameters used to execute the command</param>
            <returns>an object containing the value in the 1x1 resultset generated by the command</returns>
        </member>
        <member name="M:Tylers.ApplicationBlocks.Data.OraHelper.ExecuteScalar(System.Data.OracleClient.OracleTransaction,System.String,System.Object[])">
            <summary>
            Execute a stored procedure via a OracleCommand (that returns a 1x1 resultset) against the specified
            OracleTransaction using the provided parameter values.  This method will query the database to discover the parameters for the 
            stored procedure (the first time each stored procedure is called), and assign the values based on parameter order.
            </summary>
            <remarks>
            This method provides no access to output parameters or the stored procedure's return value parameter.
            
            e.g.:  
             int orderCount = (int)ExecuteScalar(trans, "GetOrderCount", 24, 36);
            </remarks>
            <param name="transaction">a valid OracleTransaction</param>
            <param name="spName">the name of the stored procedure</param>
            <param name="parameterValues">an array of objects to be assigned as the input values of the stored procedure</param>
            <returns>an object containing the value in the 1x1 resultset generated by the command</returns>
        </member>
        <member name="T:Tylers.ApplicationBlocks.Data.OraHelperParameterCache">
            <summary>
            OraHelperParameterCache provides functions to leverage a static cache of procedure parameters, and the
            ability to discover parameters for stored procedures at run-time.
            </summary>
        </member>
        <member name="M:Tylers.ApplicationBlocks.Data.OraHelperParameterCache.DiscoverSpParameterSet(System.String,System.String,System.Boolean)">
            <summary>
            resolve at run time the appropriate set of OracleParameters for a stored procedure
            </summary>
            <param name="connectionString">a valid connection string for a OracleConnection</param>
            <param name="spName">the name of the stored procedure</param>
            <param name="includeReturnValueParameter">whether or not to include their return value parameter</param>
            <returns></returns>
        </member>
        <member name="M:Tylers.ApplicationBlocks.Data.OraHelperParameterCache.CacheParameterSet(System.String,System.String,System.Data.OracleClient.OracleParameter[])">
            <summary>
            add parameter array to the cache
            </summary>
            <param name="connectionString">a valid connection string for a OracleConnection</param>
            <param name="commandText">the stored procedure name or PL-SQL command</param>
            <param name="commandParameters">an array of OracleParameters to be cached</param>
        </member>
        <member name="M:Tylers.ApplicationBlocks.Data.OraHelperParameterCache.GetCachedParameterSet(System.String,System.String)">
            <summary>
            retrieve a parameter array from the cache
            </summary>
            <param name="connectionString">a valid connection string for a OracleConnection</param>
            <param name="commandText">the stored procedure name or PL-SQL command</param>
            <returns>an array of OracleParameters</returns>
        </member>
        <member name="M:Tylers.ApplicationBlocks.Data.OraHelperParameterCache.GetSpParameterSet(System.String,System.String)">
            <summary>
            Retrieves the set of OracleParameters appropriate for the stored procedure
            </summary>
            <remarks>
            This method will query the database for this information, and then store it in a cache for future requests.
            </remarks>
            <param name="connectionString">a valid connection string for a OracleConnection</param>
            <param name="spName">the name of the stored procedure</param>
            <returns>an array of OracleParameters</returns>
        </member>
        <member name="M:Tylers.ApplicationBlocks.Data.OraHelperParameterCache.GetSpParameterSet(System.String,System.String,System.Boolean)">
            <summary>
            Retrieves the set of OracleParameters appropriate for the stored procedure
            </summary>
            <remarks>
            This method will query the database for this information, and then store it in a cache for future requests.
            </remarks>
            <param name="connectionString">a valid connection string for a OracleConnection</param>
            <param name="spName">the name of the stored procedure</param>
            <param name="includeReturnValueParameter">a bool value indicating whether the return value parameter should be included in the results</param>
            <returns>an array of OracleParameters</returns>
        </member>
        <member name="T:Tylers.ApplicationBlocks.Data.SqlHelper">
            <summary>
            The SqlHelper class is intended to encapsulate high performance, scalable best practices for 
            common uses of SqlClient
            </summary>
        </member>
        <member name="M:Tylers.ApplicationBlocks.Data.SqlHelper.AttachParameters(System.Data.SqlClient.SqlCommand,System.Data.SqlClient.SqlParameter[])">
            <summary>
            This method is used to attach array of SqlParameters to a SqlCommand.
            
            This method will assign a value of DbNull to any parameter with a direction of
            InputOutput and a value of null.  
            
            This behavior will prevent default values from being used, but
            this will be the less common case than an intended pure output parameter (derived as InputOutput)
            where the user provided no input value.
            </summary>
            <param name="command">The command to which the parameters will be added</param>
            <param name="commandParameters">An array of SqlParameters to be added to command</param>
        </member>
        <member name="M:Tylers.ApplicationBlocks.Data.SqlHelper.AssignParameterValues(System.Data.SqlClient.SqlParameter[],System.Data.DataRow)">
            <summary>
            This method assigns dataRow column values to an array of SqlParameters
            </summary>
            <param name="commandParameters">Array of SqlParameters to be assigned values</param>
            <param name="dataRow">The dataRow used to hold the stored procedure's parameter values</param>
        </member>
        <member name="M:Tylers.ApplicationBlocks.Data.SqlHelper.AssignParameterValues(System.Data.SqlClient.SqlParameter[],System.Object[])">
            <summary>
            This method assigns an array of values to an array of SqlParameters
            </summary>
            <param name="commandParameters">Array of SqlParameters to be assigned values</param>
            <param name="parameterValues">Array of objects holding the values to be assigned</param>
        </member>
        <member name="M:Tylers.ApplicationBlocks.Data.SqlHelper.PrepareCommand(System.Data.SqlClient.SqlCommand,System.Data.SqlClient.SqlConnection,System.Data.SqlClient.SqlTransaction,System.Data.CommandType,System.String,System.Data.SqlClient.SqlParameter[],System.Boolean@)">
            <summary>
            This method opens (if necessary) and assigns a connection, transaction, command type and parameters 
            to the provided command
            </summary>
            <param name="command">The SqlCommand to be prepared</param>
            <param name="connection">A valid SqlConnection, on which to execute this command</param>
            <param name="transaction">A valid SqlTransaction, or 'null'</param>
            <param name="commandType">The CommandType (stored procedure, text, etc.)</param>
            <param name="commandText">The stored procedure name or T-SQL command</param>
            <param name="commandParameters">An array of SqlParameters to be associated with the command or 'null' if no parameters are required</param>
            <param name="mustCloseConnection"><c>true</c> if the connection was opened by the method, otherwose is false.</param>
        </member>
        <member name="M:Tylers.ApplicationBlocks.Data.SqlHelper.ExecuteNonQuery(System.String,System.Data.CommandType,System.String)">
            <summary>
            Execute a SqlCommand (that returns no resultset and takes no parameters) against the database specified in 
            the connection string
            </summary>
            <remarks>
            e.g.:  
             int result = ExecuteNonQuery(connString, CommandType.StoredProcedure, "PublishOrders");
            </remarks>
            <param name="connectionString">A valid connection string for a SqlConnection</param>
            <param name="commandType">The CommandType (stored procedure, text, etc.)</param>
            <param name="commandText">The stored procedure name or T-SQL command</param>
            <returns>An int representing the number of rows affected by the command</returns>
        </member>
        <member name="M:Tylers.ApplicationBlocks.Data.SqlHelper.ExecuteNonQuery(System.String,System.Data.CommandType,System.String,System.Data.SqlClient.SqlParameter[])">
            <summary>
            Execute a SqlCommand (that returns no resultset) against the database specified in the connection string 
            using the provided parameters
            </summary>
            <remarks>
            e.g.:  
             int result = ExecuteNonQuery(connString, CommandType.StoredProcedure, "PublishOrders", new SqlParameter("@prodid", 24));
            </remarks>
            <param name="connectionString">A valid connection string for a SqlConnection</param>
            <param name="commandType">The CommandType (stored procedure, text, etc.)</param>
            <param name="commandText">The stored procedure name or T-SQL command</param>
            <param name="commandParameters">An array of SqlParamters used to execute the command</param>
            <returns>An int representing the number of rows affected by the command</returns>
        </member>
        <member name="M:Tylers.ApplicationBlocks.Data.SqlHelper.ExecuteNonQuery(System.String,System.String,System.Object[])">
            <summary>
            Execute a stored procedure via a SqlCommand (that returns no resultset) against the database specified in 
            the connection string using the provided parameter values.  This method will query the database to discover the parameters for the 
            stored procedure (the first time each stored procedure is called), and assign the values based on parameter order.
            </summary>
            <remarks>
            This method provides no access to output parameters or the stored procedure's return value parameter.
            
            e.g.:  
             int result = ExecuteNonQuery(connString, "PublishOrders", 24, 36);
            </remarks>
            <param name="connectionString">A valid connection string for a SqlConnection</param>
            <param name="spName">The name of the stored prcedure</param>
            <param name="parameterValues">An array of objects to be assigned as the input values of the stored procedure</param>
            <returns>An int representing the number of rows affected by the command</returns>
        </member>
        <member name="M:Tylers.ApplicationBlocks.Data.SqlHelper.ExecuteNonQuery(System.Data.SqlClient.SqlConnection,System.Data.CommandType,System.String)">
            <summary>
            Execute a SqlCommand (that returns no resultset and takes no parameters) against the provided SqlConnection. 
            </summary>
            <remarks>
            e.g.:  
             int result = ExecuteNonQuery(conn, CommandType.StoredProcedure, "PublishOrders");
            </remarks>
            <param name="connection">A valid SqlConnection</param>
            <param name="commandType">The CommandType (stored procedure, text, etc.)</param>
            <param name="commandText">The stored procedure name or T-SQL command</param>
            <returns>An int representing the number of rows affected by the command</returns>
        </member>
        <member name="M:Tylers.ApplicationBlocks.Data.SqlHelper.ExecuteNonQuery(System.Data.SqlClient.SqlConnection,System.Data.CommandType,System.String,System.Data.SqlClient.SqlParameter[])">
            <summary>
            Execute a SqlCommand (that returns no resultset) against the specified SqlConnection 
            using the provided parameters.
            </summary>
            <remarks>
            e.g.:  
             int result = ExecuteNonQuery(conn, CommandType.StoredProcedure, "PublishOrders", new SqlParameter("@prodid", 24));
            </remarks>
            <param name="connection">A valid SqlConnection</param>
            <param name="commandType">The CommandType (stored procedure, text, etc.)</param>
            <param name="commandText">The stored procedure name or T-SQL command</param>
            <param name="commandParameters">An array of SqlParamters used to execute the command</param>
            <returns>An int representing the number of rows affected by the command</returns>
        </member>
        <member name="M:Tylers.ApplicationBlocks.Data.SqlHelper.ExecuteNonQuery(System.Data.SqlClient.SqlConnection,System.String,System.Object[])">
            <summary>
            Execute a stored procedure via a SqlCommand (that returns no resultset) against the specified SqlConnection 
            using the provided parameter values.  This method will query the database to discover the parameters for the 
            stored procedure (the first time each stored procedure is called), and assign the values based on parameter order.
            </summary>
            <remarks>
            This method provides no access to output parameters or the stored procedure's return value parameter.
            
            e.g.:  
             int result = ExecuteNonQuery(conn, "PublishOrders", 24, 36);
            </remarks>
            <param name="connection">A valid SqlConnection</param>
            <param name="spName">The name of the stored procedure</param>
            <param name="parameterValues">An array of objects to be assigned as the input values of the stored procedure</param>
            <returns>An int representing the number of rows affected by the command</returns>
        </member>
        <member name="M:Tylers.ApplicationBlocks.Data.SqlHelper.ExecuteNonQuery(System.Data.SqlClient.SqlTransaction,System.Data.CommandType,System.String)">
            <summary>
            Execute a SqlCommand (that returns no resultset and takes no parameters) against the provided SqlTransaction. 
            </summary>
            <remarks>
            e.g.:  
             int result = ExecuteNonQuery(trans, CommandType.StoredProcedure, "PublishOrders");
            </remarks>
            <param name="transaction">A valid SqlTransaction</param>
            <param name="commandType">The CommandType (stored procedure, text, etc.)</param>
            <param name="commandText">The stored procedure name or T-SQL command</param>
            <returns>An int representing the number of rows affected by the command</returns>
        </member>
        <member name="M:Tylers.ApplicationBlocks.Data.SqlHelper.ExecuteNonQuery(System.Data.SqlClient.SqlTransaction,System.Data.CommandType,System.String,System.Data.SqlClient.SqlParameter[])">
            <summary>
            Execute a SqlCommand (that returns no resultset) against the specified SqlTransaction
            using the provided parameters.
            </summary>
            <remarks>
            e.g.:  
             int result = ExecuteNonQuery(trans, CommandType.StoredProcedure, "GetOrders", new SqlParameter("@prodid", 24));
            </remarks>
            <param name="transaction">A valid SqlTransaction</param>
            <param name="commandType">The CommandType (stored procedure, text, etc.)</param>
            <param name="commandText">The stored procedure name or T-SQL command</param>
            <param name="commandParameters">An array of SqlParamters used to execute the command</param>
            <returns>An int representing the number of rows affected by the command</returns>
        </member>
        <member name="M:Tylers.ApplicationBlocks.Data.SqlHelper.ExecuteNonQuery(System.Data.SqlClient.SqlTransaction,System.String,System.Object[])">
            <summary>
            Execute a stored procedure via a SqlCommand (that returns no resultset) against the specified 
            SqlTransaction using the provided parameter values.  This method will query the database to discover the parameters for the 
            stored procedure (the first time each stored procedure is called), and assign the values based on parameter order.
            </summary>
            <remarks>
            This method provides no access to output parameters or the stored procedure's return value parameter.
            
            e.g.:  
             int result = ExecuteNonQuery(conn, trans, "PublishOrders", 24, 36);
            </remarks>
            <param name="transaction">A valid SqlTransaction</param>
            <param name="spName">The name of the stored procedure</param>
            <param name="parameterValues">An array of objects to be assigned as the input values of the stored procedure</param>
            <returns>An int representing the number of rows affected by the command</returns>
        </member>
        <member name="M:Tylers.ApplicationBlocks.Data.SqlHelper.ExecuteDataset(System.String,System.Data.CommandType,System.String)">
            <summary>
            Execute a SqlCommand (that returns a resultset and takes no parameters) against the database specified in 
            the connection string. 
            </summary>
            <remarks>
            e.g.:  
             DataSet ds = ExecuteDataset(connString, CommandType.StoredProcedure, "GetOrders");
            </remarks>
            <param name="connectionString">A valid connection string for a SqlConnection</param>
            <param name="commandType">The CommandType (stored procedure, text, etc.)</param>
            <param name="commandText">The stored procedure name or T-SQL command</param>
            <returns>A dataset containing the resultset generated by the command</returns>
        </member>
        <member name="M:Tylers.ApplicationBlocks.Data.SqlHelper.ExecuteDataset(System.String,System.Data.CommandType,System.String,System.Data.SqlClient.SqlParameter[])">
            <summary>
            Execute a SqlCommand (that returns a resultset) against the database specified in the connection string 
            using the provided parameters.
            </summary>
            <remarks>
            e.g.:  
             DataSet ds = ExecuteDataset(connString, CommandType.StoredProcedure, "GetOrders", new SqlParameter("@prodid", 24));
            </remarks>
            <param name="connectionString">A valid connection string for a SqlConnection</param>
            <param name="commandType">The CommandType (stored procedure, text, etc.)</param>
            <param name="commandText">The stored procedure name or T-SQL command</param>
            <param name="commandParameters">An array of SqlParamters used to execute the command</param>
            <returns>A dataset containing the resultset generated by the command</returns>
        </member>
        <member name="M:Tylers.ApplicationBlocks.Data.SqlHelper.ExecuteDataset(System.String,System.String,System.Object[])">
            <summary>
            Execute a stored procedure via a SqlCommand (that returns a resultset) against the database specified in 
            the connection string using the provided parameter values.  This method will query the database to discover the parameters for the 
            stored procedure (the first time each stored procedure is called), and assign the values based on parameter order.
            </summary>
            <remarks>
            This method provides no access to output parameters or the stored procedure's return value parameter.
            
            e.g.:  
             DataSet ds = ExecuteDataset(connString, "GetOrders", 24, 36);
            </remarks>
            <param name="connectionString">A valid connection string for a SqlConnection</param>
            <param name="spName">The name of the stored procedure</param>
            <param name="parameterValues">An array of objects to be assigned as the input values of the stored procedure</param>
            <returns>A dataset containing the resultset generated by the command</returns>
        </member>
        <member name="M:Tylers.ApplicationBlocks.Data.SqlHelper.ExecuteDataset(System.Data.SqlClient.SqlConnection,System.Data.CommandType,System.String)">
            <summary>
            Execute a SqlCommand (that returns a resultset and takes no parameters) against the provided SqlConnection. 
            </summary>
            <remarks>
            e.g.:  
             DataSet ds = ExecuteDataset(conn, CommandType.StoredProcedure, "GetOrders");
            </remarks>
            <param name="connection">A valid SqlConnection</param>
            <param name="commandType">The CommandType (stored procedure, text, etc.)</param>
            <param name="commandText">The stored procedure name or T-SQL command</param>
            <returns>A dataset containing the resultset generated by the command</returns>
        </member>
        <member name="M:Tylers.ApplicationBlocks.Data.SqlHelper.ExecuteDataset(System.Data.SqlClient.SqlConnection,System.Data.CommandType,System.String,System.Data.SqlClient.SqlParameter[])">
            <summary>
            Execute a SqlCommand (that returns a resultset) against the specified SqlConnection 
            using the provided parameters.
            </summary>
            <remarks>
            e.g.:  
             DataSet ds = ExecuteDataset(conn, CommandType.StoredProcedure, "GetOrders", new SqlParameter("@prodid", 24));
            </remarks>
            <param name="connection">A valid SqlConnection</param>
            <param name="commandType">The CommandType (stored procedure, text, etc.)</param>
            <param name="commandText">The stored procedure name or T-SQL command</param>
            <param name="commandParameters">An array of SqlParamters used to execute the command</param>
            <returns>A dataset containing the resultset generated by the command</returns>
        </member>
        <member name="M:Tylers.ApplicationBlocks.Data.SqlHelper.ExecuteDataset(System.Data.SqlClient.SqlConnection,System.String,System.Object[])">
            <summary>
            Execute a stored procedure via a SqlCommand (that returns a resultset) against the specified SqlConnection 
            using the provided parameter values.  This method will query the database to discover the parameters for the 
            stored procedure (the first time each stored procedure is called), and assign the values based on parameter order.
            </summary>
            <remarks>
            This method provides no access to output parameters or the stored procedure's return value parameter.
            
            e.g.:  
             DataSet ds = ExecuteDataset(conn, "GetOrders", 24, 36);
            </remarks>
            <param name="connection">A valid SqlConnection</param>
            <param name="spName">The name of the stored procedure</param>
            <param name="parameterValues">An array of objects to be assigned as the input values of the stored procedure</param>
            <returns>A dataset containing the resultset generated by the command</returns>
        </member>
        <member name="M:Tylers.ApplicationBlocks.Data.SqlHelper.ExecuteDataset(System.Data.SqlClient.SqlTransaction,System.Data.CommandType,System.String)">
            <summary>
            Execute a SqlCommand (that returns a resultset and takes no parameters) against the provided SqlTransaction. 
            </summary>
            <remarks>
            e.g.:  
             DataSet ds = ExecuteDataset(trans, CommandType.StoredProcedure, "GetOrders");
            </remarks>
            <param name="transaction">A valid SqlTransaction</param>
            <param name="commandType">The CommandType (stored procedure, text, etc.)</param>
            <param name="commandText">The stored procedure name or T-SQL command</param>
            <returns>A dataset containing the resultset generated by the command</returns>
        </member>
        <member name="M:Tylers.ApplicationBlocks.Data.SqlHelper.ExecuteDataset(System.Data.SqlClient.SqlTransaction,System.Data.CommandType,System.String,System.Data.SqlClient.SqlParameter[])">
            <summary>
            Execute a SqlCommand (that returns a resultset) against the specified SqlTransaction
            using the provided parameters.
            </summary>
            <remarks>
            e.g.:  
             DataSet ds = ExecuteDataset(trans, CommandType.StoredProcedure, "GetOrders", new SqlParameter("@prodid", 24));
            </remarks>
            <param name="transaction">A valid SqlTransaction</param>
            <param name="commandType">The CommandType (stored procedure, text, etc.)</param>
            <param name="commandText">The stored procedure name or T-SQL command</param>
            <param name="commandParameters">An array of SqlParamters used to execute the command</param>
            <returns>A dataset containing the resultset generated by the command</returns>
        </member>
        <member name="M:Tylers.ApplicationBlocks.Data.SqlHelper.ExecuteDataset(System.Data.SqlClient.SqlTransaction,System.String,System.Object[])">
            <summary>
            Execute a stored procedure via a SqlCommand (that returns a resultset) against the specified 
            SqlTransaction using the provided parameter values.  This method will query the database to discover the parameters for the 
            stored procedure (the first time each stored procedure is called), and assign the values based on parameter order.
            </summary>
            <remarks>
            This method provides no access to output parameters or the stored procedure's return value parameter.
            
            e.g.:  
             DataSet ds = ExecuteDataset(trans, "GetOrders", 24, 36);
            </remarks>
            <param name="transaction">A valid SqlTransaction</param>
            <param name="spName">The name of the stored procedure</param>
            <param name="parameterValues">An array of objects to be assigned as the input values of the stored procedure</param>
            <returns>A dataset containing the resultset generated by the command</returns>
        </member>
        <member name="M:Tylers.ApplicationBlocks.Data.SqlHelper.ExecuteReader(System.Data.SqlClient.SqlConnection,System.Data.SqlClient.SqlTransaction,System.Data.CommandType,System.String,System.Data.SqlClient.SqlParameter[],Tylers.ApplicationBlocks.Data.SqlHelper.SqlConnectionOwnership)">
            <summary>
            Create and prepare a SqlCommand, and call ExecuteReader with the appropriate CommandBehavior.
            </summary>
            <remarks>
            If we created and opened the connection, we want the connection to be closed when the DataReader is closed.
            
            If the caller provided the connection, we want to leave it to them to manage.
            </remarks>
            <param name="connection">A valid SqlConnection, on which to execute this command</param>
            <param name="transaction">A valid SqlTransaction, or 'null'</param>
            <param name="commandType">The CommandType (stored procedure, text, etc.)</param>
            <param name="commandText">The stored procedure name or T-SQL command</param>
            <param name="commandParameters">An array of SqlParameters to be associated with the command or 'null' if no parameters are required</param>
            <param name="connectionOwnership">Indicates whether the connection parameter was provided by the caller, or created by SqlHelper</param>
            <returns>SqlDataReader containing the results of the command</returns>
        </member>
        <member name="M:Tylers.ApplicationBlocks.Data.SqlHelper.ExecuteReader(System.String,System.Data.CommandType,System.String)">
            <summary>
            Execute a SqlCommand (that returns a resultset and takes no parameters) against the database specified in 
            the connection string. 
            </summary>
            <remarks>
            e.g.:  
             SqlDataReader dr = ExecuteReader(connString, CommandType.StoredProcedure, "GetOrders");
            </remarks>
            <param name="connectionString">A valid connection string for a SqlConnection</param>
            <param name="commandType">The CommandType (stored procedure, text, etc.)</param>
            <param name="commandText">The stored procedure name or T-SQL command</param>
            <returns>A SqlDataReader containing the resultset generated by the command</returns>
        </member>
        <member name="M:Tylers.ApplicationBlocks.Data.SqlHelper.ExecuteReader(System.String,System.Data.CommandType,System.String,System.Data.SqlClient.SqlParameter[])">
            <summary>
            Execute a SqlCommand (that returns a resultset) against the database specified in the connection string 
            using the provided parameters.
            </summary>
            <remarks>
            e.g.:  
             SqlDataReader dr = ExecuteReader(connString, CommandType.StoredProcedure, "GetOrders", new SqlParameter("@prodid", 24));
            </remarks>
            <param name="connectionString">A valid connection string for a SqlConnection</param>
            <param name="commandType">The CommandType (stored procedure, text, etc.)</param>
            <param name="commandText">The stored procedure name or T-SQL command</param>
            <param name="commandParameters">An array of SqlParamters used to execute the command</param>
            <returns>A SqlDataReader containing the resultset generated by the command</returns>
        </member>
        <member name="M:Tylers.ApplicationBlocks.Data.SqlHelper.ExecuteReader(System.String,System.String,System.Object[])">
            <summary>
            Execute a stored procedure via a SqlCommand (that returns a resultset) against the database specified in 
            the connection string using the provided parameter values.  This method will query the database to discover the parameters for the 
            stored procedure (the first time each stored procedure is called), and assign the values based on parameter order.
            </summary>
            <remarks>
            This method provides no access to output parameters or the stored procedure's return value parameter.
            
            e.g.:  
             SqlDataReader dr = ExecuteReader(connString, "GetOrders", 24, 36);
            </remarks>
            <param name="connectionString">A valid connection string for a SqlConnection</param>
            <param name="spName">The name of the stored procedure</param>
            <param name="parameterValues">An array of objects to be assigned as the input values of the stored procedure</param>
            <returns>A SqlDataReader containing the resultset generated by the command</returns>
        </member>
        <member name="M:Tylers.ApplicationBlocks.Data.SqlHelper.ExecuteReader(System.Data.SqlClient.SqlConnection,System.Data.CommandType,System.String)">
            <summary>
            Execute a SqlCommand (that returns a resultset and takes no parameters) against the provided SqlConnection. 
            </summary>
            <remarks>
            e.g.:  
             SqlDataReader dr = ExecuteReader(conn, CommandType.StoredProcedure, "GetOrders");
            </remarks>
            <param name="connection">A valid SqlConnection</param>
            <param name="commandType">The CommandType (stored procedure, text, etc.)</param>
            <param name="commandText">The stored procedure name or T-SQL command</param>
            <returns>A SqlDataReader containing the resultset generated by the command</returns>
        </member>
        <member name="M:Tylers.ApplicationBlocks.Data.SqlHelper.ExecuteReader(System.Data.SqlClient.SqlConnection,System.Data.CommandType,System.String,System.Data.SqlClient.SqlParameter[])">
            <summary>
            Execute a SqlCommand (that returns a resultset) against the specified SqlConnection 
            using the provided parameters.
            </summary>
            <remarks>
            e.g.:  
             SqlDataReader dr = ExecuteReader(conn, CommandType.StoredProcedure, "GetOrders", new SqlParameter("@prodid", 24));
            </remarks>
            <param name="connection">A valid SqlConnection</param>
            <param name="commandType">The CommandType (stored procedure, text, etc.)</param>
            <param name="commandText">The stored procedure name or T-SQL command</param>
            <param name="commandParameters">An array of SqlParamters used to execute the command</param>
            <returns>A SqlDataReader containing the resultset generated by the command</returns>
        </member>
        <member name="M:Tylers.ApplicationBlocks.Data.SqlHelper.ExecuteReader(System.Data.SqlClient.SqlConnection,System.String,System.Object[])">
            <summary>
            Execute a stored procedure via a SqlCommand (that returns a resultset) against the specified SqlConnection 
            using the provided parameter values.  This method will query the database to discover the parameters for the 
            stored procedure (the first time each stored procedure is called), and assign the values based on parameter order.
            </summary>
            <remarks>
            This method provides no access to output parameters or the stored procedure's return value parameter.
            
            e.g.:  
             SqlDataReader dr = ExecuteReader(conn, "GetOrders", 24, 36);
            </remarks>
            <param name="connection">A valid SqlConnection</param>
            <param name="spName">The name of the stored procedure</param>
            <param name="parameterValues">An array of objects to be assigned as the input values of the stored procedure</param>
            <returns>A SqlDataReader containing the resultset generated by the command</returns>
        </member>
        <member name="M:Tylers.ApplicationBlocks.Data.SqlHelper.ExecuteReader(System.Data.SqlClient.SqlTransaction,System.Data.CommandType,System.String)">
            <summary>
            Execute a SqlCommand (that returns a resultset and takes no parameters) against the provided SqlTransaction. 
            </summary>
            <remarks>
            e.g.:  
             SqlDataReader dr = ExecuteReader(trans, CommandType.StoredProcedure, "GetOrders");
            </remarks>
            <param name="transaction">A valid SqlTransaction</param>
            <param name="commandType">The CommandType (stored procedure, text, etc.)</param>
            <param name="commandText">The stored procedure name or T-SQL command</param>
            <returns>A SqlDataReader containing the resultset generated by the command</returns>
        </member>
        <member name="M:Tylers.ApplicationBlocks.Data.SqlHelper.ExecuteReader(System.Data.SqlClient.SqlTransaction,System.Data.CommandType,System.String,System.Data.SqlClient.SqlParameter[])">
            <summary>
            Execute a SqlCommand (that returns a resultset) against the specified SqlTransaction
            using the provided parameters.
            </summary>
            <remarks>
            e.g.:  
              SqlDataReader dr = ExecuteReader(trans, CommandType.StoredProcedure, "GetOrders", new SqlParameter("@prodid", 24));
            </remarks>
            <param name="transaction">A valid SqlTransaction</param>
            <param name="commandType">The CommandType (stored procedure, text, etc.)</param>
            <param name="commandText">The stored procedure name or T-SQL command</param>
            <param name="commandParameters">An array of SqlParamters used to execute the command</param>
            <returns>A SqlDataReader containing the resultset generated by the command</returns>
        </member>
        <member name="M:Tylers.ApplicationBlocks.Data.SqlHelper.ExecuteReader(System.Data.SqlClient.SqlTransaction,System.String,System.Object[])">
            <summary>
            Execute a stored procedure via a SqlCommand (that returns a resultset) against the specified
            SqlTransaction using the provided parameter values.  This method will query the database to discover the parameters for the 
            stored procedure (the first time each stored procedure is called), and assign the values based on parameter order.
            </summary>
            <remarks>
            This method provides no access to output parameters or the stored procedure's return value parameter.
            
            e.g.:  
             SqlDataReader dr = ExecuteReader(trans, "GetOrders", 24, 36);
            </remarks>
            <param name="transaction">A valid SqlTransaction</param>
            <param name="spName">The name of the stored procedure</param>
            <param name="parameterValues">An array of objects to be assigned as the input values of the stored procedure</param>
            <returns>A SqlDataReader containing the resultset generated by the command</returns>
        </member>
        <member name="M:Tylers.ApplicationBlocks.Data.SqlHelper.ExecuteScalar(System.String,System.Data.CommandType,System.String)">
            <summary>
            Execute a SqlCommand (that returns a 1x1 resultset and takes no parameters) against the database specified in 
            the connection string. 
            </summary>
            <remarks>
            e.g.:  
             int orderCount = (int)ExecuteScalar(connString, CommandType.StoredProcedure, "GetOrderCount");
            </remarks>
            <param name="connectionString">A valid connection string for a SqlConnection</param>
            <param name="commandType">The CommandType (stored procedure, text, etc.)</param>
            <param name="commandText">The stored procedure name or T-SQL command</param>
            <returns>An object containing the value in the 1x1 resultset generated by the command</returns>
        </member>
        <member name="M:Tylers.ApplicationBlocks.Data.SqlHelper.ExecuteScalar(System.String,System.Data.CommandType,System.String,System.Data.SqlClient.SqlParameter[])">
            <summary>
            Execute a SqlCommand (that returns a 1x1 resultset) against the database specified in the connection string 
            using the provided parameters.
            </summary>
            <remarks>
            e.g.:  
             int orderCount = (int)ExecuteScalar(connString, CommandType.StoredProcedure, "GetOrderCount", new SqlParameter("@prodid", 24));
            </remarks>
            <param name="connectionString">A valid connection string for a SqlConnection</param>
            <param name="commandType">The CommandType (stored procedure, text, etc.)</param>
            <param name="commandText">The stored procedure name or T-SQL command</param>
            <param name="commandParameters">An array of SqlParamters used to execute the command</param>
            <returns>An object containing the value in the 1x1 resultset generated by the command</returns>
        </member>
        <member name="M:Tylers.ApplicationBlocks.Data.SqlHelper.ExecuteScalar(System.String,System.String,System.Object[])">
            <summary>
            Execute a stored procedure via a SqlCommand (that returns a 1x1 resultset) against the database specified in 
            the connection string using the provided parameter values.  This method will query the database to discover the parameters for the 
            stored procedure (the first time each stored procedure is called), and assign the values based on parameter order.
            </summary>
            <remarks>
            This method provides no access to output parameters or the stored procedure's return value parameter.
            
            e.g.:  
             int orderCount = (int)ExecuteScalar(connString, "GetOrderCount", 24, 36);
            </remarks>
            <param name="connectionString">A valid connection string for a SqlConnection</param>
            <param name="spName">The name of the stored procedure</param>
            <param name="parameterValues">An array of objects to be assigned as the input values of the stored procedure</param>
            <returns>An object containing the value in the 1x1 resultset generated by the command</returns>
        </member>
        <member name="M:Tylers.ApplicationBlocks.Data.SqlHelper.ExecuteScalar(System.Data.SqlClient.SqlConnection,System.Data.CommandType,System.String)">
            <summary>
            Execute a SqlCommand (that returns a 1x1 resultset and takes no parameters) against the provided SqlConnection. 
            </summary>
            <remarks>
            e.g.:  
             int orderCount = (int)ExecuteScalar(conn, CommandType.StoredProcedure, "GetOrderCount");
            </remarks>
            <param name="connection">A valid SqlConnection</param>
            <param name="commandType">The CommandType (stored procedure, text, etc.)</param>
            <param name="commandText">The stored procedure name or T-SQL command</param>
            <returns>An object containing the value in the 1x1 resultset generated by the command</returns>
        </member>
        <member name="M:Tylers.ApplicationBlocks.Data.SqlHelper.ExecuteScalar(System.Data.SqlClient.SqlConnection,System.Data.CommandType,System.String,System.Data.SqlClient.SqlParameter[])">
            <summary>
            Execute a SqlCommand (that returns a 1x1 resultset) against the specified SqlConnection 
            using the provided parameters.
            </summary>
            <remarks>
            e.g.:  
             int orderCount = (int)ExecuteScalar(conn, CommandType.StoredProcedure, "GetOrderCount", new SqlParameter("@prodid", 24));
            </remarks>
            <param name="connection">A valid SqlConnection</param>
            <param name="commandType">The CommandType (stored procedure, text, etc.)</param>
            <param name="commandText">The stored procedure name or T-SQL command</param>
            <param name="commandParameters">An array of SqlParamters used to execute the command</param>
            <returns>An object containing the value in the 1x1 resultset generated by the command</returns>
        </member>
        <member name="M:Tylers.ApplicationBlocks.Data.SqlHelper.ExecuteScalar(System.Data.SqlClient.SqlConnection,System.String,System.Object[])">
            <summary>
            Execute a stored procedure via a SqlCommand (that returns a 1x1 resultset) against the specified SqlConnection 
            using the provided parameter values.  This method will query the database to discover the parameters for the 
            stored procedure (the first time each stored procedure is called), and assign the values based on parameter order.
            </summary>
            <remarks>
            This method provides no access to output parameters or the stored procedure's return value parameter.
            
            e.g.:  
             int orderCount = (int)ExecuteScalar(conn, "GetOrderCount", 24, 36);
            </remarks>
            <param name="connection">A valid SqlConnection</param>
            <param name="spName">The name of the stored procedure</param>
            <param name="parameterValues">An array of objects to be assigned as the input values of the stored procedure</param>
            <returns>An object containing the value in the 1x1 resultset generated by the command</returns>
        </member>
        <member name="M:Tylers.ApplicationBlocks.Data.SqlHelper.ExecuteScalar(System.Data.SqlClient.SqlTransaction,System.Data.CommandType,System.String)">
            <summary>
            Execute a SqlCommand (that returns a 1x1 resultset and takes no parameters) against the provided SqlTransaction. 
            </summary>
            <remarks>
            e.g.:  
             int orderCount = (int)ExecuteScalar(trans, CommandType.StoredProcedure, "GetOrderCount");
            </remarks>
            <param name="transaction">A valid SqlTransaction</param>
            <param name="commandType">The CommandType (stored procedure, text, etc.)</param>
            <param name="commandText">The stored procedure name or T-SQL command</param>
            <returns>An object containing the value in the 1x1 resultset generated by the command</returns>
        </member>
        <member name="M:Tylers.ApplicationBlocks.Data.SqlHelper.ExecuteScalar(System.Data.SqlClient.SqlTransaction,System.Data.CommandType,System.String,System.Data.SqlClient.SqlParameter[])">
            <summary>
            Execute a SqlCommand (that returns a 1x1 resultset) against the specified SqlTransaction
            using the provided parameters.
            </summary>
            <remarks>
            e.g.:  
             int orderCount = (int)ExecuteScalar(trans, CommandType.StoredProcedure, "GetOrderCount", new SqlParameter("@prodid", 24));
            </remarks>
            <param name="transaction">A valid SqlTransaction</param>
            <param name="commandType">The CommandType (stored procedure, text, etc.)</param>
            <param name="commandText">The stored procedure name or T-SQL command</param>
            <param name="commandParameters">An array of SqlParamters used to execute the command</param>
            <returns>An object containing the value in the 1x1 resultset generated by the command</returns>
        </member>
        <member name="M:Tylers.ApplicationBlocks.Data.SqlHelper.ExecuteScalar(System.Data.SqlClient.SqlTransaction,System.String,System.Object[])">
            <summary>
            Execute a stored procedure via a SqlCommand (that returns a 1x1 resultset) against the specified
            SqlTransaction using the provided parameter values.  This method will query the database to discover the parameters for the 
            stored procedure (the first time each stored procedure is called), and assign the values based on parameter order.
            </summary>
            <remarks>
            This method provides no access to output parameters or the stored procedure's return value parameter.
            
            e.g.:  
             int orderCount = (int)ExecuteScalar(trans, "GetOrderCount", 24, 36);
            </remarks>
            <param name="transaction">A valid SqlTransaction</param>
            <param name="spName">The name of the stored procedure</param>
            <param name="parameterValues">An array of objects to be assigned as the input values of the stored procedure</param>
            <returns>An object containing the value in the 1x1 resultset generated by the command</returns>
        </member>
        <member name="M:Tylers.ApplicationBlocks.Data.SqlHelper.ExecuteXmlReader(System.Data.SqlClient.SqlConnection,System.Data.CommandType,System.String)">
            <summary>
            Execute a SqlCommand (that returns a resultset and takes no parameters) against the provided SqlConnection. 
            </summary>
            <remarks>
            e.g.:  
             XmlReader r = ExecuteXmlReader(conn, CommandType.StoredProcedure, "GetOrders");
            </remarks>
            <param name="connection">A valid SqlConnection</param>
            <param name="commandType">The CommandType (stored procedure, text, etc.)</param>
            <param name="commandText">The stored procedure name or T-SQL command using "FOR XML AUTO"</param>
            <returns>An XmlReader containing the resultset generated by the command</returns>
        </member>
        <member name="M:Tylers.ApplicationBlocks.Data.SqlHelper.ExecuteXmlReader(System.Data.SqlClient.SqlConnection,System.Data.CommandType,System.String,System.Data.SqlClient.SqlParameter[])">
            <summary>
            Execute a SqlCommand (that returns a resultset) against the specified SqlConnection 
            using the provided parameters.
            </summary>
            <remarks>
            e.g.:  
             XmlReader r = ExecuteXmlReader(conn, CommandType.StoredProcedure, "GetOrders", new SqlParameter("@prodid", 24));
            </remarks>
            <param name="connection">A valid SqlConnection</param>
            <param name="commandType">The CommandType (stored procedure, text, etc.)</param>
            <param name="commandText">The stored procedure name or T-SQL command using "FOR XML AUTO"</param>
            <param name="commandParameters">An array of SqlParamters used to execute the command</param>
            <returns>An XmlReader containing the resultset generated by the command</returns>
        </member>
        <member name="M:Tylers.ApplicationBlocks.Data.SqlHelper.ExecuteXmlReader(System.Data.SqlClient.SqlConnection,System.String,System.Object[])">
            <summary>
            Execute a stored procedure via a SqlCommand (that returns a resultset) against the specified SqlConnection 
            using the provided parameter values.  This method will query the database to discover the parameters for the 
            stored procedure (the first time each stored procedure is called), and assign the values based on parameter order.
            </summary>
            <remarks>
            This method provides no access to output parameters or the stored procedure's return value parameter.
            
            e.g.:  
             XmlReader r = ExecuteXmlReader(conn, "GetOrders", 24, 36);
            </remarks>
            <param name="connection">A valid SqlConnection</param>
            <param name="spName">The name of the stored procedure using "FOR XML AUTO"</param>
            <param name="parameterValues">An array of objects to be assigned as the input values of the stored procedure</param>
            <returns>An XmlReader containing the resultset generated by the command</returns>
        </member>
        <member name="M:Tylers.ApplicationBlocks.Data.SqlHelper.ExecuteXmlReader(System.Data.SqlClient.SqlTransaction,System.Data.CommandType,System.String)">
            <summary>
            Execute a SqlCommand (that returns a resultset and takes no parameters) against the provided SqlTransaction. 
            </summary>
            <remarks>
            e.g.:  
             XmlReader r = ExecuteXmlReader(trans, CommandType.StoredProcedure, "GetOrders");
            </remarks>
            <param name="transaction">A valid SqlTransaction</param>
            <param name="commandType">The CommandType (stored procedure, text, etc.)</param>
            <param name="commandText">The stored procedure name or T-SQL command using "FOR XML AUTO"</param>
            <returns>An XmlReader containing the resultset generated by the command</returns>
        </member>
        <member name="M:Tylers.ApplicationBlocks.Data.SqlHelper.ExecuteXmlReader(System.Data.SqlClient.SqlTransaction,System.Data.CommandType,System.String,System.Data.SqlClient.SqlParameter[])">
            <summary>
            Execute a SqlCommand (that returns a resultset) against the specified SqlTransaction
            using the provided parameters.
            </summary>
            <remarks>
            e.g.:  
             XmlReader r = ExecuteXmlReader(trans, CommandType.StoredProcedure, "GetOrders", new SqlParameter("@prodid", 24));
            </remarks>
            <param name="transaction">A valid SqlTransaction</param>
            <param name="commandType">The CommandType (stored procedure, text, etc.)</param>
            <param name="commandText">The stored procedure name or T-SQL command using "FOR XML AUTO"</param>
            <param name="commandParameters">An array of SqlParamters used to execute the command</param>
            <returns>An XmlReader containing the resultset generated by the command</returns>
        </member>
        <member name="M:Tylers.ApplicationBlocks.Data.SqlHelper.ExecuteXmlReader(System.Data.SqlClient.SqlTransaction,System.String,System.Object[])">
            <summary>
            Execute a stored procedure via a SqlCommand (that returns a resultset) against the specified 
            SqlTransaction using the provided parameter values.  This method will query the database to discover the parameters for the 
            stored procedure (the first time each stored procedure is called), and assign the values based on parameter order.
            </summary>
            <remarks>
            This method provides no access to output parameters or the stored procedure's return value parameter.
            
            e.g.:  
             XmlReader r = ExecuteXmlReader(trans, "GetOrders", 24, 36);
            </remarks>
            <param name="transaction">A valid SqlTransaction</param>
            <param name="spName">The name of the stored procedure</param>
            <param name="parameterValues">An array of objects to be assigned as the input values of the stored procedure</param>
            <returns>A dataset containing the resultset generated by the command</returns>
        </member>
        <member name="M:Tylers.ApplicationBlocks.Data.SqlHelper.FillDataset(System.String,System.Data.CommandType,System.String,System.Data.DataSet,System.String[])">
            <summary>
            Execute a SqlCommand (that returns a resultset and takes no parameters) against the database specified in 
            the connection string. 
            </summary>
            <remarks>
            e.g.:  
             FillDataset(connString, CommandType.StoredProcedure, "GetOrders", ds, new string[] {"orders"});
            </remarks>
            <param name="connectionString">A valid connection string for a SqlConnection</param>
            <param name="commandType">The CommandType (stored procedure, text, etc.)</param>
            <param name="commandText">The stored procedure name or T-SQL command</param>
            <param name="dataSet">A dataset wich will contain the resultset generated by the command</param>
            <param name="tableNames">This array will be used to create table mappings allowing the DataTables to be referenced
            by a user defined name (probably the actual table name)</param>
        </member>
        <member name="M:Tylers.ApplicationBlocks.Data.SqlHelper.FillDataset(System.String,System.Data.CommandType,System.String,System.Data.DataSet,System.String[],System.Data.SqlClient.SqlParameter[])">
            <summary>
            Execute a SqlCommand (that returns a resultset) against the database specified in the connection string 
            using the provided parameters.
            </summary>
            <remarks>
            e.g.:  
             FillDataset(connString, CommandType.StoredProcedure, "GetOrders", ds, new string[] {"orders"}, new SqlParameter("@prodid", 24));
            </remarks>
            <param name="connectionString">A valid connection string for a SqlConnection</param>
            <param name="commandType">The CommandType (stored procedure, text, etc.)</param>
            <param name="commandText">The stored procedure name or T-SQL command</param>
            <param name="commandParameters">An array of SqlParamters used to execute the command</param>
            <param name="dataSet">A dataset wich will contain the resultset generated by the command</param>
            <param name="tableNames">This array will be used to create table mappings allowing the DataTables to be referenced
            by a user defined name (probably the actual table name)
            </param>
        </member>
        <member name="M:Tylers.ApplicationBlocks.Data.SqlHelper.FillDataset(System.String,System.String,System.Data.DataSet,System.String[],System.Object[])">
            <summary>
            Execute a stored procedure via a SqlCommand (that returns a resultset) against the database specified in 
            the connection string using the provided parameter values.  This method will query the database to discover the parameters for the 
            stored procedure (the first time each stored procedure is called), and assign the values based on parameter order.
            </summary>
            <remarks>
            This method provides no access to output parameters or the stored procedure's return value parameter.
            
            e.g.:  
             FillDataset(connString, CommandType.StoredProcedure, "GetOrders", ds, new string[] {"orders"}, 24);
            </remarks>
            <param name="connectionString">A valid connection string for a SqlConnection</param>
            <param name="spName">The name of the stored procedure</param>
            <param name="dataSet">A dataset wich will contain the resultset generated by the command</param>
            <param name="tableNames">This array will be used to create table mappings allowing the DataTables to be referenced
            by a user defined name (probably the actual table name)
            </param>    
            <param name="parameterValues">An array of objects to be assigned as the input values of the stored procedure</param>
        </member>
        <member name="M:Tylers.ApplicationBlocks.Data.SqlHelper.FillDataset(System.Data.SqlClient.SqlConnection,System.Data.CommandType,System.String,System.Data.DataSet,System.String[])">
            <summary>
            Execute a SqlCommand (that returns a resultset and takes no parameters) against the provided SqlConnection. 
            </summary>
            <remarks>
            e.g.:  
             FillDataset(conn, CommandType.StoredProcedure, "GetOrders", ds, new string[] {"orders"});
            </remarks>
            <param name="connection">A valid SqlConnection</param>
            <param name="commandType">The CommandType (stored procedure, text, etc.)</param>
            <param name="commandText">The stored procedure name or T-SQL command</param>
            <param name="dataSet">A dataset wich will contain the resultset generated by the command</param>
            <param name="tableNames">This array will be used to create table mappings allowing the DataTables to be referenced
            by a user defined name (probably the actual table name)
            </param>    
        </member>
        <member name="M:Tylers.ApplicationBlocks.Data.SqlHelper.FillDataset(System.Data.SqlClient.SqlConnection,System.Data.CommandType,System.String,System.Data.DataSet,System.String[],System.Data.SqlClient.SqlParameter[])">
            <summary>
            Execute a SqlCommand (that returns a resultset) against the specified SqlConnection 
            using the provided parameters.
            </summary>
            <remarks>
            e.g.:  
             FillDataset(conn, CommandType.StoredProcedure, "GetOrders", ds, new string[] {"orders"}, new SqlParameter("@prodid", 24));
            </remarks>
            <param name="connection">A valid SqlConnection</param>
            <param name="commandType">The CommandType (stored procedure, text, etc.)</param>
            <param name="commandText">The stored procedure name or T-SQL command</param>
            <param name="dataSet">A dataset wich will contain the resultset generated by the command</param>
            <param name="tableNames">This array will be used to create table mappings allowing the DataTables to be referenced
            by a user defined name (probably the actual table name)
            </param>
            <param name="commandParameters">An array of SqlParamters used to execute the command</param>
        </member>
        <member name="M:Tylers.ApplicationBlocks.Data.SqlHelper.FillDataset(System.Data.SqlClient.SqlConnection,System.String,System.Data.DataSet,System.String[],System.Object[])">
            <summary>
            Execute a stored procedure via a SqlCommand (that returns a resultset) against the specified SqlConnection 
            using the provided parameter values.  This method will query the database to discover the parameters for the 
            stored procedure (the first time each stored procedure is called), and assign the values based on parameter order.
            </summary>
            <remarks>
            This method provides no access to output parameters or the stored procedure's return value parameter.
            
            e.g.:  
             FillDataset(conn, "GetOrders", ds, new string[] {"orders"}, 24, 36);
            </remarks>
            <param name="connection">A valid SqlConnection</param>
            <param name="spName">The name of the stored procedure</param>
            <param name="dataSet">A dataset wich will contain the resultset generated by the command</param>
            <param name="tableNames">This array will be used to create table mappings allowing the DataTables to be referenced
            by a user defined name (probably the actual table name)
            </param>
            <param name="parameterValues">An array of objects to be assigned as the input values of the stored procedure</param>
        </member>
        <member name="M:Tylers.ApplicationBlocks.Data.SqlHelper.FillDataset(System.Data.SqlClient.SqlTransaction,System.Data.CommandType,System.String,System.Data.DataSet,System.String[])">
            <summary>
            Execute a SqlCommand (that returns a resultset and takes no parameters) against the provided SqlTransaction. 
            </summary>
            <remarks>
            e.g.:  
             FillDataset(trans, CommandType.StoredProcedure, "GetOrders", ds, new string[] {"orders"});
            </remarks>
            <param name="transaction">A valid SqlTransaction</param>
            <param name="commandType">The CommandType (stored procedure, text, etc.)</param>
            <param name="commandText">The stored procedure name or T-SQL command</param>
            <param name="dataSet">A dataset wich will contain the resultset generated by the command</param>
            <param name="tableNames">This array will be used to create table mappings allowing the DataTables to be referenced
            by a user defined name (probably the actual table name)
            </param>
        </member>
        <member name="M:Tylers.ApplicationBlocks.Data.SqlHelper.FillDataset(System.Data.SqlClient.SqlTransaction,System.Data.CommandType,System.String,System.Data.DataSet,System.String[],System.Data.SqlClient.SqlParameter[])">
            <summary>
            Execute a SqlCommand (that returns a resultset) against the specified SqlTransaction
            using the provided parameters.
            </summary>
            <remarks>
            e.g.:  
             FillDataset(trans, CommandType.StoredProcedure, "GetOrders", ds, new string[] {"orders"}, new SqlParameter("@prodid", 24));
            </remarks>
            <param name="transaction">A valid SqlTransaction</param>
            <param name="commandType">The CommandType (stored procedure, text, etc.)</param>
            <param name="commandText">The stored procedure name or T-SQL command</param>
            <param name="dataSet">A dataset wich will contain the resultset generated by the command</param>
            <param name="tableNames">This array will be used to create table mappings allowing the DataTables to be referenced
            by a user defined name (probably the actual table name)
            </param>
            <param name="commandParameters">An array of SqlParamters used to execute the command</param>
        </member>
        <member name="M:Tylers.ApplicationBlocks.Data.SqlHelper.FillDataset(System.Data.SqlClient.SqlTransaction,System.String,System.Data.DataSet,System.String[],System.Object[])">
            <summary>
            Execute a stored procedure via a SqlCommand (that returns a resultset) against the specified 
            SqlTransaction using the provided parameter values.  This method will query the database to discover the parameters for the 
            stored procedure (the first time each stored procedure is called), and assign the values based on parameter order.
            </summary>
            <remarks>
            This method provides no access to output parameters or the stored procedure's return value parameter.
            
            e.g.:  
             FillDataset(trans, "GetOrders", ds, new string[]{"orders"}, 24, 36);
            </remarks>
            <param name="transaction">A valid SqlTransaction</param>
            <param name="spName">The name of the stored procedure</param>
            <param name="dataSet">A dataset wich will contain the resultset generated by the command</param>
            <param name="tableNames">This array will be used to create table mappings allowing the DataTables to be referenced
            by a user defined name (probably the actual table name)
            </param>
            <param name="parameterValues">An array of objects to be assigned as the input values of the stored procedure</param>
        </member>
        <member name="M:Tylers.ApplicationBlocks.Data.SqlHelper.FillDataset(System.Data.SqlClient.SqlConnection,System.Data.SqlClient.SqlTransaction,System.Data.CommandType,System.String,System.Data.DataSet,System.String[],System.Data.SqlClient.SqlParameter[])">
            <summary>
            Private helper method that execute a SqlCommand (that returns a resultset) against the specified SqlTransaction and SqlConnection
            using the provided parameters.
            </summary>
            <remarks>
            e.g.:  
             FillDataset(conn, trans, CommandType.StoredProcedure, "GetOrders", ds, new string[] {"orders"}, new SqlParameter("@prodid", 24));
            </remarks>
            <param name="connection">A valid SqlConnection</param>
            <param name="transaction">A valid SqlTransaction</param>
            <param name="commandType">The CommandType (stored procedure, text, etc.)</param>
            <param name="commandText">The stored procedure name or T-SQL command</param>
            <param name="dataSet">A dataset wich will contain the resultset generated by the command</param>
            <param name="tableNames">This array will be used to create table mappings allowing the DataTables to be referenced
            by a user defined name (probably the actual table name)
            </param>
            <param name="commandParameters">An array of SqlParamters used to execute the command</param>
        </member>
        <member name="M:Tylers.ApplicationBlocks.Data.SqlHelper.UpdateDataset(System.Data.SqlClient.SqlCommand,System.Data.SqlClient.SqlCommand,System.Data.SqlClient.SqlCommand,System.Data.DataSet,System.String)">
            <summary>
            Executes the respective command for each inserted, updated, or deleted row in the DataSet.
            </summary>
            <remarks>
            e.g.:  
             UpdateDataset(conn, insertCommand, deleteCommand, updateCommand, dataSet, "Order");
            </remarks>
            <param name="insertCommand">A valid transact-SQL statement or stored procedure to insert new records into the data source</param>
            <param name="deleteCommand">A valid transact-SQL statement or stored procedure to delete records from the data source</param>
            <param name="updateCommand">A valid transact-SQL statement or stored procedure used to update records in the data source</param>
            <param name="dataSet">The DataSet used to update the data source</param>
            <param name="tableName">The DataTable used to update the data source.</param>
        </member>
        <member name="M:Tylers.ApplicationBlocks.Data.SqlHelper.CreateCommand(System.Data.SqlClient.SqlConnection,System.String,System.String[])">
            <summary>
            Simplify the creation of a Sql command object by allowing
            a stored procedure and optional parameters to be provided
            </summary>
            <remarks>
            e.g.:  
             SqlCommand command = CreateCommand(conn, "AddCustomer", "CustomerID", "CustomerName");
            </remarks>
            <param name="connection">A valid SqlConnection object</param>
            <param name="spName">The name of the stored procedure</param>
            <param name="sourceColumns">An array of string to be assigned as the source columns of the stored procedure parameters</param>
            <returns>A valid SqlCommand object</returns>
        </member>
        <member name="M:Tylers.ApplicationBlocks.Data.SqlHelper.ExecuteNonQueryTypedParams(System.String,System.String,System.Data.DataRow)">
            <summary>
            Execute a stored procedure via a SqlCommand (that returns no resultset) against the database specified in 
            the connection string using the dataRow column values as the stored procedure's parameters values.
            This method will query the database to discover the parameters for the 
            stored procedure (the first time each stored procedure is called), and assign the values based on row values.
            </summary>
            <param name="connectionString">A valid connection string for a SqlConnection</param>
            <param name="spName">The name of the stored procedure</param>
            <param name="dataRow">The dataRow used to hold the stored procedure's parameter values.</param>
            <returns>An int representing the number of rows affected by the command</returns>
        </member>
        <member name="M:Tylers.ApplicationBlocks.Data.SqlHelper.ExecuteNonQueryTypedParams(System.Data.SqlClient.SqlConnection,System.String,System.Data.DataRow)">
            <summary>
            Execute a stored procedure via a SqlCommand (that returns no resultset) against the specified SqlConnection 
            using the dataRow column values as the stored procedure's parameters values.  
            This method will query the database to discover the parameters for the 
            stored procedure (the first time each stored procedure is called), and assign the values based on row values.
            </summary>
            <param name="connection">A valid SqlConnection object</param>
            <param name="spName">The name of the stored procedure</param>
            <param name="dataRow">The dataRow used to hold the stored procedure's parameter values.</param>
            <returns>An int representing the number of rows affected by the command</returns>
        </member>
        <member name="M:Tylers.ApplicationBlocks.Data.SqlHelper.ExecuteNonQueryTypedParams(System.Data.SqlClient.SqlTransaction,System.String,System.Data.DataRow)">
            <summary>
            Execute a stored procedure via a SqlCommand (that returns no resultset) against the specified
            SqlTransaction using the dataRow column values as the stored procedure's parameters values.
            This method will query the database to discover the parameters for the 
            stored procedure (the first time each stored procedure is called), and assign the values based on row values.
            </summary>
            <param name="transaction">A valid SqlTransaction object</param>
            <param name="spName">The name of the stored procedure</param>
            <param name="dataRow">The dataRow used to hold the stored procedure's parameter values.</param>
            <returns>An int representing the number of rows affected by the command</returns>
        </member>
        <member name="M:Tylers.ApplicationBlocks.Data.SqlHelper.ExecuteDatasetTypedParams(System.String,System.String,System.Data.DataRow)">
            <summary>
            Execute a stored procedure via a SqlCommand (that returns a resultset) against the database specified in 
            the connection string using the dataRow column values as the stored procedure's parameters values.
            This method will query the database to discover the parameters for the 
            stored procedure (the first time each stored procedure is called), and assign the values based on row values.
            </summary>
            <param name="connectionString">A valid connection string for a SqlConnection</param>
            <param name="spName">The name of the stored procedure</param>
            <param name="dataRow">The dataRow used to hold the stored procedure's parameter values.</param>
            <returns>A dataset containing the resultset generated by the command</returns>
        </member>
        <member name="M:Tylers.ApplicationBlocks.Data.SqlHelper.ExecuteDatasetTypedParams(System.Data.SqlClient.SqlConnection,System.String,System.Data.DataRow)">
            <summary>
            Execute a stored procedure via a SqlCommand (that returns a resultset) against the specified SqlConnection 
            using the dataRow column values as the store procedure's parameters values.
            This method will query the database to discover the parameters for the 
            stored procedure (the first time each stored procedure is called), and assign the values based on row values.
            </summary>
            <param name="connection">A valid SqlConnection object</param>
            <param name="spName">The name of the stored procedure</param>
            <param name="dataRow">The dataRow used to hold the stored procedure's parameter values.</param>
            <returns>A dataset containing the resultset generated by the command</returns>
        </member>
        <member name="M:Tylers.ApplicationBlocks.Data.SqlHelper.ExecuteDatasetTypedParams(System.Data.SqlClient.SqlTransaction,System.String,System.Data.DataRow)">
            <summary>
            Execute a stored procedure via a SqlCommand (that returns a resultset) against the specified SqlTransaction 
            using the dataRow column values as the stored procedure's parameters values.
            This method will query the database to discover the parameters for the 
            stored procedure (the first time each stored procedure is called), and assign the values based on row values.
            </summary>
            <param name="transaction">A valid SqlTransaction object</param>
            <param name="spName">The name of the stored procedure</param>
            <param name="dataRow">The dataRow used to hold the stored procedure's parameter values.</param>
            <returns>A dataset containing the resultset generated by the command</returns>
        </member>
        <member name="M:Tylers.ApplicationBlocks.Data.SqlHelper.ExecuteReaderTypedParams(System.String,System.String,System.Data.DataRow)">
            <summary>
            Execute a stored procedure via a SqlCommand (that returns a resultset) against the database specified in 
            the connection string using the dataRow column values as the stored procedure's parameters values.
            This method will query the database to discover the parameters for the 
            stored procedure (the first time each stored procedure is called), and assign the values based on parameter order.
            </summary>
            <param name="connectionString">A valid connection string for a SqlConnection</param>
            <param name="spName">The name of the stored procedure</param>
            <param name="dataRow">The dataRow used to hold the stored procedure's parameter values.</param>
            <returns>A SqlDataReader containing the resultset generated by the command</returns>
        </member>
        <member name="M:Tylers.ApplicationBlocks.Data.SqlHelper.ExecuteReaderTypedParams(System.Data.SqlClient.SqlConnection,System.String,System.Data.DataRow)">
            <summary>
            Execute a stored procedure via a SqlCommand (that returns a resultset) against the specified SqlConnection 
            using the dataRow column values as the stored procedure's parameters values.
            This method will query the database to discover the parameters for the 
            stored procedure (the first time each stored procedure is called), and assign the values based on parameter order.
            </summary>
            <param name="connection">A valid SqlConnection object</param>
            <param name="spName">The name of the stored procedure</param>
            <param name="dataRow">The dataRow used to hold the stored procedure's parameter values.</param>
            <returns>A SqlDataReader containing the resultset generated by the command</returns>
        </member>
        <member name="M:Tylers.ApplicationBlocks.Data.SqlHelper.ExecuteReaderTypedParams(System.Data.SqlClient.SqlTransaction,System.String,System.Data.DataRow)">
            <summary>
            Execute a stored procedure via a SqlCommand (that returns a resultset) against the specified SqlTransaction 
            using the dataRow column values as the stored procedure's parameters values.
            This method will query the database to discover the parameters for the 
            stored procedure (the first time each stored procedure is called), and assign the values based on parameter order.
            </summary>
            <param name="transaction">A valid SqlTransaction object</param>
            <param name="spName">The name of the stored procedure</param>
            <param name="dataRow">The dataRow used to hold the stored procedure's parameter values.</param>
            <returns>A SqlDataReader containing the resultset generated by the command</returns>
        </member>
        <member name="M:Tylers.ApplicationBlocks.Data.SqlHelper.ExecuteScalarTypedParams(System.String,System.String,System.Data.DataRow)">
            <summary>
            Execute a stored procedure via a SqlCommand (that returns a 1x1 resultset) against the database specified in 
            the connection string using the dataRow column values as the stored procedure's parameters values.
            This method will query the database to discover the parameters for the 
            stored procedure (the first time each stored procedure is called), and assign the values based on parameter order.
            </summary>
            <param name="connectionString">A valid connection string for a SqlConnection</param>
            <param name="spName">The name of the stored procedure</param>
            <param name="dataRow">The dataRow used to hold the stored procedure's parameter values.</param>
            <returns>An object containing the value in the 1x1 resultset generated by the command</returns>
        </member>
        <member name="M:Tylers.ApplicationBlocks.Data.SqlHelper.ExecuteScalarTypedParams(System.Data.SqlClient.SqlConnection,System.String,System.Data.DataRow)">
            <summary>
            Execute a stored procedure via a SqlCommand (that returns a 1x1 resultset) against the specified SqlConnection 
            using the dataRow column values as the stored procedure's parameters values.
            This method will query the database to discover the parameters for the 
            stored procedure (the first time each stored procedure is called), and assign the values based on parameter order.
            </summary>
            <param name="connection">A valid SqlConnection object</param>
            <param name="spName">The name of the stored procedure</param>
            <param name="dataRow">The dataRow used to hold the stored procedure's parameter values.</param>
            <returns>An object containing the value in the 1x1 resultset generated by the command</returns>
        </member>
        <member name="M:Tylers.ApplicationBlocks.Data.SqlHelper.ExecuteScalarTypedParams(System.Data.SqlClient.SqlTransaction,System.String,System.Data.DataRow)">
            <summary>
            Execute a stored procedure via a SqlCommand (that returns a 1x1 resultset) against the specified SqlTransaction
            using the dataRow column values as the stored procedure's parameters values.
            This method will query the database to discover the parameters for the 
            stored procedure (the first time each stored procedure is called), and assign the values based on parameter order.
            </summary>
            <param name="transaction">A valid SqlTransaction object</param>
            <param name="spName">The name of the stored procedure</param>
            <param name="dataRow">The dataRow used to hold the stored procedure's parameter values.</param>
            <returns>An object containing the value in the 1x1 resultset generated by the command</returns>
        </member>
        <member name="M:Tylers.ApplicationBlocks.Data.SqlHelper.ExecuteXmlReaderTypedParams(System.Data.SqlClient.SqlConnection,System.String,System.Data.DataRow)">
            <summary>
            Execute a stored procedure via a SqlCommand (that returns a resultset) against the specified SqlConnection 
            using the dataRow column values as the stored procedure's parameters values.
            This method will query the database to discover the parameters for the 
            stored procedure (the first time each stored procedure is called), and assign the values based on parameter order.
            </summary>
            <param name="connection">A valid SqlConnection object</param>
            <param name="spName">The name of the stored procedure</param>
            <param name="dataRow">The dataRow used to hold the stored procedure's parameter values.</param>
            <returns>An XmlReader containing the resultset generated by the command</returns>
        </member>
        <member name="M:Tylers.ApplicationBlocks.Data.SqlHelper.ExecuteXmlReaderTypedParams(System.Data.SqlClient.SqlTransaction,System.String,System.Data.DataRow)">
            <summary>
            Execute a stored procedure via a SqlCommand (that returns a resultset) against the specified SqlTransaction 
            using the dataRow column values as the stored procedure's parameters values.
            This method will query the database to discover the parameters for the 
            stored procedure (the first time each stored procedure is called), and assign the values based on parameter order.
            </summary>
            <param name="transaction">A valid SqlTransaction object</param>
            <param name="spName">The name of the stored procedure</param>
            <param name="dataRow">The dataRow used to hold the stored procedure's parameter values.</param>
            <returns>An XmlReader containing the resultset generated by the command</returns>
        </member>
        <member name="T:Tylers.ApplicationBlocks.Data.SqlHelper.SqlConnectionOwnership">
            <summary>
            This enum is used to indicate whether the connection was provided by the caller, or created by SqlHelper, so that
            we can set the appropriate CommandBehavior when calling ExecuteReader()
            </summary>
        </member>
        <member name="F:Tylers.ApplicationBlocks.Data.SqlHelper.SqlConnectionOwnership.Internal">
            <summary>Connection is owned and managed by SqlHelper</summary>
        </member>
        <member name="F:Tylers.ApplicationBlocks.Data.SqlHelper.SqlConnectionOwnership.External">
            <summary>Connection is owned and managed by the caller</summary>
        </member>
        <member name="T:Tylers.ApplicationBlocks.Data.SqlHelperParameterCache">
            <summary>
            SqlHelperParameterCache provides functions to leverage a static cache of procedure parameters, and the
            ability to discover parameters for stored procedures at run-time.
            </summary>
        </member>
        <member name="M:Tylers.ApplicationBlocks.Data.SqlHelperParameterCache.DiscoverSpParameterSet(System.Data.SqlClient.SqlConnection,System.String,System.Boolean)">
            <summary>
            Resolve at run time the appropriate set of SqlParameters for a stored procedure
            </summary>
            <param name="connection">A valid SqlConnection object</param>
            <param name="spName">The name of the stored procedure</param>
            <param name="includeReturnValueParameter">Whether or not to include their return value parameter</param>
            <returns>The parameter array discovered.</returns>
        </member>
        <member name="M:Tylers.ApplicationBlocks.Data.SqlHelperParameterCache.CloneParameters(System.Data.SqlClient.SqlParameter[])">
            <summary>
            Deep copy of cached SqlParameter array
            </summary>
            <param name="originalParameters"></param>
            <returns></returns>
        </member>
        <member name="M:Tylers.ApplicationBlocks.Data.SqlHelperParameterCache.CacheParameterSet(System.String,System.String,System.Data.SqlClient.SqlParameter[])">
            <summary>
            Add parameter array to the cache
            </summary>
            <param name="connectionString">A valid connection string for a SqlConnection</param>
            <param name="commandText">The stored procedure name or T-SQL command</param>
            <param name="commandParameters">An array of SqlParamters to be cached</param>
        </member>
        <member name="M:Tylers.ApplicationBlocks.Data.SqlHelperParameterCache.GetCachedParameterSet(System.String,System.String)">
            <summary>
            Retrieve a parameter array from the cache
            </summary>
            <param name="connectionString">A valid connection string for a SqlConnection</param>
            <param name="commandText">The stored procedure name or T-SQL command</param>
            <returns>An array of SqlParamters</returns>
        </member>
        <member name="M:Tylers.ApplicationBlocks.Data.SqlHelperParameterCache.GetSpParameterSet(System.String,System.String)">
            <summary>
            Retrieves the set of SqlParameters appropriate for the stored procedure
            </summary>
            <remarks>
            This method will query the database for this information, and then store it in a cache for future requests.
            </remarks>
            <param name="connectionString">A valid connection string for a SqlConnection</param>
            <param name="spName">The name of the stored procedure</param>
            <returns>An array of SqlParameters</returns>
        </member>
        <member name="M:Tylers.ApplicationBlocks.Data.SqlHelperParameterCache.GetSpParameterSet(System.String,System.String,System.Boolean)">
            <summary>
            Retrieves the set of SqlParameters appropriate for the stored procedure
            </summary>
            <remarks>
            This method will query the database for this information, and then store it in a cache for future requests.
            </remarks>
            <param name="connectionString">A valid connection string for a SqlConnection</param>
            <param name="spName">The name of the stored procedure</param>
            <param name="includeReturnValueParameter">A bool value indicating whether the return value parameter should be included in the results</param>
            <returns>An array of SqlParameters</returns>
        </member>
        <member name="M:Tylers.ApplicationBlocks.Data.SqlHelperParameterCache.GetSpParameterSet(System.Data.SqlClient.SqlConnection,System.String)">
            <summary>
            Retrieves the set of SqlParameters appropriate for the stored procedure
            </summary>
            <remarks>
            This method will query the database for this information, and then store it in a cache for future requests.
            </remarks>
            <param name="connection">A valid SqlConnection object</param>
            <param name="spName">The name of the stored procedure</param>
            <returns>An array of SqlParameters</returns>
        </member>
        <member name="M:Tylers.ApplicationBlocks.Data.SqlHelperParameterCache.GetSpParameterSet(System.Data.SqlClient.SqlConnection,System.String,System.Boolean)">
            <summary>
            Retrieves the set of SqlParameters appropriate for the stored procedure
            </summary>
            <remarks>
            This method will query the database for this information, and then store it in a cache for future requests.
            </remarks>
            <param name="connection">A valid SqlConnection object</param>
            <param name="spName">The name of the stored procedure</param>
            <param name="includeReturnValueParameter">A bool value indicating whether the return value parameter should be included in the results</param>
            <returns>An array of SqlParameters</returns>
        </member>
        <member name="M:Tylers.ApplicationBlocks.Data.SqlHelperParameterCache.GetSpParameterSetInternal(System.Data.SqlClient.SqlConnection,System.String,System.Boolean)">
            <summary>
            Retrieves the set of SqlParameters appropriate for the stored procedure
            </summary>
            <param name="connection">A valid SqlConnection object</param>
            <param name="spName">The name of the stored procedure</param>
            <param name="includeReturnValueParameter">A bool value indicating whether the return value parameter should be included in the results</param>
            <returns>An array of SqlParameters</returns>
        </member>
        <member name="M:Cthuvien.dbtso.P_IN(System.String@,System.Object)">
            <summary>Tao chuoi Insert tu bien</summary>
        </member>
        <member name="M:Cthuvien.dbtso.P_IN(System.String@,System.Object[])">
            <summary>Tao chuoi insert tu mang</summary>
        </member>
        <member name="M:Cthuvien.dbtso.P_UP(System.String@,System.String,System.Object)">
            <summary>Tao chuoi Update tu bien don</summary>
        </member>
        <member name="M:Cthuvien.dbtso.P_UP(System.String@,System.String[],System.Object[])">
            <summary>Tao chuoi Update tu mang</summary>
        </member>
        <member name="M:Cthuvien.dbtso.P_WH(System.String@,System.String,System.Object)">
            <summary>Tao chuoi Where tu bien</summary>
        </member>
        <member name="M:Cthuvien.dbtso.P_WH(System.String@,System.String[],System.Object[])">
            <summary>Tao chuoi Where tu mang</summary>
        </member>
        <member name="T:Cthuvien.dbxly">
            <summary>Lệnh DATABASE</summary>
        </member>
        <member name="M:Cthuvien.dbxly.Fs_LENH_LKE(System.String,System.String,System.String)">
            <summary>Tạo lệnh liệt kê khong dieu kien</summary>
        </member>
        <member name="M:Cthuvien.dbxly.Fs_LENH_LKE(System.String,System.String,System.String,System.Object,System.String)">
            <summary>Tạo lệnh liệt kê co dieu kien don</summary>
        </member>
        <member name="M:Cthuvien.dbxly.Fs_LENH_LKE(System.String,System.String,System.String[],System.Object[],System.String)">
            <summary>Tạo lệnh liệt kê co dieu kien mang</summary>
        </member>
        <member name="M:Cthuvien.dbxly.Fs_LENH_LKE(System.String[],System.String,System.String,System.String)">
            <summary>Tạo lệnh liệt kê từ nhiều bảng không điều kiện</summary>
        </member>
        <member name="M:Cthuvien.dbxly.Fs_LENH_LKE(System.String[],System.String,System.String,System.String,System.Object,System.String)">
            <summary>Tạo lệnh liệt kê từ nhiều bảng điều kiện đơn</summary>
        </member>
        <member name="M:Cthuvien.dbxly.Fs_LENH_LKE(System.String[],System.String,System.String,System.String[],System.Object[],System.String)">
            <summary>Tạo lệnh liệt kê từ nhiều bảng điều kiện mảng</summary>
        </member>
        <member name="M:Cthuvien.dbxly.Fs_CTRUC(System.String)">
            <summary>Liệt kê toàn bộ cấu trúc</summary>
        </member>
        <member name="M:Cthuvien.dbxly.Fs_CTRUC(System.String,System.String)">
            <summary>Liệt kê cấu trúc có loại bớt</summary>
        </member>
        <member name="M:Cthuvien.dbxly.Fobj_LKE(System.Int32,System.String)">
            <summary>Liet ke theo lenh</summary>
        </member>
        <member name="M:Cthuvien.dbxly.Fobj_LKE(System.String,System.Int32,System.String,System.String)">
            <summary>Liet ke khong dieu kien</summary>
        </member>
        <member name="M:Cthuvien.dbxly.Fobj_LKE(System.String,System.Int32,System.String,System.String,System.Object,System.String)">
            <summary>Liet ke co dieu kien don</summary>
        </member>
        <member name="M:Cthuvien.dbxly.Fobj_LKE(System.String,System.Int32,System.String,System.String[],System.Object[],System.String)">
            <summary>Liet ke co dieu kien mang</summary>
        </member>
        <member name="M:Cthuvien.dbxly.Fobj_LKE(System.String[],System.Int32,System.String,System.String,System.String)">
            <summary>Liệt kê từ nhiều bảng không điều kiện</summary>
        </member>
        <member name="M:Cthuvien.dbxly.Fobj_LKE(System.String[],System.Int32,System.String,System.String,System.String,System.Object,System.String)">
            <summary>Liệt kê từ nhiều bảng điều kiện đơn</summary>
        </member>
        <member name="M:Cthuvien.dbxly.Fobj_LKE(System.String[],System.Int32,System.String,System.String,System.String[],System.Object[],System.String)">
            <summary>Liệt kê từ nhiều bảng điều kiện mảng</summary>
        </member>
        <member name="M:Cthuvien.dbxly.P_LENH(Cthuvien.kenh.ckenh,System.String)">
            <summary>Thuc hien lenh</summary>
        </member>
        <member name="M:Cthuvien.dbxly.P_XOA(Cthuvien.kenh.ckenh,System.String)">
            <summary>Xoa Table khong dieu kien</summary>
        </member>
        <member name="M:Cthuvien.dbxly.P_XOA(Cthuvien.kenh.ckenh,System.String,System.String,System.Object)">
            <summary>Xoa Table dieu kien don</summary>
        </member>
        <member name="M:Cthuvien.dbxly.P_XOA(Cthuvien.kenh.ckenh,System.String,System.String[],System.Object[])">
            <summary>Xoa Table dieu kien mang</summary>
        </member>
        <member name="M:Cthuvien.dbxly.P_SUA(Cthuvien.kenh.ckenh,System.String,System.String)">
            <summary>Update Table tu lệnh, không dieu kien</summary>
        </member>
        <member name="M:Cthuvien.dbxly.P_SUA(Cthuvien.kenh.ckenh,System.String,System.String,System.String,System.Object)">
            <summary>Update Table từ lệnh, điều kiện đơn</summary>
        </member>
        <member name="M:Cthuvien.dbxly.P_SUA(Cthuvien.kenh.ckenh,System.String,System.String,System.String[],System.Object[])">
            <summary>Update Table tu lệnh, dieu kien mang</summary>
        </member>
        <member name="M:Cthuvien.dbxly.P_SUA(Cthuvien.kenh.ckenh,System.String,System.String,System.Object,System.String,System.Object)">
            <summary>Update Table tu bien don, dieu kien don</summary>
        </member>
        <member name="M:Cthuvien.dbxly.P_SUA(Cthuvien.kenh.ckenh,System.String,System.String,System.Object,System.String[],System.Object[])">
            <summary>Update Table tu bien don, dieu kien mang</summary>
        </member>
        <member name="M:Cthuvien.dbxly.P_SUA(Cthuvien.kenh.ckenh,System.String,System.String[],System.Object[],System.String,System.Object)">
            <summary>Update Table tu mang, dieu kien don</summary>
        </member>
        <member name="M:Cthuvien.dbxly.P_SUA(Cthuvien.kenh.ckenh,System.String,System.String[],System.Object[],System.String[],System.Object[])">
            <summary>Update Table tu mang, dieu kien mang</summary>
        </member>
        <member name="M:Cthuvien.dbxly.P_NH(Cthuvien.kenh.ckenh,System.String,System.Data.DataTable)">
            <summary>Nhap vao Table tu Datatable</summary>
        </member>
        <member name="M:Cthuvien.dbxly.P_NH(Cthuvien.kenh.ckenh,System.String,System.String,System.Object[])">
            <summary>Nhap vao Table tu mang</summary>
        </member>
        <member name="M:Cthuvien.dbxly.P_NH(Cthuvien.kenh.ckenh,System.String,System.String,System.String)">
            <summary>Nhap vao Table tu lệnh</summary>
        </member>
        <member name="M:Cthuvien.dbxly.P_NH(Cthuvien.kenh.ckenh,System.String,System.String,System.String,System.String,System.String)">
            <summary>Nhap vao Table tu liet ke khong dieu kien</summary>
        </member>
        <member name="M:Cthuvien.dbxly.P_NH(Cthuvien.kenh.ckenh,System.String,System.String,System.String,System.String,System.String,System.Object,System.String)">
            <summary>Nhap vao Table tu liet ke co dieu kien don</summary>
        </member>
        <member name="M:Cthuvien.dbxly.P_NH(Cthuvien.kenh.ckenh,System.String,System.String,System.String,System.String,System.String[],System.Object[],System.String)">
            <summary>Nhap vao Table tu liet ke co dieu kien mang</summary>
        </member>
        <member name="M:Cthuvien.dbxly.P_NH(Cthuvien.kenh.ckenh,System.String,System.String,System.String[],System.String,System.String,System.String)">
            <summary>Nhap vao Table tu liệt kê từ nhiều bảng không điều kiện</summary>
        </member>
        <member name="M:Cthuvien.dbxly.P_NH(Cthuvien.kenh.ckenh,System.String,System.String,System.String[],System.String,System.String,System.String,System.Object,System.String)">
            <summary>Nhap vao Table tu liệt kê từ nhiều bảng điều kiện đơn</summary>
        </member>
        <member name="M:Cthuvien.dbxly.P_NH(Cthuvien.kenh.ckenh,System.String,System.String,System.String[],System.String,System.String,System.String[],System.Object[],System.String)">
            <summary>Nhap vao Table tu liệt kê từ nhiều bảng điều kiện mảng</summary>
        </member>
        <member name="M:Cthuvien.dbxly.Fi_KTRA(System.String)">
            <summary>Ktra khong dieu kien</summary>
        </member>
        <member name="M:Cthuvien.dbxly.Fi_KTRA(System.String,System.String,System.Object)">
            <summary>Ktra dieu kien don</summary>
        </member>
        <member name="M:Cthuvien.dbxly.Fi_KTRA(System.String,System.String[],System.Object[])">
            <summary>Ktra dieu kien mang</summary>
        </member>
        <member name="M:Cthuvien.dbxly.Fb_KTRA(System.String,System.String,System.String)">
            <summary>Ktra tập hợp mã trong bảng</summary>
        </member>
        <member name="M:Cthuvien.dbxly.Fobj_TEN(System.String,System.String,System.String,System.Object)">
            <summary>Hoi gia tri dieu kien don</summary>
        </member>
        <member name="M:Cthuvien.dbxly.Fobj_TEN(System.String,System.String,System.String[],System.Object[])">
            <summary>Hoi gia tri dieu kien mang</summary>
        </member>
        <member name="T:Cthuvien.form">
            <summary>Xử lý Form</summary>
        </member>
        <member name="M:Cthuvien.form.P_MO(System.Web.UI.Page,System.String,System.String)">
            <summary>
            Mở Form
            </summary>
            <param name="b_f">Form hiện tại</param>
            <param name="b_ftk">Form tham khảo</param>
            <param name="b_id">Id</param>
        </member>
        <member name="M:Cthuvien.form.P_DONG(System.Web.UI.Page,System.String)">
            <summary>
            Đóng Form theo tên
            </summary>
            <param name="b_f">Form hiện tại</param>
            <param name="b_ten">Tên form cần đóng</param>
        </member>
        <member name="M:Cthuvien.form.P_DONG(System.Web.UI.Page)">
            <summary>Đóng Form hiện tại</summary>
        </member>
        <member name="M:Cthuvien.form.P_DONG(System.Web.UI.Page,System.Object[])">
            <summary>
            Đóng Form tên b_ten, có trả kết quả
            </summary>
            <param name="b_f">Form hiện tại</param>
            <param name="a_obj">Mảng kết quả trả từ form đóng</param>
        </member>
        <member name="M:Cthuvien.form.P_KTHUOC(System.Web.UI.Page,System.String)">
            <summary>
            Đặt kích thước cho Form
            </summary>
            <param name="b_f">Form hiện tại</param>
            <param name="b_kthuoc">Kích thước form, trong đó chiều rộng và chiều cao cách nhau bởi dấu phẩy</param>
        </member>
        <member name="M:Cthuvien.form.P_KTHUOC(System.Web.UI.Page)">
            <summary>
            Đặt kích thước cho Form từ control kthuoc trên form
            </summary>
            <param name="b_f">Form cần đặt kích thước</param>
        </member>
        <member name="M:Cthuvien.form.P_GIUA(System.Web.UI.Page,System.String)">
            <summary>
            Đặt kích thước cho Form
            </summary>
            <param name="b_f">Form cần đặt</param>
            <param name="b_kthuoc">Kích thước</param>
        </member>
        <member name="M:Cthuvien.form.P_GOI(System.Web.UI.Page,System.String@,System.String@)">
            <summary>
            Hỏi Form gọi và đối tượng mở Form hiện tại
            </summary>
            <param name="b_f">Form hiện tại</param>
            <param name="b_tkhao">Tên form gọi</param>
            <param name="b_dtuong">Đối tượng gọi</param>
        </member>
        <member name="M:Cthuvien.form.P_NHAN(System.Web.UI.Page,System.String,System.Boolean)">
            <summary>
            Form hiện tại báo form tham khảo nhận kết quả từ form hiện tại, tùy chọn đặt focus
            </summary>
            <param name="b_f">Form hiện tại</param>
            <param name="b_tkhao">Tên form tham khảo</param>
            <param name="b_focus">Có đặt focus cho form tham khảo không</param>
        </member>
        <member name="M:Cthuvien.form.P_NHAN(System.Web.UI.Page,System.String)">
            <summary>
            Form hiện tại báo form tham khảo nhận kết quả từ form hiện tại, không focus
            </summary>
            <param name="b_f">Form hiện tại</param>
            <param name="b_tkhao">Tên form tham khảo</param>
        </member>
        <member name="M:Cthuvien.form.F_LOI(System.String)">
            <summary>
            Trả lỗi đã chặt ký tự thừa
            </summary>
            <param name="b_loi">Chuỗi lỗi</param>
        </member>
        <member name="M:Cthuvien.form.Fs_LOC_LOI(System.String,System.String)">
            <summary>
            Trả lỗi đã lọc
            </summary>
            <param name="b_loi">Chuỗi lỗi</param>
            <param name="b_dk">Chuỗi lỗi không dấu b_dk=P</param>
        </member>
        <member name="M:Cthuvien.form.P_LOI(System.Web.UI.Page,System.String)">
            <summary>
            Hiện lỗi
            </summary>
            <param name="b_f">Form hiện tại</param>
            <param name="b_loi">Chuỗi lỗi</param>
        </member>
        <member name="M:Cthuvien.form.P_LOI(System.Web.UI.Page,System.String,System.String)">
            <summary>
            Hiện lỗi cho đối tượng
            </summary>
            <param name="b_f">Form hiện tại</param>
            <param name="b_ten">Đối tượng muốn hiện lỗi</param>
            <param name="b_loi">Chuỗi lỗi</param>
        </member>
        <member name="M:Cthuvien.form.Fb_CTR_TB(System.Web.UI.Control)">
            <summary>
            Kiểm tra Control dạng TextBox
            </summary>
            <param name="b_ctr">Control cần kiểm tra</param>
            <returns></returns>
        </member>
        <member name="M:Cthuvien.form.Fc_CTR(System.Web.UI.Control,System.String)">
            <summary>
            Trả Control trong Form theo tên
            </summary>
            <param name="b_f">Form</param>
            <param name="b_ten">Tên control cần trả</param>
            <returns></returns>
        </member>
        <member name="M:Cthuvien.form.Fc_CTR(System.Web.UI.Control,System.Int32)">
            <summary>
            Trả Control trong Form theo Index
            </summary>
            <param name="b_f">Form</param>
            <param name="b_idx">Index của control cần trả</param>
            <returns></returns>
        </member>
        <member name="M:Cthuvien.form.Fb_CTR(System.Web.UI.Control,System.String)">
            <summary>
            Kiểm tra có Control trong Form theo tên
            </summary>
            <param name="b_f">Form</param>
            <param name="b_ten">Tên control cần kiểm tra</param>
            <returns></returns>
        </member>
        <member name="M:Cthuvien.form.P_CTR_XOA(System.Web.UI.Control,System.String)">
            <summary>
            Xóa Control trong Form theo tên
            </summary>
            <param name="b_f">Form</param>
            <param name="b_ten">Tên control cần xóa</param>
        </member>
        <member name="M:Cthuvien.form.P_MOI(System.Web.UI.Control,System.String)">
            <summary>
            Làm mới cả Form theo điều kiên
            </summary>
            <param name="b_f">Form cần làm mới</param>
            <param name="b_xoa">Điều kiện làm mới</param>
        </member>
        <member name="M:Cthuvien.form.P_MOI(System.Web.UI.Control[],System.String)">
            <summary>
            Làm mới các control trên Form theo điều kiện
            </summary>
            <param name="a_ctr">Mảng các control</param>
            <param name="b_xoa">Điều kiện làm mới</param>
        </member>
        <member name="M:Cthuvien.form.P_KTRA(System.Web.UI.Control,System.Web.UI.Control[])">
            <summary>
            Kiểm tra kết qủa nhập của Form, loại bớt một số đối tượng
            </summary>
            <param name="b_f">Form cần kiểm tra</param>
            <param name="a_ctr_loai">Mảng các control không cần kiểm tra</param>
        </member>
        <member name="M:Cthuvien.form.P_KTRA(System.Web.UI.Control,System.Web.UI.Control)">
            <summary>
            Kiểm tra kết qủa nhập của Form, loại bớt 1 đối tượng
            </summary>
            <param name="b_f">Form cần kiểm tra</param>
            <param name="b_ctr_loai">Control không cần kiểm tra</param>
        </member>
        <member name="M:Cthuvien.form.P_KTRA(System.Web.UI.Control)">
            <summary>
            Kiểm tra kết qủa nhập của Form
            </summary>
            <param name="b_f">Form cần kiểm tra</param>
        </member>
        <member name="M:Cthuvien.form.Fs_TKHAO(System.String)">
            <summary>
            Tách tên Form từ chuỗi có đường dẫn
            </summary>
            <param name="b_tkhao">Chuỗi tên form có đường dẫn</param>
            <returns></returns>
        </member>
        <member name="M:Cthuvien.form.P_XOA_CTR(System.Web.UI.HtmlControls.HtmlTableCell)">
            <summary>
            Xóa hết Control khỏi Cell
            </summary>
            <param name="b_cell">Cell cần xóa</param>
        </member>
        <member name="M:Cthuvien.form.P_LOAI_CTR(System.Web.UI.HtmlControls.HtmlTableCell,System.String)">
            <summary>
            Xóa Control khác tên khỏi Cell
            </summary>
            <param name="b_cell">Cell cần xoa</param>
            <param name="b_ten">Tên control giữ lại</param>
        </member>
        <member name="M:Cthuvien.form.P_XOA_CTR(System.Web.UI.HtmlControls.HtmlTableCell,System.String)">
            <summary>
            Xóa Control khỏi Cell
            </summary>
            <param name="b_cell">Cell cần xóa</param>
            <param name="b_ten">Tên control cần xóa</param>
        </member>
        <member name="M:Cthuvien.form.P_LIST_BANG(Cthuvien.DR_list,System.Data.DataTable,System.String)">
            <summary>
            Đặt bảng cho List
            </summary>
            <param name="b_drop">DropDown cần đặt</param>
            <param name="b_dt">Bảng đặt</param>
            <param name="b_cot">Cot truong lay so lieu theo tra,lke</param>
        </member>
        <member name="M:Cthuvien.form.P_LKE_DAT(Cthuvien.DR_lke,System.Data.DataTable,System.Int32,System.String)">
            <summary>
            Đặt gia tri cho Lke tu bang
            </summary>
            <param name="b_drop">DropDown cần đặt</param>
            <param name="b_dt">Bảng đặt</param>
            <param name="b_hang">Hang lay so lieu</param>
            <param name="b_cot">Cot truong lay so lieu theo tra,lke</param>
        </member>
        <member name="M:Cthuvien.form.P_LKE_DAT(Cthuvien.DR_lke,System.String,System.String)">
            <summary>
            Đặt gia tri cho Lke tu bien
            </summary>
            <param name="b_drop">DropDown cần đặt</param>
            <param name="b_ma">Gia tri ma</param>
            <param name="b_ten">Gia tri ten</param>
        </member>
        <member name="M:Cthuvien.form.P_DROP_BANG(Cthuvien.DR_nhap,System.Data.DataTable)">
            <summary>
            Đặt bảng cho dropdown
            </summary>
            <param name="b_drop">DropDown cần đặt</param>
            <param name="b_dt">Bảng đặt</param>
        </member>
        <member name="M:Cthuvien.form.P_DROP_BANG(Cthuvien.DR_nhap,System.Data.DataTable,System.String)">
            <summary>
            Đặt bảng và giá trị default cho dropdown
            </summary>
            <param name="b_drop">DropDown</param>
            <param name="b_dt">Bảng đặt</param>
            <param name="b_gtri">Giá trị đặt default</param>
        </member>
        <member name="M:Cthuvien.form.Fobj_DROP(Cthuvien.DR_nhap)">
            <summary>
            Trả giá trị cột hiển thị tại hàng selected
            </summary>
            <param name="b_drop">DropDown</param>
            <returns></returns>
        </member>
        <member name="M:Cthuvien.form.Fi_DROP_HANG(Cthuvien.DR_nhap,System.String)">
            <summary>
            Tìm thứ tự hàng theo giá trị đưa vào
            </summary>
            <param name="b_drop">DropDown</param>
            <param name="b_gtri">Giá trị cần tìm</param>
            <returns></returns>
        </member>
        <member name="M:Cthuvien.form.P_UPa_DAT(System.Web.UI.Control,System.String)">
            <summary>
            Làm mới các Update Panel theo tên
            </summary>
            <param name="b_f">Form chứa các UpdatePanel</param>
            <param name="b_ten">Chuỗi tên các UpdatePanel cách nhau bởi dấu phẩy</param>
        </member>
        <member name="M:Cthuvien.form.P_UPa_MOI(System.Web.UI.Control,System.String)">
            <summary>
            Làm mới các Update Panel trong Form
            </summary>
            <param name="b_f">Form chứa UpdatePanel</param>
            <param name="b_loai"></param>
        </member>
        <member name="M:Cthuvien.form.P_TEXT_ROW(System.Web.UI.Control,System.Data.DataTable@,System.String,System.Web.UI.Control[],System.Boolean)">
            <summary>
            Lấy Text của Form vào Row có tên trường tương ứng, loại bớt 1 số đối tượng
            </summary>
            <param name="b_f">Form cần lấy</param>
            <param name="b_dt">Bảng kết quả</param>
            <param name="b_ucd">Ký tự Unicode cần thêm</param>
            <param name="a_ctr_loai">Mảng các đối tượng không cần lấy</param>
            <param name="b_all">Lấy tất cả không: True-Lấy tất, False-Chỉ lấy các trường có nhap='N'</param>
        </member>
        <member name="M:Cthuvien.form.P_TEXT_ROW(System.Web.UI.Control,System.Data.DataTable@,System.String,System.Web.UI.Control[])">
            <summary>
            Lấy Text của Form vào Row có tên trường tương ứng, loại bớt 1 số đối tượng
            </summary>
            <param name="b_f">Form cần lấy</param>
            <param name="b_dt">Bảng kết quả</param>
            <param name="b_ucd">Ký tự Unicode cần thêm</param>
            <param name="a_ctr_loai">Mảng các đối tượng không cần lấy</param>
        </member>
        <member name="M:Cthuvien.form.P_TEXT_ROW(System.Web.UI.Control,System.Data.DataTable@,System.String,System.Web.UI.Control)">
            <summary>
            Chuyển Text của Form vào Row có tên trường tương ứng,loại bớt đối tượng thuộc b_ctr_loai
            </summary>
            <param name="b_f">Form cần lấy</param>
            <param name="b_dt">Bảng kết quả</param>
            <param name="b_ucd">Ký tự Unicode cần thêm</param>
            <param name="b_ctr_loai">Đối tượng không cần lấy</param>
        </member>
        <member name="M:Cthuvien.form.P_TEXT_ROW(System.Web.UI.Control,System.Data.DataTable@,System.String,System.Web.UI.Control,System.Boolean)">
            <summary>
            Lấy Text của Form vào Row có tên trường tương ứng, loại bớt 1 đối tượng
            </summary>
            <param name="b_f">Form cần lấy</param>
            <param name="b_dt">Bảng kết quả</param>
            <param name="b_ucd">Ký tự Unicode cần thêm</param>
            <param name="b_ctr_loai">Đối tượng không cần lấy</param>
            <param name="b_all">Lấy tất cả không: True-Lấy tất, False-Chỉ lấy các trường có nhap='N'</param>
        </member>
        <member name="M:Cthuvien.form.P_TEXT_ROW(System.Web.UI.Control,System.Data.DataTable@,System.String)">
            <summary>
            Lấy Text của Form vào Row có tên trường tương ứng
            </summary>
            <param name="b_f">Form cần lấy</param>
            <param name="b_dt">Bảng kết quả</param>
            <param name="b_ucd">Ký tự Unicode cần thêm</param>
        </member>
        <member name="M:Cthuvien.form.P_TEXT_ROW(System.Web.UI.Control,System.Data.DataTable@,System.String,System.Boolean)">
            <summary>
            Lấy Text của Form vào Row có tên trường tương ứng
            </summary>
            <param name="b_f">Form cần lấy</param>
            <param name="b_dt">Bảng kết quả</param>
            <param name="b_ucd">Ký tự Unicode cần thêm</param>
            <param name="b_all">Lấy tất cả không: True-Lấy tất, False-Chỉ lấy các trường có nhap='N'</param>
        </member>
        <member name="M:Cthuvien.form.P_TEXT_ROW(System.Web.UI.Control,System.Data.DataTable@)">
            <summary>
            Lấy Text của Form vào Row có tên trường tương ứng, ký tự Unicode="'N"
            </summary>
            <param name="b_f">Form cần lấy</param>
            <param name="b_dt">Bảng kết quả</param>
        </member>
        <member name="M:Cthuvien.form.P_TEXT_ROW(System.Web.UI.Control,System.Data.DataTable@,System.Boolean)">
            <summary>
            Lấy Text của Form vào Row có tên trường tương ứng, ký tự Unicode="'N"
            </summary>
            <param name="b_f">Form cần lấy</param>
            <param name="b_dt">Bảng kết quả</param>
            <param name="b_all">Lấy tất cả không: True-Lấy tất, False-Chỉ lấy các trường có nhap='N'</param>
        </member>
        <member name="M:Cthuvien.form.P_TEXT_ROW(System.Web.UI.Control,System.Data.DataTable@,System.Web.UI.Control)">
            <summary>
            Chuyển Text của Form vào Row Unicode="N'", loại bớt đtượng thuộc b_ctr_loai
            </summary>
            <param name="b_f">Form cần lấy</param>
            <param name="b_dt">Bảng kết quả</param>
            <param name="b_ctr_loai">Đối tượng không cần lấy</param>
        </member>
        <member name="M:Cthuvien.form.P_TEXT_ROW(System.Web.UI.Control,System.Data.DataTable@,System.Web.UI.Control,System.Boolean)">
            <summary>
            Chuyển Text của Form vào Row Unicode="N'", loại bớt đtượng thuộc b_ctr_loai
            </summary>
            <param name="b_f">Form cần lấy</param>
            <param name="b_dt">Bảng kết quả</param>
            <param name="b_ctr_loai">Đối tượng không cần lấy</param>
            <param name="b_all">Lấy tất cả không: True-Lấy tất, False-Chỉ lấy các trường có nhap='N'</param>
        </member>
        <member name="M:Cthuvien.form.P_GTRI_TEXT(System.Web.UI.Control,System.String)">
            <summary>
            Đặt giá trị cho Control
            </summary>
            <param name="b_ctr">Control</param>
            <param name="b_gtri">Giá trị</param>
        </member>
        <member name="M:Cthuvien.form.P_GTRI_TEXT(System.Web.UI.Control,System.String,System.String)">
            <summary>
            Đặt giá trị cho Control qua tên
            </summary>
            <param name="b_f">Form</param>
            <param name="b_ten">Tên control</param>
            <param name="b_gtri">Giá trị đặt</param>
        </member>
        <member name="M:Cthuvien.form.P_ROW_TEXT(System.Web.UI.Control,System.Data.DataRow)">
            <summary>
            Chuyển Row vào Text của Form có tên tương ứng
            </summary>
            <param name="b_f">Form</param>
            <param name="b_dr">DataRow</param>
        </member>
        <member name="M:Cthuvien.form.P_ROW_TEXT(System.Web.UI.Control,System.Data.DataRow,System.String)">
            <summary>
            Chuyển Row vào Text của Form có tên tương ứng, loại bỏ 1 cột
            </summary>
            <param name="b_f">Form</param>
            <param name="b_dr">DataRow</param>
            <param name="b_cot">Tên cột</param>
        </member>
        <member name="M:Cthuvien.form.P_ROW_TEXT(System.Web.UI.Control,System.Data.DataRow,System.String[])">
            <summary>
            Chuyển Row vào Text của Form có tên tương ứng, loại bỏ vài cột
            </summary>
            <param name="b_f">Form</param>
            <param name="b_dr">DataRow</param>
            <param name="a_cot">Mảng các tên cột</param>
        </member>
        <member name="M:Cthuvien.form.P_TABLE_TEXT(System.Web.UI.Control,System.Data.DataTable)">
            <summary>
            Chuyển row 0 của 1 DataTable vào Text của Form có tên tương ứng
            </summary>
            <param name="b_f">Form</param>
            <param name="b_dt">DataTable</param>
        </member>
        <member name="T:Cthuvien.kenh">
            <summary>Xu ly kenh</summary>
        </member>
        <member name="M:Cthuvien.kenh.Fdr_TSO_KNOI(System.String)">
            <summary>Lấy tham nối DB</summary>
        </member>
        <member name="T:Cthuvien.kenh.ckenh">
            <summary>Khai báo kênh kết nối</summary>
        </member>
        <member name="M:Cthuvien.kenh.ckenh.BTRAN">
            <summary>Bắt đầu Transaction</summary>
        </member>
        <member name="M:Cthuvien.kenh.ckenh.KTRAN">
            <summary>Kết thúc Transaction</summary>
        </member>
        <member name="M:Cthuvien.kenh.ckenh.MO">
            <summary>Mở kênh kết nối DB</summary>
        </member>
        <member name="M:Cthuvien.kenh.ckenh.DONG">
            <summary>Đóng kênh kết nối DB</summary>
        </member>
        <member name="M:Cthuvien.khac.Fs_FORM_LIST(System.String,System.String,System.String,System.Int32,System.Object[])">
            <summary> Tra goi y </summary>
        </member>
        <member name="M:Cthuvien.khac.Fs_FORM_VTRI(System.String,System.Int32,System.String,System.String,System.Int32,System.String)">
            <summary> Tra row moi </summary>
        </member>
        <member name="M:Cthuvien.khac.Fs_runMode">
            <summary> Mode </summary>
        </member>
        <member name="M:Cthuvien.khac.Fs_NUOC">
            <summary> Nuoc </summary>
        </member>
        <member name="M:Cthuvien.khac.F_KIEU">
            <summary>
            Trả lại kiểu theo tên kiểu
            </summary>
            <param name="b_kieu">Tên kiểu: D-Datetime, N-double, I-int, B-boolean, khác-string</param>
            <returns></returns>
        </member>
        <member name="M:Cthuvien.khac.Fs_KIEU(System.Object)">
            <summary>
            Trả kiểu của 1 object là 1 ký tự: Datetime-D, int,double-N, boolean-B, string-S
            </summary>
            <param name="b_gtri">Object</param>
            <returns></returns>
        </member>
        <member name="M:Cthuvien.khac.Fs_KIEU(System.Object[])">
            <summary>
            Trả kiểu của nhiều object, là 1 chuỗi các ký tự
            </summary>
            <param name="a_gtri">Mảng các object</param>
            <returns></returns>
        </member>
        <member name="M:Cthuvien.khac.Fi_VTRI_MANG(System.String[],System.String)">
            <summary>
            Tra thu tu trong mang a_ten theo b_ten
            </summary>
            <param name="a_ten">Mảng các tên</param>
            <param name="b_ten">Tên cần tìm</param>
            <returns></returns>
        </member>
        <member name="M:Cthuvien.khac.Fobj_GTRI_MANG(System.String[],System.Object[],System.String)">
            <summary>
            Trả object trong mảng a_gtri theo b_ten có thứ tự trong mảng a_ten
            </summary>
            <param name="a_ten">Mảng các tên</param>
            <param name="a_gtri">Mảng các object</param>
            <param name="b_ten">Tên cần tìm</param>
            <returns></returns>
        </member>
        <member name="M:Cthuvien.khac.Fn_ID_MOI(Cthuvien.kenh.ckenh,System.String)">
            <summary>
            Xin ID moi / b_nv="ID"
            </summary>
            <param name="b_kenh">Kênh nối</param>
            <param name="b_nv">Nghiệp vụ xin ID</param>
            <returns></returns>
        </member>
        <member name="M:Cthuvien.khac.Fs_abc(System.Int32)">
            <summary>
            Trả ký tự trong chuỗi 'abcdefghigklmn' theo vị trí cần tìm
            </summary>
            <param name="b_tt">Vị trí cần tìm</param>
            <returns></returns>
        </member>
        <member name="M:Cthuvien.khac.ROUNDN(System.Double,System.Int32)">
            <summary>
            Làm tròn số
            </summary>
            <param name="b_so">Số cần làm tròn</param>
            <param name="b_tp">Số chữ số thập phân làm tròn</param>
            <returns></returns>
        </member>
        <member name="M:Cthuvien.khac.Fs_MA_TEN(System.String,System.String,System.String,System.String)">
            <summary>Trả tên</summary>
            <param name="b_bang">Bảng kiểm tra</param>
            <param name="b_kq">Tên trường kết quả. Nếu để trắng trả số record tìm thấy</param>
            <param name="b_truong">Trường kiểm tra</param>
            <param name="b_ma"> Giá trị kiểm tra</param>
            <param name="b_dk"> Tự thêm đơn vị, nsd, pass C-Có, K-Không</param>
            <returns></returns>
        </member>
        <member name="M:Cthuvien.khac.P_MA_LOI(Cthuvien.ma,System.Boolean)">
            <summary>
            Kiểm tra TextBox MA đẩy lỗi
            </summary>
            <param name="b_ma">Textbox MA cần kiểm tra</param>
            <param name="b_nh">Điều kiện kiểm tra</param>
        </member>
        <member name="M:Cthuvien.khac.Fs_MA_LOI(System.String,System.String,System.String)">
            <summary>Trả lỗi</summary>
            <param name="b_ten"></param>
            <param name="b_ma"></param>
            <param name="b_ktra"></param>
            <returns></returns>
        </member>
        <!-- Badly formed XML comment ignored for member "M:Cthuvien.khac.P_NHOM_LOI(Cthuvien.nhom,System.Boolean)" -->
        <member name="M:Cthuvien.khac.P_SO_LOI(Cthuvien.so,System.Boolean)">
            <summary>
            Kiểm tra TextBox số
            </summary>
            <param name="b_so">Textbox số</param>
            <param name="b_nh">Điều kiện kiểm tra</param>
        </member>
        <member name="M:Cthuvien.khac.Fb_NGAY_TRANG(System.String)">
            <summary>
            Kiểm tra chuỗi ngày trắng
            </summary>
            <param name="b_ngay">Chuỗi cần kiểm tra</param>
            <returns></returns>
        </member>
        <member name="M:Cthuvien.khac.P_THANG_LOI(Cthuvien.thang,System.Boolean)">
            <summary>
            Kiểm tra TextBox tháng
            </summary>
            <param name="b_tb_thang">Textbox tháng</param>
            <param name="b_nh">Điều kiện kiểm tra</param>
        </member>
        <member name="M:Cthuvien.khac.Fs_NGAY_LOI(System.String,System.Boolean,System.Boolean)">
            <summary>
            Kiểm tra textbox ngày
            </summary>
            <param name="b_ngay">Textbox ngày cần kiểm tra</param>
            <param name="b_kieu">Điều kiện cho phép ngày trắng hay không</param>
            <param name="b_nhap">Điều kiện kiểm tra</param>
            <returns></returns>
        </member>
        <member name="M:Cthuvien.khac.P_NGAY_LOI(Cthuvien.ngay,System.Boolean)">
            <summary>
            Đẩy lỗi TextBox ngày
            </summary>
            <param name="b_tb_ngay">Textbox ngày</param>
            <param name="b_nh">Điều kiện kiểm tra</param>
        </member>
        <member name="M:Cthuvien.khac.Fs_NAM_LOI(System.String)">
            <summary>
            Đẩy lỗi TextBox năm
            </summary>
            <param name="b_nam">Chuỗi năm</param>
            <returns></returns>
        </member>
        <member name="M:Cthuvien.khac.Fs_CTR(System.Web.UI.Control)">
            <summary>
            Tạo chuỗi Control
            </summary>
        </member>
        <member name="M:Cthuvien.khac.Fs_CTRN(System.String)">
            <summary>
             Form tạo chuỗi Control từ File
            </summary>
        </member>
        <member name="M:Cthuvien.khac.Fs_CTRN(System.Web.UI.Control)">
            <summary>
             Form tạo chuỗi Control
            </summary>
        </member>
        <member name="M:Cthuvien.khac.Fs_TMUCF(System.String)">
            <summary>
            Tạo chuỗi thu muc form
            </summary>
        </member>
        <member name="M:Cthuvien.khac.Fs_tmFile(System.String)">
            <summary>Tra thu muc luu File</summary>
        </member>
        <member name="M:Cthuvien.khac.P_taoTmuc(System.String)">
            <summary>Tao thu muc</summary>
            <param name="b_tmuc">Tên thu muc</param>
        </member>
        <member name="M:Cthuvien.khac.Fdt_Excel(System.String)">
            <summary>Mở file Excel</summary>
            <param name="b_ten">Tên File</param>
            <returns></returns>
        </member>
        <member name="M:Cthuvien.khac.Fdt_Excel(System.String,System.String)">
            <summary>Mở file Excel chọn sheet</summary>
            <param name="b_ten">Tên File</param>
            <param name="b_sheet">Tên sheet</param>
            <returns></returns>
        </member>
        <member name="M:Cthuvien.khac.P_FileB(System.String,System.String,System.String)">
            <summary>Ghi vào File binary</summary>
            <param name="b_chuoi">Nội dung cần ghi</param>
            <param name="b_file">Tên File</param>
            <returns></returns>
        </member>
        <member name="M:Cthuvien.khac.P_FileW(System.String,System.String,System.Char)">
            <summary>Ghi vào File Text</summary>
            <param name="b_file">Tên File</param>
            <param name="b_chuoi">Nội dung cần ghi</param>
            <param name="b_dk">Tạo File mới: C-Có, K-Không. Default=Có</param>
        </member>
        <member name="M:Cthuvien.khac.P_FileW(System.String,System.Data.DataTable,System.Int32,System.String,System.Char,System.Char)">
            <summary>Ghi bảng vào File Text</summary>
            <param name="b_file">Tên File</param>
            <param name="b_dt">Bảng cần ghi</param>
            <param name="b_hang">Hang cần ghi</param>
            <param name="a_cot">Các cột lấy số liệu</param>
            <param name="b_cach">Dấu cách giữa các trường của 1 dòng</param>
            <param name="b_dk">Tạo File mới: C-Có, K-Không. Default=Có</param>
        </member>
        <member name="M:Cthuvien.khac.P_FileW(System.String,System.Data.DataTable,System.Int32,System.Int32,System.String,System.Char,System.Char)">
            <summary>Ghi bảng vào File Text</summary>
            <param name="b_file">Tên File</param>
            <param name="b_dt">Bảng cần ghi</param>
            <param name="b_hangD">Tu hang</param>
            <param name="b_hangC">Den hang</param>
            <param name="a_cot">Các cột lấy số liệu</param>
            <param name="b_cach">Dấu cách giữa các trường của 1 dòng</param>
            <param name="b_dk">Tạo File mới: C-Có, K-Không. Default=Có</param>
        </member>
        <member name="M:Cthuvien.khac.P_FileW(System.String,System.Data.DataTable,System.String[],System.Char,System.Char)">
            <summary>Ghi bảng vào File Text</summary>
            <param name="b_file">Tên File</param>
            <param name="b_dt">Bảng cần ghi</param>
            <param name="a_cot">Các cột lấy số liệu</param>
            <param name="b_cach">Dấu cách giữa các trường của 1 dòng</param>
            <param name="b_dk">Tạo File mới: C-Có, K-Không. Default=Có</param>
        </member>
        <member name="M:Cthuvien.khac.P_FileW(System.String,System.Data.DataTable,System.String,System.Char,System.Char)">
            <summary>Ghi bảng vào File Text</summary>
            <param name="b_file">Tên File</param>
            <param name="b_dt">Bảng cần ghi</param>
            <param name="a_cot">Các cột lấy số liệu, các cột cách nhau dấu phẩy. Nếu cột bằng trắng sẽ lấy tất cả cột của bảng theo thứ tự</param>
            <param name="b_cach">Dấu cách giữa các trường của 1 dòng</param>
            <param name="b_dk">Tạo File mới: C-Có, K-Không. Default=Có</param>
        </member>
        <member name="M:Cthuvien.khac.Fs_FileR(System.String,System.Char)">
            <summary>Đọc cả File Text. Trả thành 1 chuỗi</summary>
            <param name="b_file">Tên File</param>
            <param name="b_cach">Dấu cách giữa các trường. Default=|</param>
        </member>
        <member name="M:Cthuvien.khac.Fs_FileR(System.String,System.Int32)">
            <summary>Đọc 1 dòng File Text</summary>
            <param name="b_file">Tên File</param>
            <param name="b_dong">Lấy số liệu của dòng</param>
        </member>
        <member name="M:Cthuvien.khac.Fs_FileR(System.String,System.Data.DataTable@,System.Int32,System.Char)">
            <summary>Chuyen File Text vào bảng</summary>
            <param name="b_file">Tên File</param>
            <param name="b_tu">Lấy số liệu từ dòng. Default=1</param>
            <param name="b_cach">Dấu cách giữa các trường. Default=dấu phẩy</param>
            <returns></returns>
        </member>
        <member name="M:Cthuvien.khac.Fim_strIm(System.String)">
            <summary>Chuyển chuỗi thành ảnh</summary>
            <param name="b_fi"></param>
            <returns></returns>
        </member>
        <member name="M:Cthuvien.khac.Fas_CSS(System.String,System.String)">
            <summary>Trả mảng mô tả CSS theo tên CSS</summary>
            <param name="b_fcss">Tên File CSS</param>
            <param name="b_css">Tên CSS</param>
            <returns></returns>
        </member>
        <member name="M:Cthuvien.khac.P_FONT(System.String[],System.String@,System.Single@)">
            <summary>Trả tên font và kích thước từ mảng chuỗi mô tả CSS</summary>
            <param name="a_css">Mảng chuỗi chuỗi mô tả CSS</param>
            <param name="b_font">Tên Font</param>
            <param name="b_size">Kich thước Font</param>
        </member>
        <member name="M:Cthuvien.khac.Fi_rong(System.String,System.String,System.String)">
            <summary>Độ rộng chuỗi</summary>
            <param name="b_file">Tên File CSS</param>
            <param name="b_css">Tên CSS</param>
            /// <param name="b_chu">Chuỗi</param>
            <returns></returns>
        </member>
        <member name="M:Cthuvien.khac.Fn_rong(System.String,System.String,System.Data.DataTable,System.String)">
            <summary>Độ rộng Max 1 cột trong bảng</summary>
            <param name="b_file">Tên File CSS</param>
            <param name="b_css">Tên CSS</param>
            <param name="b_dt">Bảng</param>
            /// <param name="b_cot">Tên cột</param>
            <returns></returns>
        </member>
        <member name="M:Cthuvien.khac.Fpal_TAO_NHAN(System.String,System.String,System.String,System.Double,System.Int32,System.String,System.String,System.Double)">
            <summary>Tạo Lable cho Menu</summary>
            <param name="b_ma">Ký tự Key</param>
            <param name="b_ten">Tên</param>
            <param name="b_loai">Loại</param>
            <param name="b_rong">Độ rộng tối thiểu</param>
            <param name="b_cao">Độ cao</param>
            <param name="b_css_chu">Tên CSS cho chữ</param>
            <param name="b_tmuc">Thư mục chứa ứng dụng</param>
            <param name="b_dau">Chiều Menu</param>
            <returns></returns>
        </member>
        <member name="M:Cthuvien.khac.Fpal_TAO_CTR(System.Int32,System.Double,System.Int32,System.Data.DataTable,System.String,System.Double)">
            <summary>Tạo Control cho Menu</summary>
            <param name="b_idem">Thứ tự menu</param>
            <param name="b_rong">Độ rộng tối thiểu</param>
            <param name="b_cao">Độ cao</param>
            <param name="b_dt">Bảng chứa định nghĩa Menu</param>
            <param name="b_tmuc">Thư mục chứa ứng dụng</param>
            <param name="b_dau">Chiều Menu</param>
            <returns></returns>
        </member>
        <member name="M:Cthuvien.khac.Fs_MENU(System.String,System.String,System.Double,System.Double,System.Double,System.Int32,System.Double,System.String,System.String)">
            <summary>Tạo Menu dọc</summary>
            <param name="b_form">Tên Form Menu</param>
            <param name="b_ma">Ký tự Key</param>
            <param name="b_x">Tọa độ X</param>
            <param name="b_y">Tọa độ Y</param>
            <param name="b_rong">Độ rộng tối thiểu</param>
            <param name="b_cao">Độ cao</param>
            <param name="b_mhinh">Độ rộng màn hình</param>
            <param name="b_tmuc">Tên thư mục chứa ứng dụng</param>
            <param name="b_fcss">Tên File CSS</param>
        </member>
        <member name="M:Cthuvien.khac.Fs_MENUN(System.String,System.String,System.Double,System.Double,System.Double,System.Int32,System.Double,System.String,System.String)">
            <summary>Tạo Menu ngang</summary>
            <param name="b_form">Tên Form Menu</param>
            <param name="b_ma">Ký tự Key</param>
            <param name="b_x">Tọa độ X</param>
            <param name="b_y">Tọa độ Y</param>
            <param name="b_rong">Độ rộng tối thiểu</param>
            <param name="b_cao">Độ cao</param>
            <param name="b_mhinh">Độ rộng màn hình</param>
            <param name="b_tmuc">Tên thư mục chứa ứng dụng</param>
            <param name="b_fcss">Tên File CSS</param>
        </member>
        <member name="M:Cthuvien.khac.Fs_BAR(System.String,System.Int32,System.Int32,System.String)">
            <summary>Tạo Bar dọc</summary>
            <param name="b_form">Tên Form Menu</param>
            <param name="b_x">Tọa độ X</param>
            <param name="b_rong">Độ rộng tối thiểu</param>
            <param name="b_fcss">Tên File CSS</param>
        </member>
        <member name="M:Cthuvien.khac.Fs_BARN(System.String,System.Int32,System.Int32,System.String)">
            <summary>Tạo Bar ngang</summary>
            <param name="b_form">Tên Form Menu</param>
            <param name="b_x">Tọa độ X</param>
            <param name="b_rong">Độ rộng tối thiểu</param>
            <param name="b_fcss">Tên File CSS</param>
        </member>
        <member name="M:Cthuvien.khac.Fs_TTT_TAO(System.Data.DataTable,System.String)">
            <summary>Tạo lưới thông tin thêm</summary>
            <param name="b_dt">Bảng đã khai sẵn</param>
            <param name="b_idT">Thêm tiền tố Id</param>
        </member>
        <member name="M:Cthuvien.khac.Fs_TTT_TAO_NH(System.Data.DataTable)">
            <summary>Tạo lưới thông tin thêm co nhom</summary>
            <param name="b_dt">Bảng đã khai sẵn</param>
            <param name="b_idT">Thêm tiền tố Id</param>
        </member>
        <member name="M:Cthuvien.khac.Fs_LOC_TAO(System.Data.DataTable,System.String)">
            <summary>Tạo lưới lọc</summary>
            <param name="b_dt">Bảng đã khai sẵn</param>
        </member>
        <member name="M:Cthuvien.khac.Fb_KTRA_QU(System.String,System.String)">
            <summary> Xử lý quyền </summary>
        </member>
        <!-- Badly formed XML comment ignored for member "M:Cthuvien.khac.P_QU_DICH(System.String,System.String)" -->
        <!-- Badly formed XML comment ignored for member "M:Cthuvien.khac.Fb_HOI_QU(System.String)" -->
        <member name="M:Cthuvien.khac.Fs_DICH_CDAU(System.String)">
            <summary>
            Trả tiếng việt có dấu
            </summary>
            <param name="b_tim">Chuỗi cần tìm</param>
        </member>
        <member name="M:Cthuvien.khac.Fs_GUIS(System.String,System.String,System.String,System.String,System.String,System.String,System.String)">
            <summary>
            Gửi SMS
            </summary>
            <param name="b_url">Service</param>
            <param name="b_sender">Nơi gửi</param>
            <param name="b_user">Người gửi</param>
            <param name="b_pass">Pass</param>
            <param name="b_mobi">Số Mobile</param>
            <param name="b_sms">Nội dung SMS</param>
            <param name="b_nhan">Tiêu đề của SMS</param>
            <returns></returns>
        </member>
        <member name="M:Cthuvien.khac.Fs_GUIS(System.String,System.String,System.String,System.String)">
            <summary>
            Gửi SMS
            </summary>
            <param name="b_mobi">Số Mobile</param>
            <param name="b_sms">Nội dung SMS</param>
            <param name="b_nhan">Tiêu đề của SMS. Default=""</param>
            <param name="b_tm">Form truy cập kèm theo. Default=""</param>
            <returns></returns>
        </member>
        <member name="M:Cthuvien.khac.Fs_MAIL(System.String,System.Int32,System.String,System.String,System.String,System.String,System.String,System.String,System.Boolean)">
            <summary>
            Gửi Mail
            </summary>
            <param name="b_msv">Tên mail server</param>
            <param name="b_cong">Số cổng. Nếu bằng 0 sẽ đặt 25</param>
            <param name="b_nsd">Tên NSD</param>
            <param name="b_pas">Password</param>
            <param name="b_tu">Địa chỉ mail người gửi</param>
            <param name="b_den">Địa chỉ mail người nhận</param>
            <param name="b_nhan">Tiêu đề mail</param>
            <param name="b_nd">Nội dung</param>
            <param name="b_mahoa">Server mail có dùng chế độ mã hóa không. Default false</param>
            <returns></returns>
        </member>
        <member name="M:Cthuvien.khac.P_CHON_UP(System.String,System.String,System.String,System.String,System.Object[])">
            <summary> Update bang chon </summary>
             <param name="b_form">Tên form</param>
             <param name="b_bang">Tên bảng</param>
             <param name="b_cKey">Cột key để đồng bộ chọn</param>
             <param name="b_cThay">Các cột cần đồng bộ giá trị, cách nhau dấu phẩy</param>
             <param name="a_dt">Tham số để tạo bảng đồng bộ</param>
        </member>
        <member name="M:Cthuvien.khac.P_CHON_BO(System.String,System.String,System.String)">
            <summary> Bo chon theo dieu kien </summary>
             <param name="b_form">Tên form</param>
             <param name="b_bang">Tên bảng</param>
             <param name="b_dk">Điều kiện bỏ chọn</param>
        </member>
        <member name="M:Cthuvien.khac.Fs_GCAY_NG(System.String,System.String,System.Data.DataTable,System.String)">
            <summary> Trả các mã cùng cấp. Các mã cách nhau dấu phẩy </summary>
             <param name="b_ma">Mã</param>
             <param name="b_dk">Điều kiện lấy theo cột tc. Để "" lấy tất cả </param>
             <param name="b_dt">Bảng</param>
             <param name="b_cot">Các cột tên trường, cách nhau dấu phẩy. Giá trị Default="ma,tc,cap"</param>
        </member>
        <member name="M:Cthuvien.khac.Fs_GCAY_NG(System.String[],System.Object[],System.String,System.Data.DataTable,System.String)">
            <summary> Trả các mã cùng cấp. Các mã cách nhau dấu phẩy </summary>
             <param name="a_ten">Cac ten truong</param>
             <param name="a_gtri">Cac gia tri truong</param>
             <param name="b_dk">Điều kiện lấy theo cột tc. Để "" lấy tất cả </param>
             <param name="b_dt">Bảng</param>
             <param name="b_cot">Các cột tên trường, cách nhau dấu phẩy. Giá trị Default="tc,cap"</param>
        </member>
        <member name="M:Cthuvien.khac.P_GCAY_DAU(System.Data.DataTable@,System.String)">
            <summary> Đặt dấu cho bảng </summary>
             <param name="b_dt">Bảng</param>
             <param name="b_cot">Các cột tên trường, cách nhau dấu phẩy. Giá trị Default="ten,tc"</param>
        </member>
        <member name="M:Cthuvien.khac.P_GCAY_TRU(System.Data.DataTable@,System.String,System.String,System.String)">
            <summary> Đặt dấu cho bảng </summary>
             <param name="b_dt">Bảng</param>
             <param name="b_cot">Các cột tên trường, cách nhau dấu phẩy. Giá trị Default="ten,tc"</param>
        </member>
        <member name="M:Cthuvien.khac.P_GCAY_VTRI(System.String,System.Data.DataTable,System.Int32@,System.Int32@,System.String)">
            <summary> Trả các hàng bậc dưới của 1 mã </summary>
             <param name="b_ma">Mã</param>
             <param name="b_dt">Bảng</param>
             <param name="b_vtri1">Hàng bắt đầu</param>
             <param name="b_vtri2">Hàng kết thúc</param>
             <param name="b_cot">Các cột tên trường, cách nhau dấu phẩy. Giá trị Default="ma,cap"</param>
        </member>
        <member name="M:Cthuvien.khac.P_GCAY_VTRI(System.String[],System.Object[],System.Data.DataTable,System.Int32@,System.Int32@,System.String)">
            <summary> Trả các hàng bậc dưới của các mã </summary>
             <param name="a_ten">Cac ten truong</param>
             <param name="a_gtri">Cac gia tri truong</param>
             <param name="b_dt">Bảng</param>
             <param name="b_vtri1">Hàng bắt đầu</param>
             <param name="b_vtri2">Hàng kết thúc</param>
             <param name="b_cot">Cột tên trường cap. Giá trị Default="cap"</param>
        </member>
        <member name="M:Cthuvien.khac.P_GCAY_THU(System.String,System.Data.DataTable@,System.String)">
            <summary> Thu lại vùng cấp dưới 1 mã </summary>
             <param name="b_ma">Mã</param>
             <param name="b_dt">Bảng</param>
             <param name="b_cot">Các cột tên trường, cách nhau dấu phẩy. Giá trị Default="ma,cap"</param>
        </member>
        <member name="M:Cthuvien.khac.P_GCAY_THU(System.String[],System.Object[],System.Data.DataTable@,System.String)">
            <summary> Thu lại vùng cấp dưới cac mã </summary>
             <param name="a_ten">Cac ten truong</param>
             <param name="a_gtri">Cac gia tri truong</param>
             <param name="b_dt">Bảng</param>
             <param name="b_cot">Cột tên trường cap. Giá trị Default="cap"</param>
        </member>
        <member name="M:Cthuvien.khac.P_GCAY_TTR(System.String,System.String,System.Data.DataTable@,System.String)">
            <summary> Đặt tình trạng 1 hàng bậc cao </summary>
             <param name="b_ma">Mã</param>
             <param name="b_ttr">Tình trạng (+,-)</param>
             <param name="b_dt">Bảng</param>
             <param name="b_cot">Các cột tên trường, cách nhau dấu phẩy. Giá trị Default="ma,tc,cap"</param>
        </member>
        <member name="M:Cthuvien.khac.P_GCAY_TTR(System.String[],System.Object[],System.String,System.Data.DataTable@,System.String)">
            <summary> Đặt tình trạng 1 hàng bậc cao </summary>
             <param name="a_ten">Cac ten truong</param>
             <param name="a_gtri">Cac gia tri truong</param>
             <param name="b_ttr">Tình trạng (+,-)</param>
             <param name="b_dt">Bảng</param>
             <param name="b_cot">Các cột tên trường, cách nhau dấu phẩy. Giá trị Default="ten,tc"</param>
        </member>
        <member name="M:Cthuvien.Ftp.DownloadFile(System.String,System.String)">
            <summary>
            DownloadFile
            </summary>
            <param name="source">File gốc</param>
            <param name="dest">File đích</param>
            <returns></returns>
        </member>
        <member name="M:Cthuvien.Ftp.ListDirectoryDetails(System.String)">
            <summary>
            Liệt kê File trong thư mục
            </summary>
            <returns></returns>
        </member>
        <member name="M:Cthuvien.kytu.C_NVL(System.String)">
            <summary>Loc ky tu trang</summary>
        </member>
        <member name="M:Cthuvien.kytu.C_NVL(System.String,System.String)">
            <summary>Loc ky ky tu trang. Neu b_in ="" tra b_out</summary>
        </member>
        <member name="M:Cthuvien.kytu.R_NVL(System.String)">
            <summary>Lọc ký tự trắng bên phải</summary>
        </member>
        <member name="M:Cthuvien.kytu.Fs_LOC_SO(System.String)">
            <summary>Loc cac ky tu so trong chuoi</summary>
        </member>
        <member name="M:Cthuvien.kytu.Fs_LOC_CHU(System.String,System.Boolean,System.Boolean)">
            <summary>Loc cac ky tu chu trong chuoi</summary>
        </member>
        <member name="M:Cthuvien.kytu.Fd_LOC_CHU_SO(System.String,System.Boolean,System.Boolean)">
            <summary>Loc cac ky tu chu trong chuoi, tra so</summary>
        </member>
        <member name="M:Cthuvien.kytu.Fs_HOI_SERI(System.String)">
            <summary>Cho Seri tiep theo</summary>
        </member>
        <member name="M:Cthuvien.kytu.Fb_MA_MA(System.String,System.String)">
            <summary>Tim chuoi trong chuoi dang dung</summary>
        </member>
        <member name="M:Cthuvien.kytu.Fb_MA_LMA(System.String,System.String)">
            <summary>Tim chuoi trong chuoi dang Like</summary>
        </member>
        <member name="M:Cthuvien.kytu.Fb_MA_BMA(System.String,System.String)">
            <summary>Kiểm tra tập hợp chuỗi trong chuỗi bậc cao</summary>
        </member>
        <member name="M:Cthuvien.kytu.P_CONG(System.String@,System.String,System.String)">
            <summary>Cộng thêm vào chuỗi cách bằng dấu phẩy,nếu có rồi không cộng</summary>
        </member>
        <member name="M:Cthuvien.kytu.Fs_CONG(System.String[])">
            <summary>Chuyen mảng thành chuỗi cách bằng dấu phẩy</summary>
        </member>
        <member name="M:Cthuvien.kytu.P_THEM(System.String@,System.String,System.String)">
            <summary>Cộng thêm vào chuỗi cách bằng dấu phẩy</summary>
        </member>
        <member name="M:Cthuvien.lenh.P_LENH(System.String)">
            <summary>Lệnh bất kỳ</summary>
        </member>
        <member name="M:Cthuvien.lenh.Fi_KTRA(System.String)">
            <summary>Ktra khong dieu kien</summary>
        </member>
        <member name="M:Cthuvien.lenh.Fi_KTRA(System.String,System.String,System.Object)">
            <summary>Ktra dieu kien don</summary>
        </member>
        <member name="M:Cthuvien.lenh.Fi_KTRA(System.String,System.String[],System.Object[])">
            <summary>Ktra dieu kien mang</summary>
        </member>
        <member name="M:Cthuvien.lenh.Fb_KTRA(System.String,System.String,System.String)">
            <summary>Ktra tập hợp mã trong bảng</summary>
        </member>
        <member name="M:Cthuvien.lenh.Fobj_TEN(System.String,System.String,System.String,System.Object)">
            <summary>Hoi gia tri dieu kien don</summary>
        </member>
        <member name="M:Cthuvien.lenh.Fobj_TEN(System.String,System.String,System.String[],System.Object[])">
            <summary>Hoi gia tri dieu kien mang</summary>
        </member>
        <member name="M:Cthuvien.lenh.Fobj_TRA(System.String,System.String,System.String,System.Object)">
            <summary>Hỏi giá trị điều kiện đơn, nếu không có báo lỗi </summary>
        </member>
        <member name="M:Cthuvien.lenh.Fobj_TRA(System.String,System.String,System.String[],System.Object[])">
            <summary>Hỏi giá trị điều kiện mảng, nếu không có báo lỗi</summary>
        </member>
        <member name="M:Cthuvien.lenh.Fdt_XEM(System.String,System.String,System.String,System.String)">
            <summary>Liệt kê theo lệnh viet sẵn</summary>
        </member>
        <member name="M:Cthuvien.lenh.Fdt_XEM(System.String,System.String,System.String,System.String,System.String,System.String)">
            <summary>Liệt kê không điều kiện</summary>
        </member>
        <member name="M:Cthuvien.lenh.Fdt_XEM(System.String,System.String,System.String,System.String,System.String,System.String,System.Object,System.String)">
            <summary>Liệt kê dieu kien don</summary>
        </member>
        <member name="M:Cthuvien.lenh.Fdt_XEM(System.String,System.String,System.String,System.String,System.String,System.String[],System.Object[],System.String)">
            <summary>Liệt kê dieu kien mang</summary>
        </member>
        <member name="M:Cthuvien.lenh.Fdt_XEM(System.String,System.String,System.String,System.String[],System.Int32,System.String,System.String,System.String)">
            <summary>Liệt kê từ nhiều bảng không điều kiện</summary>
        </member>
        <member name="M:Cthuvien.lenh.Fdt_XEM(System.String,System.String,System.String,System.String[],System.Int32,System.String,System.String,System.String,System.Object,System.String)">
            <summary>Liệt kê từ nhiều bảng điều kiện đơn</summary>
        </member>
        <member name="M:Cthuvien.lenh.Fdt_XEM(System.String,System.String,System.String,System.String[],System.Int32,System.String,System.String,System.String[],System.Object[],System.String)">
            <summary>Liệt kê từ nhiều bảng điều kiện mảng</summary>
        </member>
        <member name="M:Cthuvien.lenh.P_XOA(System.String,System.String,System.String,System.String,System.String,System.Object)">
            <summary>Xoa dieu kien don</summary>
        </member>
        <member name="M:Cthuvien.lenh.P_XOA(System.String,System.String,System.String,System.String,System.String[],System.Object[])">
            <summary>Xoa dieu kien mang</summary>
        </member>
        <member name="M:Cthuvien.lenh.P_NH(System.String,System.String,System.String,System.String,System.Data.DataTable)">
            <summary>Nhap khong dieu kien</summary>
        </member>
        <member name="M:Cthuvien.lenh.P_NH(System.String,System.String,System.String,System.String,System.String,System.Data.DataTable)">
            <summary>Nhap dieu kien don</summary>
        </member>
        <member name="M:Cthuvien.lenh.P_NH(System.String,System.String,System.String,System.String,System.String[],System.Data.DataTable)">
            <summary>Nhap dieu kien mang</summary>
        </member>
        <member name="M:Cthuvien.lenh.Fdt_MA_XEM(System.String,System.String,System.String,System.String)">
            <summary>Liệt kê không điều kiện. Xếp theo trừơng b_tr_ma, trường quản lý b_tr_ma_ct</summary>
        </member>
        <member name="M:Cthuvien.lenh.Fdt_MA_XEM(System.String,System.String,System.String,System.String,System.String)">
            <summary>Liệt kê không điều kiện. Xếp theo trường b_nhom, trường b_tr_ma, trường quản lý b_tr_ma_ct</summary>
        </member>
        <member name="M:Cthuvien.lenh.Fdt_MA_XEM(System.String,System.String,System.String,System.Object,System.String,System.String)">
            <summary>Điều kiện đơn. Xếp theo trừơng b_tr_ma, trường quản lý b_tr_ma_ct</summary>
        </member>
        <member name="M:Cthuvien.lenh.Fdt_MA_XEM(System.String,System.String,System.String,System.Object,System.String,System.String,System.String)">
            <summary>Điều kiện đơn. Xếp theo trừơng b_nhom, b_tr_ma, trường quản lý b_tr_ma_ct</summary>
        </member>
        <member name="M:Cthuvien.lenh.P_MA_NH(System.String,System.String,System.String,System.String,System.String,System.String,System.Data.DataTable)">
            <summary>Nhập điều kiện đơn theo trường b_tr_ma, trường quản lý b_tr_ma_ct</summary>
        </member>
        <member name="M:Cthuvien.lenh.P_MA_NH(System.String,System.String,System.String,System.String,System.String,System.String,System.String,System.Data.DataTable)">
            <summary>Nhập điều kiện theo trường nhóm, trường b_tr_ma, trường quản lý b_tr_ma_ct</summary>
        </member>
        <member name="M:Cthuvien.lenh.P_MA_XOA(System.String,System.String,System.String,System.String,System.String,System.String,System.String)">
            <summary>Xóa điều kiện đơn theo trường b_tr_ma, trường quản lý b_tr_ma_ct</summary>
        </member>
        <member name="M:Cthuvien.lenh.P_MA_XOA(System.String,System.String,System.String,System.String,System.String,System.String,System.String,System.String,System.String)">
            <summary>Xóa điều kiện đơn theo trường nhóm, trường b_tr_ma, trường quản lý b_tr_ma_ct</summary>
        </member>
        <member name="M:Cthuvien.mang.P_MO(System.String[]@,System.Int32,System.String)">
            <summary>
            Mở rộng mảng string có gán giá trị
            </summary>
            <param name="a_obj">Mảng cần mở rộng</param>
            <param name="b_mo">Số phần tử cần mở</param>
            <param name="b_gtri">Giá trị cần gán cho các phần tử mới</param>
        </member>
        <member name="M:Cthuvien.mang.P_MO(System.Double[]@,System.Int32,System.Double)">
            <summary>
            Mở rộng mảng double có gán giá trị
            </summary>
            <param name="a_obj">Mảng cần mở rộng</param>
            <param name="b_mo">Số phần tử cần mở</param>
            <param name="b_gtri">Giá trị cần gán cho các phần tử mới</param>
        </member>
        <member name="M:Cthuvien.mang.P_MO(System.Int32[]@,System.Int32,System.Int32)">
            <summary>
            Mở rộng mảng int có gán giá trị
            </summary>
            <param name="a_obj">Mảng cần mở rộng</param>
            <param name="b_mo">Số phần tử cần mở</param>
            <param name="b_gtri">Giá trị cần gán cho các phần tử mới</param>
        </member>
        <member name="M:Cthuvien.mang.P_MO(System.DateTime[]@,System.Int32,System.DateTime)">
            <summary>
            Mở rộng mảng Datetime có gán giá trị
            </summary>
            <param name="a_obj">Mảng cần mở rộng</param>
            <param name="b_mo">Số phần tử cần mở</param>
            <param name="b_gtri">Giá trị cần gán cho các phần tử mới</param>
        </member>
        <member name="M:Cthuvien.mang.P_MO(System.Boolean[]@,System.Int32,System.Boolean)">
            <summary>
            Mở rộng mảng boolean có gán giá trị
            </summary>
            <param name="a_obj">Mảng cần mở rộng</param>
            <param name="b_mo">Số phần tử cần mở</param>
            <param name="b_gtri">Giá trị cần gán cho các phần tử mới</param>
        </member>
        <member name="M:Cthuvien.mang.P_MO(System.Object[]@,System.Int32,System.Object)">
            <summary>
            Mở rộng mảng object có gán giá trị
            </summary>
            <param name="a_obj">Mảng cần mở rộng</param>
            <param name="b_mo">Số phần tử cần mở</param>
            <param name="b_gtri">Giá trị cần gán cho các phần tử mới</param>
        </member>
        <member name="M:Cthuvien.mang.Fi_hang(System.String[],System.String)">
            <summary>
            Tìm vị trí một phần tử mảng string theo giá trị đưa vào (không phân biệt chữ hoa, chữ thường)
            </summary>
            <param name="a_obj">Mảng</param>
            <param name="b_obj">Giá trị cần tìm</param>
            <returns></returns>
        </member>
        <member name="M:Cthuvien.mang.Fi_hangH(System.String[],System.String)">
            <summary>
            Tìm vị trí một phần tử mảng string theo giá trị đưa vào (phân biệt chữ hoa, chữ thường)
            </summary>
            <param name="a_obj">Mảng</param>
            <param name="b_obj">Giá trị cần tìm</param>
            <returns></returns>
        </member>
        <member name="M:Cthuvien.mang.Fi_hang(System.Int32[],System.Int32)">
            <summary>
            Tìm vị trí một phần tử mảng int theo giá trị đưa vào
            </summary>
            <param name="a_obj">Mảng</param>
            <param name="b_obj">Giá trị cần tìm</param>
            <returns></returns>
        </member>
        <member name="M:Cthuvien.mang.Fi_hang(System.Double[],System.Double)">
            <summary>
            Tìm vị trí một phần tử mảng double theo giá trị đưa vào
            </summary>
            <param name="a_obj">Mảng</param>
            <param name="b_obj">Giá trị cần tìm</param>
            <returns></returns>    
        </member>
        <member name="M:Cthuvien.mang.Fi_hang(System.DateTime[],System.DateTime)">
            <summary>
            Tìm vị trí một phần tử mảng datetime theo giá trị đưa vào
            </summary>
            <param name="a_obj">Mảng</param>
            <param name="b_obj">Giá trị cần tìm</param>
            <returns></returns>
        </member>
        <member name="M:Cthuvien.mang.Fi_hang(System.Object[],System.Object)">
            <summary>
            Tìm vị trí một phần tử mảng object theo giá trị đưa vào
            </summary>
            <param name="a_obj">Mảng</param>
            <param name="b_obj">Giá trị cần tìm</param>
            <returns></returns>
        </member>
        <member name="M:Cthuvien.mang.P_CAT(System.String[]@,System.Int32)">
            <summary>
            Cắt 1 phần tử trong mảng string
            </summary>
            <param name="a_obj">Mảng cần cắt</param>
            <param name="b_cat">Vị trí hàng cần cắt</param>
        </member>
        <member name="M:Cthuvien.mang.P_CAT(System.Int32[]@,System.Int32)">
            <summary>
            Cắt 1 phần tử trong mảng int
            </summary>
            <param name="a_obj">Mảng cần cắt</param>
            <param name="b_cat">Vị trí hàng cần cắt</param>
        </member>
        <member name="M:Cthuvien.mang.P_CAT(System.Double[]@,System.Int32)">
            <summary>
            Cắt 1 phần tử trong mảng double
            </summary>
            <param name="a_obj">Mảng cần cắt</param>
            <param name="b_cat">Vị trí hàng cần cắt</param>
        </member>
        <member name="M:Cthuvien.mang.P_CAT(System.DateTime[]@,System.Int32)">
            <summary>
            Cắt 1 phần tử trong mảng datetime
            </summary>
            <param name="a_obj">Mảng cần cắt</param>
            <param name="b_cat">Vị trí hàng cần cắt</param>
        </member>
        <member name="M:Cthuvien.mang.P_CAT(System.Object[]@,System.Int32)">
            <summary>
            Cắt 1 phần tử trong mảng object
            </summary>
            <param name="a_obj">Mảng cần cắt</param>
            <param name="b_cat">Vị trí hàng cần cắt</param>
        </member>
        <member name="M:Cthuvien.mang.P_XOA(System.String[]@,System.String)">
            <summary>
            Xóa phần tử của mảng string có giá trị bằng giá trị điều kiện
            </summary>
            <param name="a_obj">Mảng cần xóa</param>
            <param name="b_obj">Giá trị điều kiện</param>
        </member>
        <member name="M:Cthuvien.mang.P_XOA(System.Int32[]@,System.Int32)">
            <summary>
            Xóa phần tử của mảng int có giá trị bằng giá trị điều kiện
            </summary>
            <param name="a_obj">Mảng cần xóa</param>
            <param name="b_obj">Giá trị điều kiện</param>
        </member>
        <member name="M:Cthuvien.mang.P_XOA(System.Double[]@,System.Double)">
            <summary>
            Xóa phần tử của mảng double có giá trị bằng giá trị điều kiện
            </summary>
            <param name="a_obj">Mảng cần xóa</param>
            <param name="b_obj">Giá trị điều kiện</param>
        </member>
        <member name="M:Cthuvien.mang.P_XOA(System.DateTime[]@,System.DateTime)">
            <summary>
            Xóa phần tử của mảng datetime có giá trị bằng giá trị điều kiện
            </summary>
            <param name="a_obj">Mảng cần xóa</param>
            <param name="b_obj">Giá trị điều kiện</param>
        </member>
        <member name="M:Cthuvien.mang.P_XOA(System.Object[]@,System.Object)">
            <summary>
            Xóa phần tử của mảng object có giá trị bằng giá trị điều kiện
            </summary>
            <param name="a_obj">Mảng cần xóa</param>
            <param name="b_obj">Giá trị điều kiện</param>
        </member>
        <member name="M:Cthuvien.mang.P_THEM(System.String[]@,System.String)">
            <summary>
            Thêm 1 phần tử thiếu vào mảng string
            </summary>
            <param name="a_obj">Mảng cần thêm</param>
            <param name="b_obj">Giá trị của phần tử thiếu</param>
        </member>
        <member name="M:Cthuvien.mang.P_THEM(System.Int32[]@,System.Int32)">
            <summary>
            Thêm 1 phần tử thiếu vào mảng int
            </summary>
            <param name="a_obj">Mảng cần thêm</param>
            <param name="b_obj">Giá trị của phần tử thiếu</param>
        </member>
        <member name="M:Cthuvien.mang.P_THEM(System.Double[]@,System.Double)">
            <summary>
            Thêm 1 phần tử thiếu vào mảng double
            </summary>
            <param name="a_obj">Mảng cần thêm</param>
            <param name="b_obj">Giá trị của phần tử thiếu</param>
        </member>
        <member name="M:Cthuvien.mang.P_THEM(System.DateTime[]@,System.DateTime)">
            <summary>
            Thêm 1 phần tử thiếu vào mảng datetime
            </summary>
            <param name="a_obj">Mảng cần thêm</param>
            <param name="b_obj">Giá trị của phần tử thiếu</param>
        </member>
        <member name="M:Cthuvien.mang.P_THEM(System.Object[]@,System.Object)">
            <summary>
            Thêm 1 phần tử thiếu vào mảng object
            </summary>
            <param name="a_obj">Mảng cần thêm</param>
            <param name="b_obj">Giá trị của phần tử thiếu</param>
        </member>
        <member name="M:Cthuvien.mang.Fobj_TEN_GTRI(System.String,System.String[],System.Object[])">
            <summary>
            Tìm giá trị object trong mảng theo tên
            </summary>
            <param name="b_ten">Tên cần tìm</param>
            <param name="a_ten">Mảng tên cần tìm</param>
            <param name="a_gtri">Mảng chứa giá trị cần tìm</param>
            <returns></returns>
        </member>
        <member name="M:Cthuvien.mang.Fs_TEN_GTRI(System.String,System.String[],System.Object[])">
            <summary>
            Tìm giá trị chuỗi trong mảng theo tên
            </summary>
            <param name="b_ten">Tên cần tìm</param>
            <param name="a_ten">Mảng tên cần tìm</param>
            <param name="a_gtri">Mảng chứa giá trị cần tìm</param>
            <returns></returns>
        </member>
        <member name="M:Cthuvien.mang.Fn_TEN_GTRI(System.String,System.String[],System.Object[])">
            <summary>
            Tìm giá trị double trong mảng theo tên
            </summary>
            <param name="b_ten">Tên cần tìm</param>
            <param name="a_ten">Mảng tên cần tìm</param>
            <param name="a_gtri">Mảng chứa giá trị cần tìm</param>
            <returns></returns>
        </member>
        <member name="M:Cthuvien.mang.Fi_TEN_GTRI(System.String,System.String[],System.Object[])">
            <summary>
            Tìm giá trị int trong mảng theo tên
            </summary>
            <param name="b_ten">Tên cần tìm</param>
            <param name="a_ten">Mảng tên cần tìm</param>
            <param name="a_gtri">Mảng chứa giá trị cần tìm</param>
            <returns></returns>
        </member>
        <member name="M:Cthuvien.mang.Fd_TEN_GTRI(System.String,System.String[],System.Object[])">
            <summary>
            Tìm giá trị datetime trong mảng theo tên
            </summary>
            <param name="b_ten">Tên cần tìm</param>
            <param name="a_ten">Mảng tên cần tìm</param>
            <param name="a_gtri">Mảng chứa giá trị cần tìm</param>
            <returns></returns>
        </member>
        <member name="M:Cthuvien.mang.Fb_TEN_GTRI(System.String,System.String[],System.Object[])">
            <summary>
            Tìm giá trị boolean trong mảng theo tên
            </summary>
            <param name="b_ten">Tên cần tìm</param>
            <param name="a_ten">Mảng tên cần tìm</param>
            <param name="a_gtri">Mảng chứa giá trị cần tìm</param>
            <returns></returns>
        </member>
        <member name="M:Cthuvien.tgian.Fs_PHAN_NGAY(System.String)">
            <summary>Phần ngày</summary>
        </member>
        <member name="M:Cthuvien.tgian.Fs_PHAN_THANG(System.String)">
            <summary>Phần tháng</summary>
        </member>
        <member name="M:Cthuvien.tgian.Fs_PHAN_NAM(System.String)">
            <summary>Phần năm</summary>
        </member>
        <member name="M:Cthuvien.tgian.Fs_DAU_THANG(System.String)">
            <summary>Ngày đầu tháng</summary>
        </member>
        <member name="M:Cthuvien.tgian.Fs_CUOI_THANG(System.String)">
            <summary>Ngày cuối tháng</summary>
        </member>
        <member name="M:Cthuvien.tgian.Fs_DAU_QUI(System.String)">
            <summary>Ngày đầu quí</summary>
        </member>
        <member name="M:Cthuvien.tgian.Fs_CUOI_QUI(System.String)">
            <summary>Ngày cuối quí</summary>
        </member>
        <member name="M:Cthuvien.tgian.Fs_DAU_NAM(System.String)">
            <summary>Ngày đầu năm</summary>
        </member>
        <member name="M:Cthuvien.tgian.Fs_CUOI_NAM(System.String)">
            <summary>Ngày cuối năm</summary>
        </member>
        <member name="M:Cthuvien.tgian.Fs_NGAY_THANG(System.String,System.Int32)">
            <summary>Tăng ngày thêm b_thang tháng</summary>
        </member>
        <member name="M:Cthuvien.tgian.Fs_NGAY_NAM(System.String)">
            <summary>Tăng ngày thêm 1 năm</summary>
        </member>
        <member name="M:Cthuvien.tgian.Fs_NGAY_NAM(System.String,System.Int32)">
            <summary>Tăng ngày thêm b_nam năm</summary>
        </member>
        <member name="M:Cthuvien.tgian.Fi_KHOANG_THANG(System.DateTime,System.DateTime)">
            <summary> Số tháng giữa 2 ngày </summary>
        </member>
        <member name="M:Cthuvien.tgian.Fi_KHOANG_NGAY(System.DateTime,System.DateTime)">
            <summary> Số ngày giữa 2 ngày </summary>
        </member>
        <member name="M:Cthuvien.tgian.Fi_KHOANG_NGAY(System.String,System.String)">
            <summary> Số ngày giữa 2 ngày </summary>
        </member>
        <member name="M:Cthuvien.tgian.Fi_SONGTH(System.DateTime)">
            <summary> Số ngày của tháng </summary>
        </member>
        <member name="M:Cthuvien.tgian.Fi_SONGTH(System.String)">
            <summary> Số ngày của tháng </summary>
        </member>
        <member name="T:Cthuvien.se">
            <summary>Xử lý Session</summary>
        </member>
        <member name="M:Cthuvien.se.Fs_DUYET">
            <summary>Kiểm tra quyền NSD</summary>
        </member>
        <member name="M:Cthuvien.se.Fb_NSD_QU(System.String,System.String,System.String)">
            <summary>Kiểm tra quyền NSD</summary>
        </member>
        <member name="M:Cthuvien.se.Fs_LOGIN">
            <summary>Trả login</summary>
        </member>
        <member name="M:Cthuvien.se.P_LOGIN(System.String,System.Boolean)">
            <summary>Đặt login</summary>
        </member>
        <member name="M:Cthuvien.se.P_LOGIN(System.String,System.String)">
            <summary>Đặt login</summary>
        </member>
        <member name="M:Cthuvien.se.P_LOGIN(System.String,System.String,System.String,System.String,System.String,System.Data.DataRow)">
            <summary>Login</summary>
        </member>
        <member name="M:Cthuvien.se.P_LOGIN(System.String,System.String,System.String,System.String,System.String)">
            <summary>Login</summary>
        </member>
        <member name="M:Cthuvien.se.Fs_LOGIN_NSD(System.String)">
            <summary>Tra Login</summary>
        </member>
        <member name="M:Cthuvien.se.P_LOGIN_XOA(System.String)">
            <summary>Trung gian cua 1 login</summary>
        </member>
        <member name="M:Cthuvien.se.Fb_CTR_KTRA(System.String,System.String)">
            <summary>Kiểm tra đối tượng thêm động đã thêm chưa</summary>
        </member>
        <member name="M:Cthuvien.se.P_CTR_XOA(System.String,System.String)">
            <summary>Xóa lưu đối tượng thêm động</summary>
        </member>
        <member name="M:Cthuvien.se.P_CTR_XOA(System.String)">
            <summary>Xóa lưu đối tượng thêm động của 1 form</summary>
        </member>
        <member name="M:Cthuvien.se.P_CTR_LUU(System.String,System.String)">
            <summary>Lưu đối tượng thêm động</summary>
        </member>
        <member name="M:Cthuvien.se.Fdt_CTR_TRA(System.String)">
            <summary>Trả datatable chứa đối tượng thêm động</summary>
        </member>
        <member name="M:Cthuvien.se.Fb_KQ_KTRA(System.String,System.String)">
            <summary>Kiểm tra Datatable của Dataset ds_kq</summary>
        </member>
        <member name="M:Cthuvien.se.P_KQ_LUU(System.String,System.String,System.Data.DataTable)">
            <summary>Lưu 1 Datatable vào Dataset ds_kq</summary>
        </member>
        <member name="M:Cthuvien.se.P_KQ_LUU(System.String,System.String,System.Data.DataSet)">
            <summary> Lưu 1 Dataset </summary>
        </member>
        <member name="M:Cthuvien.se.Fdt_KQ_TRA(System.String,System.String)">
            <summary>Trả 1 Datatable của Dataset ds_kq</summary>
        </member>
        <member name="M:Cthuvien.se.Fds_KQ_TRA(System.String,System.String)">
            <summary>Trả 1 Dataset</summary>
        </member>
        <member name="M:Cthuvien.se.P_KQ_XOA(System.String)">
            <summary>Xóa Datatable có tên gần đúng của Dataset ds_kq</summary>
        </member>
        <member name="M:Cthuvien.se.P_KQ_XOA(System.String,System.String)">
            <summary>Xóa 1 Datatable của Dataset trung gian</summary>
        </member>
        <member name="M:Cthuvien.se.P_LUU(System.String,System.String,System.Object[])">
            <summary>Lưu mảng object</summary>
        </member>
        <member name="M:Cthuvien.se.P_LUU(System.String,System.String,System.Data.DataTable)">
            <summary>Lưu datatable</summary>
        </member>
        <member name="M:Cthuvien.se.P_LUU(System.String,System.String,System.Data.DataSet)">
            <summary>Lưu Dataset</summary>
        </member>
        <member name="M:Cthuvien.se.P_DAY(System.Web.UI.Page,System.String,System.String,System.Object[])">
            <summary>Đẩy mảng object cho form đã mở</summary>
        </member>
        <member name="M:Cthuvien.se.P_DAY(System.Web.UI.Page,System.String,System.String,System.Data.DataTable)">
            <summary>Đẩy datatable cho form đã mở</summary>
        </member>
        <member name="M:Cthuvien.se.P_DAY(System.Web.UI.Page,System.String,System.String,System.Data.DataSet)">
            <summary>Đẩy dataset cho form đã mở</summary>
        </member>
        <member name="M:Cthuvien.se.P_TRA(System.Web.UI.Page)">
            <summary>Trả kết từ form con</summary>
        </member>
        <member name="M:Cthuvien.se.P_TRA(System.Web.UI.Page,System.Object[])">
            <summary>Trả kết qủa mảng object từ form con</summary>
        </member>
        <member name="M:Cthuvien.se.P_TRA(System.Web.UI.Page,System.Data.DataTable)">
            <summary>Trả kết qủa datatable từ form con</summary>
        </member>
        <member name="M:Cthuvien.se.P_TRA(System.Web.UI.Page,System.Data.DataSet)">
            <summary>Trả kết qủa datatable từ form con</summary>
        </member>
        <member name="M:Cthuvien.se.Pob_NHAN(System.Web.UI.Page,System.String,System.String@,System.Object[]@)">
            <summary>Nhận kết qủa mảng Object từ Session</summary>
        </member>
        <member name="M:Cthuvien.se.Pdt_NHAN(System.Web.UI.Page,System.String,System.String,System.Data.DataTable@)">
            <summary>Nhận kết qủa Datatable từ Session</summary>
        </member>
        <member name="M:Cthuvien.se.Pdt_NHAN(System.Web.UI.Page,System.String,System.String,System.Data.DataSet@)">
            <summary>Nhận kết qủa Dataset từ Session</summary>
        </member>
        <member name="M:Cthuvien.se.Fi_TG_SO_TT(System.String,System.String,System.String)">
            <summary>Trả số thứ tự tiếp theo</summary>
        </member>
        <member name="M:Cthuvien.se.Fb_TG_KTRA(System.String,System.String)">
            <summary>Kiểm tra Datatable của Dataset trung gian đã có chưa</summary>
        </member>
        <member name="M:Cthuvien.se.Fb_TG_KTRA(System.String,System.String,System.String,System.Object)">
            <summary>Kiểm tra trong Datatable đã có chưa với điều kiện đơn</summary>
        </member>
        <member name="M:Cthuvien.se.Fb_TG_KTRA(System.String,System.String,System.String[],System.Object[])">
            <summary>Kiểm tra trong Datatable đã có chưa với điều kiện mảng</summary>
        </member>
        <member name="M:Cthuvien.se.P_TG_LUU(System.String,System.String,System.Data.DataTable)">
            <summary>Lưu 1 Datatable vào Dataset trung gian</summary>
        </member>
        <member name="M:Cthuvien.se.Fdt_TG_TRA(System.String,System.String)">
            <summary>Trả 1 Datatable của Dataset trung gian</summary>
        </member>
        <member name="M:Cthuvien.se.Fdt_TG_TRA(System.String,System.String,System.String,System.Object,System.String)">
            <summary>Trả 1 phần Datatable của Dataset trung gian điều kiện đơn </summary>
        </member>
        <member name="M:Cthuvien.se.Fdt_TG_TRA(System.String,System.String,System.String[],System.Object[])">
            <summary>Trả 1 phần Datatable của Dataset trung gian điều kiện mang </summary>
        </member>
        <member name="M:Cthuvien.se.P_TG_XOA(System.String)">
            <summary>Xóa Datatable có tên gần đúng của Dataset trung gian</summary>
        </member>
        <member name="M:Cthuvien.se.P_TG_XOA(System.String,System.String)">
            <summary>Xóa cac Datatable của Dataset trung gian. Cac ten cach nhau dau phay</summary>
        </member>
        <member name="M:Cthuvien.se.P_TG_XOA(System.String,System.String[])">
            <summary>Xóa vai Datatable của Dataset trung gian</summary>
        </member>
        <member name="M:Cthuvien.se.P_TG_GIU(System.String,System.String)">
            <summary>Xóa cac Datatable của Dataset trung gian khong nam trong b_ten. Cac ten cach nhau dau phay</summary>
        </member>
        <member name="M:Cthuvien.se.P_TG_GIU(System.String,System.String[])">
            <summary>Xóa 1 Datatable của Dataset trung gian</summary>
        </member>
        <member name="M:Cthuvien.se.P_TG_BO_HANG(System.String,System.String,System.String,System.Object)">
            <summary>Xóa hàng của Datatable trung gian điều kiện đơn</summary>
        </member>
        <member name="M:Cthuvien.se.P_TG_BO_HANG(System.String,System.String,System.String,System.Object[])">
            <summary>Xóa hàng của Datatable trung gian điều kiện đơn mảng</summary>
        </member>
        <member name="M:Cthuvien.se.P_TG_THEM_HANG(System.Data.DataTable,System.String,System.String,System.String,System.Object,System.String)">
            <summary>Thêm hàng vào Datatable trung gian điều kiện đơn</summary>
        </member>
        <member name="M:Cthuvien.se.P_TG_THEM_HANG(System.Data.DataTable,System.String,System.String,System.String[],System.Object[],System.String)">
            <summary>Thêm hàng vào Datatable trung gian điều kiện mảng</summary>
        </member>
        <member name="M:Cthuvien.se.P_BIEN_LUU(System.String,System.String,System.Object)">
            <summary>Lưu 1 object</summary>
        </member>
        <member name="M:Cthuvien.se.Fobj_BIEN_TRA(System.String,System.String)">
            <summary>Trả 1 object</summary>
        </member>
        <member name="M:Cthuvien.se.P_BIEN_XOA(System.String)">
            <summary>Xóa 1 object cua form</summary>
        </member>
        <member name="M:Cthuvien.se.P_BIEN_XOA(System.String,System.String)">
            <summary>Xóa 1 Datatable của Dataset trung gian</summary>
        </member>
        <member name="T:Cthuvien.se.se_nsd">
            <summary>Class lấy thông tin Login</summary>
        </member>
    </members>
</doc>
